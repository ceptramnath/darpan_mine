// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'EMODBModel.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:EmoTable.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// EmoTable TABLE
class TableEmoTable extends SqfEntityTableBase {
  TableEmoTable() {
    // declare properties of EntityTable
    tableName = 'emoTable';
    primaryKeyName = 'emoId';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('EMOValue', DbType.integer),
      SqfEntityFieldBase('Message', DbType.text),
      SqfEntityFieldBase('Commission', DbType.integer),
      SqfEntityFieldBase('EMOAmount', DbType.integer),
      SqfEntityFieldBase('SenderName', DbType.text),
      SqfEntityFieldBase('SenderAddress', DbType.text),
      SqfEntityFieldBase('SenderPincode', DbType.integer),
      SqfEntityFieldBase('SenderCity', DbType.text),
      SqfEntityFieldBase('SenderState', DbType.text),
      SqfEntityFieldBase('SenderMobileNumber', DbType.text),
      SqfEntityFieldBase('SenderEmail', DbType.text),
      SqfEntityFieldBase('PayeeName', DbType.text),
      SqfEntityFieldBase('PayeeAddress', DbType.text),
      SqfEntityFieldBase('PayeePincode', DbType.integer),
      SqfEntityFieldBase('PayeeCity', DbType.text),
      SqfEntityFieldBase('PayeeState', DbType.text),
      SqfEntityFieldBase('PayeeMobileNumber', DbType.text),
      SqfEntityFieldBase('PayeeEmail', DbType.text),
      SqfEntityFieldBase('Type', DbType.text),
      SqfEntityFieldBase('RemarkDate', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableEmoTable();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class EmoFormModel extends SqfEntityModelProvider {
  EmoFormModel() {
    databaseName = formLetterModel.databaseName;
    password = formLetterModel.password;
    dbVersion = formLetterModel.dbVersion;
    preSaveAction = formLetterModel.preSaveAction;
    logFunction = formLetterModel.logFunction;
    databaseTables = [
      TableEmoTable.getInstance,
    ];

    bundledDatabasePath = formLetterModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = formLetterModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region EmoTable
class EmoTable extends TableBase {
  EmoTable(
      {this.emoId,
      this.EMOValue,
      this.Message,
      this.Commission,
      this.EMOAmount,
      this.SenderName,
      this.SenderAddress,
      this.SenderPincode,
      this.SenderCity,
      this.SenderState,
      this.SenderMobileNumber,
      this.SenderEmail,
      this.PayeeName,
      this.PayeeAddress,
      this.PayeePincode,
      this.PayeeCity,
      this.PayeeState,
      this.PayeeMobileNumber,
      this.PayeeEmail,
      this.Type,
      this.RemarkDate}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  EmoTable.withFields(
      this.EMOValue,
      this.Message,
      this.Commission,
      this.EMOAmount,
      this.SenderName,
      this.SenderAddress,
      this.SenderPincode,
      this.SenderCity,
      this.SenderState,
      this.SenderMobileNumber,
      this.SenderEmail,
      this.PayeeName,
      this.PayeeAddress,
      this.PayeePincode,
      this.PayeeCity,
      this.PayeeState,
      this.PayeeMobileNumber,
      this.PayeeEmail,
      this.Type,
      this.RemarkDate) {
    _setDefaultValues();
  }
  EmoTable.withId(
      this.emoId,
      this.EMOValue,
      this.Message,
      this.Commission,
      this.EMOAmount,
      this.SenderName,
      this.SenderAddress,
      this.SenderPincode,
      this.SenderCity,
      this.SenderState,
      this.SenderMobileNumber,
      this.SenderEmail,
      this.PayeeName,
      this.PayeeAddress,
      this.PayeePincode,
      this.PayeeCity,
      this.PayeeState,
      this.PayeeMobileNumber,
      this.PayeeEmail,
      this.Type,
      this.RemarkDate) {
    _setDefaultValues();
  }
  // fromMap v2.0
  EmoTable.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    emoId = int.tryParse(o['emoId'].toString());
    if (o['EMOValue'] != null) {
      EMOValue = int.tryParse(o['EMOValue'].toString());
    }
    if (o['Message'] != null) {
      Message = o['Message'].toString();
    }
    if (o['Commission'] != null) {
      Commission = int.tryParse(o['Commission'].toString());
    }
    if (o['EMOAmount'] != null) {
      EMOAmount = int.tryParse(o['EMOAmount'].toString());
    }
    if (o['SenderName'] != null) {
      SenderName = o['SenderName'].toString();
    }
    if (o['SenderAddress'] != null) {
      SenderAddress = o['SenderAddress'].toString();
    }
    if (o['SenderPincode'] != null) {
      SenderPincode = int.tryParse(o['SenderPincode'].toString());
    }
    if (o['SenderCity'] != null) {
      SenderCity = o['SenderCity'].toString();
    }
    if (o['SenderState'] != null) {
      SenderState = o['SenderState'].toString();
    }
    if (o['SenderMobileNumber'] != null) {
      SenderMobileNumber = o['SenderMobileNumber'].toString();
    }
    if (o['SenderEmail'] != null) {
      SenderEmail = o['SenderEmail'].toString();
    }
    if (o['PayeeName'] != null) {
      PayeeName = o['PayeeName'].toString();
    }
    if (o['PayeeAddress'] != null) {
      PayeeAddress = o['PayeeAddress'].toString();
    }
    if (o['PayeePincode'] != null) {
      PayeePincode = int.tryParse(o['PayeePincode'].toString());
    }
    if (o['PayeeCity'] != null) {
      PayeeCity = o['PayeeCity'].toString();
    }
    if (o['PayeeState'] != null) {
      PayeeState = o['PayeeState'].toString();
    }
    if (o['PayeeMobileNumber'] != null) {
      PayeeMobileNumber = o['PayeeMobileNumber'].toString();
    }
    if (o['PayeeEmail'] != null) {
      PayeeEmail = o['PayeeEmail'].toString();
    }
    if (o['Type'] != null) {
      Type = o['Type'].toString();
    }
    if (o['RemarkDate'] != null) {
      RemarkDate = o['RemarkDate'].toString();
    }
  }
  // FIELDS (EmoTable)
  int? emoId;
  int? EMOValue;
  String? Message;
  int? Commission;
  int? EMOAmount;
  String? SenderName;
  String? SenderAddress;
  int? SenderPincode;
  String? SenderCity;
  String? SenderState;
  String? SenderMobileNumber;
  String? SenderEmail;
  String? PayeeName;
  String? PayeeAddress;
  int? PayeePincode;
  String? PayeeCity;
  String? PayeeState;
  String? PayeeMobileNumber;
  String? PayeeEmail;
  String? Type;
  String? RemarkDate;

  // end FIELDS (EmoTable)

  static const bool _softDeleteActivated = false;
  EmoTableManager? __mnEmoTable;

  EmoTableManager get _mnEmoTable {
    return __mnEmoTable = __mnEmoTable ?? EmoTableManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['emoId'] = emoId;
    if (EMOValue != null || !forView) {
      map['EMOValue'] = EMOValue;
    }
    if (Message != null || !forView) {
      map['Message'] = Message;
    }
    if (Commission != null || !forView) {
      map['Commission'] = Commission;
    }
    if (EMOAmount != null || !forView) {
      map['EMOAmount'] = EMOAmount;
    }
    if (SenderName != null || !forView) {
      map['SenderName'] = SenderName;
    }
    if (SenderAddress != null || !forView) {
      map['SenderAddress'] = SenderAddress;
    }
    if (SenderPincode != null || !forView) {
      map['SenderPincode'] = SenderPincode;
    }
    if (SenderCity != null || !forView) {
      map['SenderCity'] = SenderCity;
    }
    if (SenderState != null || !forView) {
      map['SenderState'] = SenderState;
    }
    if (SenderMobileNumber != null || !forView) {
      map['SenderMobileNumber'] = SenderMobileNumber;
    }
    if (SenderEmail != null || !forView) {
      map['SenderEmail'] = SenderEmail;
    }
    if (PayeeName != null || !forView) {
      map['PayeeName'] = PayeeName;
    }
    if (PayeeAddress != null || !forView) {
      map['PayeeAddress'] = PayeeAddress;
    }
    if (PayeePincode != null || !forView) {
      map['PayeePincode'] = PayeePincode;
    }
    if (PayeeCity != null || !forView) {
      map['PayeeCity'] = PayeeCity;
    }
    if (PayeeState != null || !forView) {
      map['PayeeState'] = PayeeState;
    }
    if (PayeeMobileNumber != null || !forView) {
      map['PayeeMobileNumber'] = PayeeMobileNumber;
    }
    if (PayeeEmail != null || !forView) {
      map['PayeeEmail'] = PayeeEmail;
    }
    if (Type != null || !forView) {
      map['Type'] = Type;
    }
    if (RemarkDate != null || !forView) {
      map['RemarkDate'] = RemarkDate;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['emoId'] = emoId;
    if (EMOValue != null || !forView) {
      map['EMOValue'] = EMOValue;
    }
    if (Message != null || !forView) {
      map['Message'] = Message;
    }
    if (Commission != null || !forView) {
      map['Commission'] = Commission;
    }
    if (EMOAmount != null || !forView) {
      map['EMOAmount'] = EMOAmount;
    }
    if (SenderName != null || !forView) {
      map['SenderName'] = SenderName;
    }
    if (SenderAddress != null || !forView) {
      map['SenderAddress'] = SenderAddress;
    }
    if (SenderPincode != null || !forView) {
      map['SenderPincode'] = SenderPincode;
    }
    if (SenderCity != null || !forView) {
      map['SenderCity'] = SenderCity;
    }
    if (SenderState != null || !forView) {
      map['SenderState'] = SenderState;
    }
    if (SenderMobileNumber != null || !forView) {
      map['SenderMobileNumber'] = SenderMobileNumber;
    }
    if (SenderEmail != null || !forView) {
      map['SenderEmail'] = SenderEmail;
    }
    if (PayeeName != null || !forView) {
      map['PayeeName'] = PayeeName;
    }
    if (PayeeAddress != null || !forView) {
      map['PayeeAddress'] = PayeeAddress;
    }
    if (PayeePincode != null || !forView) {
      map['PayeePincode'] = PayeePincode;
    }
    if (PayeeCity != null || !forView) {
      map['PayeeCity'] = PayeeCity;
    }
    if (PayeeState != null || !forView) {
      map['PayeeState'] = PayeeState;
    }
    if (PayeeMobileNumber != null || !forView) {
      map['PayeeMobileNumber'] = PayeeMobileNumber;
    }
    if (PayeeEmail != null || !forView) {
      map['PayeeEmail'] = PayeeEmail;
    }
    if (Type != null || !forView) {
      map['Type'] = Type;
    }
    if (RemarkDate != null || !forView) {
      map['RemarkDate'] = RemarkDate;
    }

    return map;
  }

  /// This method returns Json String [EmoTable]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [EmoTable]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      EMOValue,
      Message,
      Commission,
      EMOAmount,
      SenderName,
      SenderAddress,
      SenderPincode,
      SenderCity,
      SenderState,
      SenderMobileNumber,
      SenderEmail,
      PayeeName,
      PayeeAddress,
      PayeePincode,
      PayeeCity,
      PayeeState,
      PayeeMobileNumber,
      PayeeEmail,
      Type,
      RemarkDate
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      emoId,
      EMOValue,
      Message,
      Commission,
      EMOAmount,
      SenderName,
      SenderAddress,
      SenderPincode,
      SenderCity,
      SenderState,
      SenderMobileNumber,
      SenderEmail,
      PayeeName,
      PayeeAddress,
      PayeePincode,
      PayeeCity,
      PayeeState,
      PayeeMobileNumber,
      PayeeEmail,
      Type,
      RemarkDate
    ];
  }

  static Future<List<EmoTable>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR EmoTable.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<EmoTable>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <EmoTable>[];
    try {
      objList = list
          .map((emotable) => EmoTable.fromMap(emotable as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR EmoTable.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<EmoTable>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<EmoTable> objList = <EmoTable>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = EmoTable.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns EmoTable by ID if exist, otherwise returns null
  /// Primary Keys: int? emoId
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [EmoTable] if exist, otherwise returns null
  Future<EmoTable?> getById(int? emoId,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (emoId == null) {
      return null;
    }
    EmoTable? obj;
    final data = await _mnEmoTable.getById([emoId]);
    if (data.length != 0) {
      obj = EmoTable.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (EmoTable) object. If the emoId field is null, saves as a new record and returns new emoId, if emoId is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns emoId
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (emoId == null || emoId == 0) {
      emoId = await _mnEmoTable.insert(this, ignoreBatch);
    } else {
      await _mnEmoTable.update(this);
    }

    return emoId;
  }

  /// Saves the (EmoTable) object. If the emoId field is null, saves as a new record and returns new emoId, if emoId is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns emoId
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (emoId == null || emoId == 0) {
      emoId = await _mnEmoTable.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // emoId= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnEmoTable.updateOrThrow(this);
    }

    return emoId;
  }

  /// saveAs EmoTable. Returns a new Primary Key value of EmoTable

  /// <returns>Returns a new Primary Key value of EmoTable
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    emoId = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<EmoTable> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<EmoTable> emotables,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await EmoFormModel().batchStart();
    for (final obj in emotables) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await EmoFormModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < emotables.length; i++) {
        if (emotables[i].emoId == null) {
          emotables[i].emoId = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns emoId
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnEmoTable.rawInsert(
          'INSERT OR REPLACE INTO emoTable (emoId, EMOValue, Message, Commission, EMOAmount, SenderName, SenderAddress, SenderPincode, SenderCity, SenderState, SenderMobileNumber, SenderEmail, PayeeName, PayeeAddress, PayeePincode, PayeeCity, PayeeState, PayeeMobileNumber, PayeeEmail, Type, RemarkDate)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            emoId,
            EMOValue,
            Message,
            Commission,
            EMOAmount,
            SenderName,
            SenderAddress,
            SenderPincode,
            SenderCity,
            SenderState,
            SenderMobileNumber,
            SenderEmail,
            PayeeName,
            PayeeAddress,
            PayeePincode,
            PayeeCity,
            PayeeState,
            PayeeMobileNumber,
            PayeeEmail,
            Type,
            RemarkDate
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'EmoTable emoId=$emoId updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'EmoTable emoId=$emoId did not update');
      }
      return emoId;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'EmoTable Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns emoId
  @override
  Future<int?> upsert1({bool ignoreBatch = true}) async {
    try {
      final result = await _mnEmoTable.rawInsert(
          'INSERT OR IGNORE INTO emoTable (emoId, EMOValue, Message, Commission, EMOAmount, SenderName, SenderAddress, SenderPincode, SenderCity, SenderState, SenderMobileNumber, SenderEmail, PayeeName, PayeeAddress, PayeePincode, PayeeCity, PayeeState, PayeeMobileNumber, PayeeEmail, Type, RemarkDate)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            emoId,
            EMOValue,
            Message,
            Commission,
            EMOAmount,
            SenderName,
            SenderAddress,
            SenderPincode,
            SenderCity,
            SenderState,
            SenderMobileNumber,
            SenderEmail,
            PayeeName,
            PayeeAddress,
            PayeePincode,
            PayeeCity,
            PayeeState,
            PayeeMobileNumber,
            PayeeEmail,
            Type,
            RemarkDate
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'EmoTable emoId=$emoId updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'EmoTable emoId=$emoId did not update');
      }
      return emoId;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'EmoTable Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<EmoTable>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<EmoTable> emotables,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnEmoTable.rawInsertAll(
        'INSERT OR REPLACE INTO emoTable (emoId, EMOValue, Message, Commission, EMOAmount, SenderName, SenderAddress, SenderPincode, SenderCity, SenderState, SenderMobileNumber, SenderEmail, PayeeName, PayeeAddress, PayeePincode, PayeeCity, PayeeState, PayeeMobileNumber, PayeeEmail, Type, RemarkDate)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
        emotables,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes EmoTable

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete EmoTable invoked (emoId=$emoId)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnEmoTable
          .delete(QueryParams(whereString: 'emoId=?', whereArguments: [emoId]));
    } else {
      return _mnEmoTable.updateBatch(
          QueryParams(whereString: 'emoId=?', whereArguments: [emoId]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [EmoTable] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  EmoTableFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return EmoTableFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  EmoTableFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return EmoTableFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      emoId = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion emotable

// region EmoTableField
class EmoTableField extends FilterBase {
  EmoTableField(EmoTableFilterBuilder emotableFB) : super(emotableFB);

  @override
  EmoTableFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as EmoTableFilterBuilder;
  }

  @override
  EmoTableFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as EmoTableFilterBuilder;
  }

  @override
  EmoTableFilterBuilder isNull() {
    return super.isNull() as EmoTableFilterBuilder;
  }

  @override
  EmoTableFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as EmoTableFilterBuilder;
  }

  @override
  EmoTableFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as EmoTableFilterBuilder;
  }

  @override
  EmoTableFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as EmoTableFilterBuilder;
  }

  @override
  EmoTableFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as EmoTableFilterBuilder;
  }

  @override
  EmoTableFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as EmoTableFilterBuilder;
  }

  @override
  EmoTableFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as EmoTableFilterBuilder;
  }

  @override
  EmoTableFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as EmoTableFilterBuilder;
  }

  @override
  EmoTableFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as EmoTableFilterBuilder;
  }

  @override
  EmoTableFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as EmoTableFilterBuilder;
  }

  @override
  EmoTableField get not {
    return super.not as EmoTableField;
  }
}
// endregion EmoTableField

// region EmoTableFilterBuilder
class EmoTableFilterBuilder extends ConjunctionBase {
  EmoTableFilterBuilder(EmoTable obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnEmoTable = obj._mnEmoTable;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  EmoTableManager? _mnEmoTable;

  /// put the sql keyword 'AND'
  @override
  EmoTableFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  EmoTableFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  EmoTableFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  EmoTableFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  EmoTableFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  EmoTableFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  EmoTableFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  EmoTableFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  EmoTableFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  EmoTableFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  EmoTableFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  EmoTableField _setField(EmoTableField? field, String colName, DbType dbtype) {
    return EmoTableField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  EmoTableField? _emoId;
  EmoTableField get emoId {
    return _emoId = _setField(_emoId, 'emoId', DbType.integer);
  }

  EmoTableField? _EMOValue;
  EmoTableField get EMOValue {
    return _EMOValue = _setField(_EMOValue, 'EMOValue', DbType.integer);
  }

  EmoTableField? _Message;
  EmoTableField get Message {
    return _Message = _setField(_Message, 'Message', DbType.text);
  }

  EmoTableField? _Commission;
  EmoTableField get Commission {
    return _Commission = _setField(_Commission, 'Commission', DbType.integer);
  }

  EmoTableField? _EMOAmount;
  EmoTableField get EMOAmount {
    return _EMOAmount = _setField(_EMOAmount, 'EMOAmount', DbType.integer);
  }

  EmoTableField? _SenderName;
  EmoTableField get SenderName {
    return _SenderName = _setField(_SenderName, 'SenderName', DbType.text);
  }

  EmoTableField? _SenderAddress;
  EmoTableField get SenderAddress {
    return _SenderAddress =
        _setField(_SenderAddress, 'SenderAddress', DbType.text);
  }

  EmoTableField? _SenderPincode;
  EmoTableField get SenderPincode {
    return _SenderPincode =
        _setField(_SenderPincode, 'SenderPincode', DbType.integer);
  }

  EmoTableField? _SenderCity;
  EmoTableField get SenderCity {
    return _SenderCity = _setField(_SenderCity, 'SenderCity', DbType.text);
  }

  EmoTableField? _SenderState;
  EmoTableField get SenderState {
    return _SenderState = _setField(_SenderState, 'SenderState', DbType.text);
  }

  EmoTableField? _SenderMobileNumber;
  EmoTableField get SenderMobileNumber {
    return _SenderMobileNumber =
        _setField(_SenderMobileNumber, 'SenderMobileNumber', DbType.text);
  }

  EmoTableField? _SenderEmail;
  EmoTableField get SenderEmail {
    return _SenderEmail = _setField(_SenderEmail, 'SenderEmail', DbType.text);
  }

  EmoTableField? _PayeeName;
  EmoTableField get PayeeName {
    return _PayeeName = _setField(_PayeeName, 'PayeeName', DbType.text);
  }

  EmoTableField? _PayeeAddress;
  EmoTableField get PayeeAddress {
    return _PayeeAddress =
        _setField(_PayeeAddress, 'PayeeAddress', DbType.text);
  }

  EmoTableField? _PayeePincode;
  EmoTableField get PayeePincode {
    return _PayeePincode =
        _setField(_PayeePincode, 'PayeePincode', DbType.integer);
  }

  EmoTableField? _PayeeCity;
  EmoTableField get PayeeCity {
    return _PayeeCity = _setField(_PayeeCity, 'PayeeCity', DbType.text);
  }

  EmoTableField? _PayeeState;
  EmoTableField get PayeeState {
    return _PayeeState = _setField(_PayeeState, 'PayeeState', DbType.text);
  }

  EmoTableField? _PayeeMobileNumber;
  EmoTableField get PayeeMobileNumber {
    return _PayeeMobileNumber =
        _setField(_PayeeMobileNumber, 'PayeeMobileNumber', DbType.text);
  }

  EmoTableField? _PayeeEmail;
  EmoTableField get PayeeEmail {
    return _PayeeEmail = _setField(_PayeeEmail, 'PayeeEmail', DbType.text);
  }

  EmoTableField? _Type;
  EmoTableField get Type {
    return _Type = _setField(_Type, 'Type', DbType.text);
  }

  EmoTableField? _RemarkDate;
  EmoTableField get RemarkDate {
    return _RemarkDate = _setField(_RemarkDate, 'RemarkDate', DbType.text);
  }

  /// Deletes List<EmoTable> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnEmoTable!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnEmoTable!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'emoId IN (SELECT emoId from emoTable ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnEmoTable!.updateBatch(qparams, values);
  }

  /// This method always returns [EmoTable] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> EmoTable?
  @override
  Future<EmoTable?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnEmoTable!.toList(qparams);
    final data = await objFuture;
    EmoTable? obj;
    if (data.isNotEmpty) {
      obj = EmoTable.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [EmoTable]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> EmoTable?
  @override
  Future<EmoTable> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        EmoTable();
  }

  /// This method returns int. [EmoTable]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? emotableCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final emotablesFuture = await _mnEmoTable!.toList(qparams);
    final int count = emotablesFuture[0]['CNT'] as int;
    if (emotableCount != null) {
      emotableCount(count);
    }
    return count;
  }

  /// This method returns List<EmoTable> [EmoTable]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<EmoTable>
  @override
  Future<List<EmoTable>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<EmoTable> emotablesData = await EmoTable.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return emotablesData;
  }

  /// This method returns Json String [EmoTable]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [EmoTable]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [EmoTable]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnEmoTable!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [EmoTable]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `emoId` FROM emoTable WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> emoIdData = <int>[];
    qparams.selectColumns = ['emoId'];
    final emoIdFuture = await _mnEmoTable!.toList(qparams);

    final int count = emoIdFuture.length;
    for (int i = 0; i < count; i++) {
      emoIdData.add(emoIdFuture[i]['emoId'] as int);
    }
    return emoIdData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [EmoTable]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnEmoTable!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await EmoTable.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnEmoTable!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion EmoTableFilterBuilder

// region EmoTableFields
class EmoTableFields {
  static TableField? _fEmoId;
  static TableField get emoId {
    return _fEmoId =
        _fEmoId ?? SqlSyntax.setField(_fEmoId, 'emoid', DbType.integer);
  }

  static TableField? _fEMOValue;
  static TableField get EMOValue {
    return _fEMOValue = _fEMOValue ??
        SqlSyntax.setField(_fEMOValue, 'EMOValue', DbType.integer);
  }

  static TableField? _fMessage;
  static TableField get Message {
    return _fMessage =
        _fMessage ?? SqlSyntax.setField(_fMessage, 'Message', DbType.text);
  }

  static TableField? _fCommission;
  static TableField get Commission {
    return _fCommission = _fCommission ??
        SqlSyntax.setField(_fCommission, 'Commission', DbType.integer);
  }

  static TableField? _fEMOAmount;
  static TableField get EMOAmount {
    return _fEMOAmount = _fEMOAmount ??
        SqlSyntax.setField(_fEMOAmount, 'EMOAmount', DbType.integer);
  }

  static TableField? _fSenderName;
  static TableField get SenderName {
    return _fSenderName = _fSenderName ??
        SqlSyntax.setField(_fSenderName, 'SenderName', DbType.text);
  }

  static TableField? _fSenderAddress;
  static TableField get SenderAddress {
    return _fSenderAddress = _fSenderAddress ??
        SqlSyntax.setField(_fSenderAddress, 'SenderAddress', DbType.text);
  }

  static TableField? _fSenderPincode;
  static TableField get SenderPincode {
    return _fSenderPincode = _fSenderPincode ??
        SqlSyntax.setField(_fSenderPincode, 'SenderPincode', DbType.integer);
  }

  static TableField? _fSenderCity;
  static TableField get SenderCity {
    return _fSenderCity = _fSenderCity ??
        SqlSyntax.setField(_fSenderCity, 'SenderCity', DbType.text);
  }

  static TableField? _fSenderState;
  static TableField get SenderState {
    return _fSenderState = _fSenderState ??
        SqlSyntax.setField(_fSenderState, 'SenderState', DbType.text);
  }

  static TableField? _fSenderMobileNumber;
  static TableField get SenderMobileNumber {
    return _fSenderMobileNumber = _fSenderMobileNumber ??
        SqlSyntax.setField(
            _fSenderMobileNumber, 'SenderMobileNumber', DbType.text);
  }

  static TableField? _fSenderEmail;
  static TableField get SenderEmail {
    return _fSenderEmail = _fSenderEmail ??
        SqlSyntax.setField(_fSenderEmail, 'SenderEmail', DbType.text);
  }

  static TableField? _fPayeeName;
  static TableField get PayeeName {
    return _fPayeeName = _fPayeeName ??
        SqlSyntax.setField(_fPayeeName, 'PayeeName', DbType.text);
  }

  static TableField? _fPayeeAddress;
  static TableField get PayeeAddress {
    return _fPayeeAddress = _fPayeeAddress ??
        SqlSyntax.setField(_fPayeeAddress, 'PayeeAddress', DbType.text);
  }

  static TableField? _fPayeePincode;
  static TableField get PayeePincode {
    return _fPayeePincode = _fPayeePincode ??
        SqlSyntax.setField(_fPayeePincode, 'PayeePincode', DbType.integer);
  }

  static TableField? _fPayeeCity;
  static TableField get PayeeCity {
    return _fPayeeCity = _fPayeeCity ??
        SqlSyntax.setField(_fPayeeCity, 'PayeeCity', DbType.text);
  }

  static TableField? _fPayeeState;
  static TableField get PayeeState {
    return _fPayeeState = _fPayeeState ??
        SqlSyntax.setField(_fPayeeState, 'PayeeState', DbType.text);
  }

  static TableField? _fPayeeMobileNumber;
  static TableField get PayeeMobileNumber {
    return _fPayeeMobileNumber = _fPayeeMobileNumber ??
        SqlSyntax.setField(
            _fPayeeMobileNumber, 'PayeeMobileNumber', DbType.text);
  }

  static TableField? _fPayeeEmail;
  static TableField get PayeeEmail {
    return _fPayeeEmail = _fPayeeEmail ??
        SqlSyntax.setField(_fPayeeEmail, 'PayeeEmail', DbType.text);
  }

  static TableField? _fType;
  static TableField get Type {
    return _fType = _fType ?? SqlSyntax.setField(_fType, 'Type', DbType.text);
  }

  static TableField? _fRemarkDate;
  static TableField get RemarkDate {
    return _fRemarkDate = _fRemarkDate ??
        SqlSyntax.setField(_fRemarkDate, 'RemarkDate', DbType.text);
  }
}
// endregion EmoTableFields

//region EmoTableManager
class EmoTableManager extends SqfEntityProvider {
  EmoTableManager()
      : super(EmoFormModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'emoTable';
  static const List<String> _primaryKeyList = ['emoId'];
  static const String _whereStr = 'emoId=?';
}

//endregion EmoTableManager
class EmoFormModelSequenceManager extends SqfEntityProvider {
  EmoFormModelSequenceManager() : super(EmoFormModel());
}
// END OF ENTITIES
