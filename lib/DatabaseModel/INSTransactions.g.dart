// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'INSTransactions.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:DAILY_INDEXING_REPORT.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// DAILY_INDEXING_REPORT TABLE
class TableDAILY_INDEXING_REPORT extends SqfEntityTableBase {
  TableDAILY_INDEXING_REPORT() {
    // declare properties of EntityTable
    tableName = 'DAILY_INDEXING_REPORT';
    primaryKeyName = 'RECEIPT_NUM';
    primaryKeyType = PrimaryKeyType.text;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('TRAN_DATE', DbType.text),
      SqfEntityFieldBase('POLICY_NO', DbType.text),
      SqfEntityFieldBase('PROPOSAL_NUM', DbType.text),
      SqfEntityFieldBase('R_CRE_TIME', DbType.text),
      SqfEntityFieldBase('CREATED_DATE', DbType.text),
      SqfEntityFieldBase('POLICY_TYPE', DbType.text, isNotNull: true),
      SqfEntityFieldBase('OPERATOR_ID', DbType.text, isNotNull: true),
      SqfEntityFieldBase('REQ_TYPE', DbType.text, isNotNull: true),
      SqfEntityFieldBase('FUTURE_USE_1', DbType.text),
      SqfEntityFieldBase('FUTURE_USE_2', DbType.text),
      SqfEntityFieldBase('FUTURE_USE_3', DbType.text),
      SqfEntityFieldBase('FUTURE_USE_4', DbType.text),
      SqfEntityFieldBase('FUTURE_USE_5', DbType.text),
      SqfEntityFieldBase('FUTURE_USE_6', DbType.text),
      SqfEntityFieldBase('FUTURE_USE_7', DbType.text),
      SqfEntityFieldBase('GSTN_ID', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableDAILY_INDEXING_REPORT();
  }
}

// DAY_INDEXING_REPORT TABLE
class TableDAY_INDEXING_REPORT extends SqfEntityTableBase {
  TableDAY_INDEXING_REPORT() {
    // declare properties of EntityTable
    tableName = 'DAY_INDEXING_REPORT';
    primaryKeyName = 'RECEIPT_NO';
    primaryKeyType = PrimaryKeyType.text;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('POLICY_NO', DbType.text),
      SqfEntityFieldBase('PROPOSAL_NUM', DbType.text),
      SqfEntityFieldBase('R_CRE_TIME', DbType.text),
      SqfEntityFieldBase('POLICY_TYPE', DbType.text, isNotNull: true),
      SqfEntityFieldBase('TRAN_TYPE', DbType.text, isNotNull: true),
      SqfEntityFieldBase('OPERATOR_ID', DbType.text, isNotNull: true),
      SqfEntityFieldBase('AMOUNT', DbType.text, isNotNull: true),
      SqfEntityFieldBase('CREATED_DATE', DbType.text),
      SqfEntityFieldBase('FUTURE_USE_1', DbType.text),
      SqfEntityFieldBase('FUTURE_USE_2', DbType.text),
      SqfEntityFieldBase('FUTURE_USE_3', DbType.text),
      SqfEntityFieldBase('FUTURE_USE_4', DbType.text),
      SqfEntityFieldBase('FUTURE_USE_5', DbType.text),
      SqfEntityFieldBase('FUTURE_USE_6', DbType.text),
      SqfEntityFieldBase('FUTURE_USE_7', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableDAY_INDEXING_REPORT();
  }
}

// DAY_TRANSACTION_REPORT TABLE
class TableDAY_TRANSACTION_REPORT extends SqfEntityTableBase {
  TableDAY_TRANSACTION_REPORT() {
    // declare properties of EntityTable
    tableName = 'DAY_TRANSACTION_REPORT';
    primaryKeyName = 'RECEIPT_NO';
    primaryKeyType = PrimaryKeyType.text;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('STATUS', DbType.text),
      SqfEntityFieldBase('TRAN_ID', DbType.text),
      SqfEntityFieldBase('FROM_DATE', DbType.text),
      SqfEntityFieldBase('TO_DATE', DbType.text),
      SqfEntityFieldBase('TRAN_PAYMENT_TYPE', DbType.text),
      SqfEntityFieldBase('POLICY_NO', DbType.text),
      SqfEntityFieldBase('PROPOSAL_NUM', DbType.text),
      SqfEntityFieldBase('R_CRE_TIME', DbType.text),
      SqfEntityFieldBase('POLICY_TYPE', DbType.text),
      SqfEntityFieldBase('TRAN_TYPE', DbType.text),
      SqfEntityFieldBase('TRAN_DATE', DbType.text),
      SqfEntityFieldBase('OPERATOR_ID', DbType.text),
      SqfEntityFieldBase('AMOUNT', DbType.text),
      SqfEntityFieldBase('INTIAL_AMOUNT', DbType.text),
      SqfEntityFieldBase('RENEWAL_AMOUNT', DbType.text),
      SqfEntityFieldBase('CREATED_DATE', DbType.text),
      SqfEntityFieldBase('I_CGST', DbType.text),
      SqfEntityFieldBase('I_SGST', DbType.text),
      SqfEntityFieldBase('I_UGST', DbType.text),
      SqfEntityFieldBase('R_CGST', DbType.text),
      SqfEntityFieldBase('R_SGST', DbType.text),
      SqfEntityFieldBase('R_UGST', DbType.text),
      SqfEntityFieldBase('REBATE', DbType.text),
      SqfEntityFieldBase('BAL_AMT', DbType.text),
      SqfEntityFieldBase('PAYMENT_MODE', DbType.text),
      SqfEntityFieldBase('CGST', DbType.text),
      SqfEntityFieldBase('SGST', DbType.text),
      SqfEntityFieldBase('UGST', DbType.text),
      SqfEntityFieldBase('TOTAL_GST', DbType.text),
      SqfEntityFieldBase('GSTN_ID', DbType.text),
      SqfEntityFieldBase('PAYMENT_CATEGORY', DbType.text),
      SqfEntityFieldBase('PREM_AMNT', DbType.text),
      SqfEntityFieldBase('DEFAULT_FEE', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableDAY_TRANSACTION_REPORT();
  }
}

// Ins_transaction TABLE
class TableIns_transaction extends SqfEntityTableBase {
  TableIns_transaction() {
    // declare properties of EntityTable
    tableName = 'ins_transactions';
    primaryKeyName = 'SNo';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('policyNumber', DbType.text),
      SqfEntityFieldBase('tranType', DbType.text),
      SqfEntityFieldBase('policyType', DbType.text),
      SqfEntityFieldBase('amount', DbType.text),
      SqfEntityFieldBase('tranDate', DbType.text),
      SqfEntityFieldBase('tranTime', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableIns_transaction();
  }
}

// OfficeDetail TABLE
class TableOfficeDetail extends SqfEntityTableBase {
  TableOfficeDetail() {
    // declare properties of EntityTable
    tableName = 'officeDetails';
    primaryKeyName = 'SNo';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('BOOFFICETYPE', DbType.text),
      SqfEntityFieldBase('dateTime', DbType.text),
      SqfEntityFieldBase('BOOFFICECODE', DbType.text),
      SqfEntityFieldBase('COOFFICETYPE', DbType.text),
      SqfEntityFieldBase('HOOFFICEADDRESS', DbType.text),
      SqfEntityFieldBase('HOOFFICECODE', DbType.text),
      SqfEntityFieldBase('HOOFFICETYPE', DbType.text),
      SqfEntityFieldBase('BOOFFICEADDRESS', DbType.text),
      SqfEntityFieldBase('OFFICECODE_6', DbType.text),
      SqfEntityFieldBase('OFFICECODE_4', DbType.text),
      SqfEntityFieldBase('OFFICECODE_5', DbType.text),
      SqfEntityFieldBase('OFFICECODE_2', DbType.text),
      SqfEntityFieldBase('OFFICECODE_3', DbType.text),
      SqfEntityFieldBase('OFFICECODE_1', DbType.text),
      SqfEntityFieldBase('POCode', DbType.text),
      SqfEntityFieldBase('OFFICETYPE_3', DbType.text),
      SqfEntityFieldBase('OFFICEADDRESS_4', DbType.text),
      SqfEntityFieldBase('OFFICEADDRESS_3', DbType.text),
      SqfEntityFieldBase('OFFICETYPE_4', DbType.text),
      SqfEntityFieldBase('OFFICETYPE_1', DbType.text),
      SqfEntityFieldBase('OFFICEADDRESS_6', DbType.text),
      SqfEntityFieldBase('OFFICETYPE_2', DbType.text),
      SqfEntityFieldBase('OFFICEADDRESS_5', DbType.text),
      SqfEntityFieldBase('COOFFICEADDRESS', DbType.text),
      SqfEntityFieldBase('OFFICEADDRESS_2', DbType.text),
      SqfEntityFieldBase('OFFICETYPE_5', DbType.text),
      SqfEntityFieldBase('COOFFICECODE', DbType.text),
      SqfEntityFieldBase('OFFICEADDRESS_1', DbType.text),
      SqfEntityFieldBase('OFFICETYPE_6', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableOfficeDetail();
  }
}

// INS_ERROR_CODES TABLE
class TableINS_ERROR_CODES extends SqfEntityTableBase {
  TableINS_ERROR_CODES() {
    // declare properties of EntityTable
    tableName = 'INS_ERROR_CODES';
    primaryKeyName = 'SNo';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('Error_code', DbType.text),
      SqfEntityFieldBase('Error_message', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableINS_ERROR_CODES();
  }
}

// INS_CIRCLE_CODES TABLE
class TableINS_CIRCLE_CODES extends SqfEntityTableBase {
  TableINS_CIRCLE_CODES() {
    // declare properties of EntityTable
    tableName = 'INS_CIRCLE_CODES';
    primaryKeyName = 'SNo';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('Circle_code', DbType.text),
      SqfEntityFieldBase('CO_CODE', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableINS_CIRCLE_CODES();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class InsTran extends SqfEntityModelProvider {
  InsTran() {
    databaseName = tranModel.databaseName;
    password = tranModel.password;
    dbVersion = tranModel.dbVersion;
    preSaveAction = tranModel.preSaveAction;
    logFunction = tranModel.logFunction;
    databaseTables = [
      TableDAILY_INDEXING_REPORT.getInstance,
      TableDAY_INDEXING_REPORT.getInstance,
      TableDAY_TRANSACTION_REPORT.getInstance,
      TableIns_transaction.getInstance,
      TableOfficeDetail.getInstance,
      TableINS_ERROR_CODES.getInstance,
      TableINS_CIRCLE_CODES.getInstance,
    ];

    bundledDatabasePath = tranModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = tranModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region DAILY_INDEXING_REPORT
class DAILY_INDEXING_REPORT extends TableBase {
  DAILY_INDEXING_REPORT(
      {this.RECEIPT_NUM,
      this.TRAN_DATE,
      this.POLICY_NO,
      this.PROPOSAL_NUM,
      this.R_CRE_TIME,
      this.CREATED_DATE,
      this.POLICY_TYPE,
      this.OPERATOR_ID,
      this.REQ_TYPE,
      this.FUTURE_USE_1,
      this.FUTURE_USE_2,
      this.FUTURE_USE_3,
      this.FUTURE_USE_4,
      this.FUTURE_USE_5,
      this.FUTURE_USE_6,
      this.FUTURE_USE_7,
      this.GSTN_ID}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  DAILY_INDEXING_REPORT.withFields(
      this.RECEIPT_NUM,
      this.TRAN_DATE,
      this.POLICY_NO,
      this.PROPOSAL_NUM,
      this.R_CRE_TIME,
      this.CREATED_DATE,
      this.POLICY_TYPE,
      this.OPERATOR_ID,
      this.REQ_TYPE,
      this.FUTURE_USE_1,
      this.FUTURE_USE_2,
      this.FUTURE_USE_3,
      this.FUTURE_USE_4,
      this.FUTURE_USE_5,
      this.FUTURE_USE_6,
      this.FUTURE_USE_7,
      this.GSTN_ID) {
    _setDefaultValues();
  }
  DAILY_INDEXING_REPORT.withId(
      this.RECEIPT_NUM,
      this.TRAN_DATE,
      this.POLICY_NO,
      this.PROPOSAL_NUM,
      this.R_CRE_TIME,
      this.CREATED_DATE,
      this.POLICY_TYPE,
      this.OPERATOR_ID,
      this.REQ_TYPE,
      this.FUTURE_USE_1,
      this.FUTURE_USE_2,
      this.FUTURE_USE_3,
      this.FUTURE_USE_4,
      this.FUTURE_USE_5,
      this.FUTURE_USE_6,
      this.FUTURE_USE_7,
      this.GSTN_ID) {
    _setDefaultValues();
  }
  // fromMap v2.0
  DAILY_INDEXING_REPORT.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    RECEIPT_NUM = o['RECEIPT_NUM'].toString();
    if (o['TRAN_DATE'] != null) {
      TRAN_DATE = o['TRAN_DATE'].toString();
    }
    if (o['POLICY_NO'] != null) {
      POLICY_NO = o['POLICY_NO'].toString();
    }
    if (o['PROPOSAL_NUM'] != null) {
      PROPOSAL_NUM = o['PROPOSAL_NUM'].toString();
    }
    if (o['R_CRE_TIME'] != null) {
      R_CRE_TIME = o['R_CRE_TIME'].toString();
    }
    if (o['CREATED_DATE'] != null) {
      CREATED_DATE = o['CREATED_DATE'].toString();
    }
    if (o['POLICY_TYPE'] != null) {
      POLICY_TYPE = o['POLICY_TYPE'].toString();
    }
    if (o['OPERATOR_ID'] != null) {
      OPERATOR_ID = o['OPERATOR_ID'].toString();
    }
    if (o['REQ_TYPE'] != null) {
      REQ_TYPE = o['REQ_TYPE'].toString();
    }
    if (o['FUTURE_USE_1'] != null) {
      FUTURE_USE_1 = o['FUTURE_USE_1'].toString();
    }
    if (o['FUTURE_USE_2'] != null) {
      FUTURE_USE_2 = o['FUTURE_USE_2'].toString();
    }
    if (o['FUTURE_USE_3'] != null) {
      FUTURE_USE_3 = o['FUTURE_USE_3'].toString();
    }
    if (o['FUTURE_USE_4'] != null) {
      FUTURE_USE_4 = o['FUTURE_USE_4'].toString();
    }
    if (o['FUTURE_USE_5'] != null) {
      FUTURE_USE_5 = o['FUTURE_USE_5'].toString();
    }
    if (o['FUTURE_USE_6'] != null) {
      FUTURE_USE_6 = o['FUTURE_USE_6'].toString();
    }
    if (o['FUTURE_USE_7'] != null) {
      FUTURE_USE_7 = o['FUTURE_USE_7'].toString();
    }
    if (o['GSTN_ID'] != null) {
      GSTN_ID = o['GSTN_ID'].toString();
    }

    isSaved = true;
  }
  // FIELDS (DAILY_INDEXING_REPORT)
  String? RECEIPT_NUM;
  String? TRAN_DATE;
  String? POLICY_NO;
  String? PROPOSAL_NUM;
  String? R_CRE_TIME;
  String? CREATED_DATE;
  String? POLICY_TYPE;
  String? OPERATOR_ID;
  String? REQ_TYPE;
  String? FUTURE_USE_1;
  String? FUTURE_USE_2;
  String? FUTURE_USE_3;
  String? FUTURE_USE_4;
  String? FUTURE_USE_5;
  String? FUTURE_USE_6;
  String? FUTURE_USE_7;
  String? GSTN_ID;
  bool? isSaved;
  // end FIELDS (DAILY_INDEXING_REPORT)

  static const bool _softDeleteActivated = false;
  DAILY_INDEXING_REPORTManager? __mnDAILY_INDEXING_REPORT;

  DAILY_INDEXING_REPORTManager get _mnDAILY_INDEXING_REPORT {
    return __mnDAILY_INDEXING_REPORT =
        __mnDAILY_INDEXING_REPORT ?? DAILY_INDEXING_REPORTManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['RECEIPT_NUM'] = RECEIPT_NUM;
    if (TRAN_DATE != null || !forView) {
      map['TRAN_DATE'] = TRAN_DATE;
    }
    if (POLICY_NO != null || !forView) {
      map['POLICY_NO'] = POLICY_NO;
    }
    if (PROPOSAL_NUM != null || !forView) {
      map['PROPOSAL_NUM'] = PROPOSAL_NUM;
    }
    if (R_CRE_TIME != null || !forView) {
      map['R_CRE_TIME'] = R_CRE_TIME;
    }
    if (CREATED_DATE != null || !forView) {
      map['CREATED_DATE'] = CREATED_DATE;
    }
    if (POLICY_TYPE != null || !forView) {
      map['POLICY_TYPE'] = POLICY_TYPE;
    }
    if (OPERATOR_ID != null || !forView) {
      map['OPERATOR_ID'] = OPERATOR_ID;
    }
    if (REQ_TYPE != null || !forView) {
      map['REQ_TYPE'] = REQ_TYPE;
    }
    if (FUTURE_USE_1 != null || !forView) {
      map['FUTURE_USE_1'] = FUTURE_USE_1;
    }
    if (FUTURE_USE_2 != null || !forView) {
      map['FUTURE_USE_2'] = FUTURE_USE_2;
    }
    if (FUTURE_USE_3 != null || !forView) {
      map['FUTURE_USE_3'] = FUTURE_USE_3;
    }
    if (FUTURE_USE_4 != null || !forView) {
      map['FUTURE_USE_4'] = FUTURE_USE_4;
    }
    if (FUTURE_USE_5 != null || !forView) {
      map['FUTURE_USE_5'] = FUTURE_USE_5;
    }
    if (FUTURE_USE_6 != null || !forView) {
      map['FUTURE_USE_6'] = FUTURE_USE_6;
    }
    if (FUTURE_USE_7 != null || !forView) {
      map['FUTURE_USE_7'] = FUTURE_USE_7;
    }
    if (GSTN_ID != null || !forView) {
      map['GSTN_ID'] = GSTN_ID;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['RECEIPT_NUM'] = RECEIPT_NUM;
    if (TRAN_DATE != null || !forView) {
      map['TRAN_DATE'] = TRAN_DATE;
    }
    if (POLICY_NO != null || !forView) {
      map['POLICY_NO'] = POLICY_NO;
    }
    if (PROPOSAL_NUM != null || !forView) {
      map['PROPOSAL_NUM'] = PROPOSAL_NUM;
    }
    if (R_CRE_TIME != null || !forView) {
      map['R_CRE_TIME'] = R_CRE_TIME;
    }
    if (CREATED_DATE != null || !forView) {
      map['CREATED_DATE'] = CREATED_DATE;
    }
    if (POLICY_TYPE != null || !forView) {
      map['POLICY_TYPE'] = POLICY_TYPE;
    }
    if (OPERATOR_ID != null || !forView) {
      map['OPERATOR_ID'] = OPERATOR_ID;
    }
    if (REQ_TYPE != null || !forView) {
      map['REQ_TYPE'] = REQ_TYPE;
    }
    if (FUTURE_USE_1 != null || !forView) {
      map['FUTURE_USE_1'] = FUTURE_USE_1;
    }
    if (FUTURE_USE_2 != null || !forView) {
      map['FUTURE_USE_2'] = FUTURE_USE_2;
    }
    if (FUTURE_USE_3 != null || !forView) {
      map['FUTURE_USE_3'] = FUTURE_USE_3;
    }
    if (FUTURE_USE_4 != null || !forView) {
      map['FUTURE_USE_4'] = FUTURE_USE_4;
    }
    if (FUTURE_USE_5 != null || !forView) {
      map['FUTURE_USE_5'] = FUTURE_USE_5;
    }
    if (FUTURE_USE_6 != null || !forView) {
      map['FUTURE_USE_6'] = FUTURE_USE_6;
    }
    if (FUTURE_USE_7 != null || !forView) {
      map['FUTURE_USE_7'] = FUTURE_USE_7;
    }
    if (GSTN_ID != null || !forView) {
      map['GSTN_ID'] = GSTN_ID;
    }

    return map;
  }

  /// This method returns Json String [DAILY_INDEXING_REPORT]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [DAILY_INDEXING_REPORT]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      RECEIPT_NUM,
      TRAN_DATE,
      POLICY_NO,
      PROPOSAL_NUM,
      R_CRE_TIME,
      CREATED_DATE,
      POLICY_TYPE,
      OPERATOR_ID,
      REQ_TYPE,
      FUTURE_USE_1,
      FUTURE_USE_2,
      FUTURE_USE_3,
      FUTURE_USE_4,
      FUTURE_USE_5,
      FUTURE_USE_6,
      FUTURE_USE_7,
      GSTN_ID
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      RECEIPT_NUM,
      TRAN_DATE,
      POLICY_NO,
      PROPOSAL_NUM,
      R_CRE_TIME,
      CREATED_DATE,
      POLICY_TYPE,
      OPERATOR_ID,
      REQ_TYPE,
      FUTURE_USE_1,
      FUTURE_USE_2,
      FUTURE_USE_3,
      FUTURE_USE_4,
      FUTURE_USE_5,
      FUTURE_USE_6,
      FUTURE_USE_7,
      GSTN_ID
    ];
  }

  static Future<List<DAILY_INDEXING_REPORT>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR DAILY_INDEXING_REPORT.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<DAILY_INDEXING_REPORT>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <DAILY_INDEXING_REPORT>[];
    try {
      objList = list
          .map((daily_indexing_report) => DAILY_INDEXING_REPORT
              .fromMap(daily_indexing_report as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR DAILY_INDEXING_REPORT.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<DAILY_INDEXING_REPORT>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<DAILY_INDEXING_REPORT> objList = <DAILY_INDEXING_REPORT>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = DAILY_INDEXING_REPORT.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns DAILY_INDEXING_REPORT by ID if exist, otherwise returns null
  /// Primary Keys: String? RECEIPT_NUM
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [DAILY_INDEXING_REPORT] if exist, otherwise returns null
  Future<DAILY_INDEXING_REPORT?> getById(String? RECEIPT_NUM,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (RECEIPT_NUM == null) {
      return null;
    }
    DAILY_INDEXING_REPORT? obj;
    final data = await _mnDAILY_INDEXING_REPORT.getById([RECEIPT_NUM]);
    if (data.length != 0) {
      obj = DAILY_INDEXING_REPORT.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (DAILY_INDEXING_REPORT) object. If the Primary Key (RECEIPT_NUM) field is null, returns Error.
  /// INSERTS (If not exist) OR REPLACES (If exist) data while Primary Key is not null.
  /// Call the saveAs() method if you do not want to save it when there is another row with the same RECEIPT_NUM
  /// <returns>Returns BoolResult
  @override
  Future<BoolResult> save({bool ignoreBatch = true}) async {
    final result = BoolResult(success: false);
    try {
      await _mnDAILY_INDEXING_REPORT.rawInsert(
          'INSERT ${isSaved! ? 'OR REPLACE' : ''} INTO DAILY_INDEXING_REPORT (RECEIPT_NUM, TRAN_DATE, POLICY_NO, PROPOSAL_NUM, R_CRE_TIME, CREATED_DATE, POLICY_TYPE, OPERATOR_ID, REQ_TYPE, FUTURE_USE_1, FUTURE_USE_2, FUTURE_USE_3, FUTURE_USE_4, FUTURE_USE_5, FUTURE_USE_6, FUTURE_USE_7, GSTN_ID)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          toArgsWithIds(),
          ignoreBatch);
      result.success = true;
      isSaved = true;
    } catch (e) {
      result.errorMessage = e.toString();
    }

    saveResult = result;
    return result;
  }

  /// saveAll method saves the sent List<DAILY_INDEXING_REPORT> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<DAILY_INDEXING_REPORT> daily_indexing_reports,
      {bool? exclusive,
      bool? noResult,
      bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await InsTran().batchStart();
    for (final obj in daily_indexing_reports) {
      await obj.save();
    }
    if (!isStartedBatch) {
      result = await InsTran().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns 1
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnDAILY_INDEXING_REPORT.rawInsert(
          'INSERT OR REPLACE INTO DAILY_INDEXING_REPORT (RECEIPT_NUM, TRAN_DATE, POLICY_NO, PROPOSAL_NUM, R_CRE_TIME, CREATED_DATE, POLICY_TYPE, OPERATOR_ID, REQ_TYPE, FUTURE_USE_1, FUTURE_USE_2, FUTURE_USE_3, FUTURE_USE_4, FUTURE_USE_5, FUTURE_USE_6, FUTURE_USE_7, GSTN_ID)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            RECEIPT_NUM,
            TRAN_DATE,
            POLICY_NO,
            PROPOSAL_NUM,
            R_CRE_TIME,
            CREATED_DATE,
            POLICY_TYPE,
            OPERATOR_ID,
            REQ_TYPE,
            FUTURE_USE_1,
            FUTURE_USE_2,
            FUTURE_USE_3,
            FUTURE_USE_4,
            FUTURE_USE_5,
            FUTURE_USE_6,
            FUTURE_USE_7,
            GSTN_ID
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage:
                'DAILY_INDEXING_REPORT RECEIPT_NUM=$RECEIPT_NUM updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage:
                'DAILY_INDEXING_REPORT RECEIPT_NUM=$RECEIPT_NUM did not update');
      }
      return 1;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage:
              'DAILY_INDEXING_REPORT Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns 1
  @override
  Future<int?> upsert1({bool ignoreBatch = true}) async {
    try {
      final result = await _mnDAILY_INDEXING_REPORT.rawInsert(
          'INSERT OR IGNORE INTO DAILY_INDEXING_REPORT (RECEIPT_NUM, TRAN_DATE, POLICY_NO, PROPOSAL_NUM, R_CRE_TIME, CREATED_DATE, POLICY_TYPE, OPERATOR_ID, REQ_TYPE, FUTURE_USE_1, FUTURE_USE_2, FUTURE_USE_3, FUTURE_USE_4, FUTURE_USE_5, FUTURE_USE_6, FUTURE_USE_7, GSTN_ID)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            RECEIPT_NUM,
            TRAN_DATE,
            POLICY_NO,
            PROPOSAL_NUM,
            R_CRE_TIME,
            CREATED_DATE,
            POLICY_TYPE,
            OPERATOR_ID,
            REQ_TYPE,
            FUTURE_USE_1,
            FUTURE_USE_2,
            FUTURE_USE_3,
            FUTURE_USE_4,
            FUTURE_USE_5,
            FUTURE_USE_6,
            FUTURE_USE_7,
            GSTN_ID
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage:
                'DAILY_INDEXING_REPORT RECEIPT_NUM=$RECEIPT_NUM updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage:
                'DAILY_INDEXING_REPORT RECEIPT_NUM=$RECEIPT_NUM did not update');
      }
      return 1;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage:
              'DAILY_INDEXING_REPORT Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Deletes DAILY_INDEXING_REPORT

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint(
        'SQFENTITIY: delete DAILY_INDEXING_REPORT invoked (RECEIPT_NUM=$RECEIPT_NUM)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnDAILY_INDEXING_REPORT.delete(QueryParams(
          whereString: 'RECEIPT_NUM=?', whereArguments: [RECEIPT_NUM]));
    } else {
      return _mnDAILY_INDEXING_REPORT.updateBatch(
          QueryParams(
              whereString: 'RECEIPT_NUM=?', whereArguments: [RECEIPT_NUM]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [DAILY_INDEXING_REPORT] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  DAILY_INDEXING_REPORTFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return DAILY_INDEXING_REPORTFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  DAILY_INDEXING_REPORTFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return DAILY_INDEXING_REPORTFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      RECEIPT_NUM = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion daily_indexing_report

// region DAILY_INDEXING_REPORTField
class DAILY_INDEXING_REPORTField extends FilterBase {
  DAILY_INDEXING_REPORTField(
      DAILY_INDEXING_REPORTFilterBuilder daily_indexing_reportFB)
      : super(daily_indexing_reportFB);

  @override
  DAILY_INDEXING_REPORTFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as DAILY_INDEXING_REPORTFilterBuilder;
  }

  @override
  DAILY_INDEXING_REPORTFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as DAILY_INDEXING_REPORTFilterBuilder;
  }

  @override
  DAILY_INDEXING_REPORTFilterBuilder isNull() {
    return super.isNull() as DAILY_INDEXING_REPORTFilterBuilder;
  }

  @override
  DAILY_INDEXING_REPORTFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as DAILY_INDEXING_REPORTFilterBuilder;
  }

  @override
  DAILY_INDEXING_REPORTFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as DAILY_INDEXING_REPORTFilterBuilder;
  }

  @override
  DAILY_INDEXING_REPORTFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as DAILY_INDEXING_REPORTFilterBuilder;
  }

  @override
  DAILY_INDEXING_REPORTFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as DAILY_INDEXING_REPORTFilterBuilder;
  }

  @override
  DAILY_INDEXING_REPORTFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as DAILY_INDEXING_REPORTFilterBuilder;
  }

  @override
  DAILY_INDEXING_REPORTFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as DAILY_INDEXING_REPORTFilterBuilder;
  }

  @override
  DAILY_INDEXING_REPORTFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue)
        as DAILY_INDEXING_REPORTFilterBuilder;
  }

  @override
  DAILY_INDEXING_REPORTFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as DAILY_INDEXING_REPORTFilterBuilder;
  }

  @override
  DAILY_INDEXING_REPORTFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as DAILY_INDEXING_REPORTFilterBuilder;
  }

  @override
  DAILY_INDEXING_REPORTField get not {
    return super.not as DAILY_INDEXING_REPORTField;
  }
}
// endregion DAILY_INDEXING_REPORTField

// region DAILY_INDEXING_REPORTFilterBuilder
class DAILY_INDEXING_REPORTFilterBuilder extends ConjunctionBase {
  DAILY_INDEXING_REPORTFilterBuilder(
      DAILY_INDEXING_REPORT obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnDAILY_INDEXING_REPORT = obj._mnDAILY_INDEXING_REPORT;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  DAILY_INDEXING_REPORTManager? _mnDAILY_INDEXING_REPORT;

  /// put the sql keyword 'AND'
  @override
  DAILY_INDEXING_REPORTFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  DAILY_INDEXING_REPORTFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  DAILY_INDEXING_REPORTFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  DAILY_INDEXING_REPORTFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  DAILY_INDEXING_REPORTFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  DAILY_INDEXING_REPORTFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  DAILY_INDEXING_REPORTFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  DAILY_INDEXING_REPORTFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  DAILY_INDEXING_REPORTFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  DAILY_INDEXING_REPORTFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  DAILY_INDEXING_REPORTFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  DAILY_INDEXING_REPORTField _setField(
      DAILY_INDEXING_REPORTField? field, String colName, DbType dbtype) {
    return DAILY_INDEXING_REPORTField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  DAILY_INDEXING_REPORTField? _RECEIPT_NUM;
  DAILY_INDEXING_REPORTField get RECEIPT_NUM {
    return _RECEIPT_NUM =
        _setField(_RECEIPT_NUM, 'RECEIPT_NUM', DbType.integer);
  }

  DAILY_INDEXING_REPORTField? _TRAN_DATE;
  DAILY_INDEXING_REPORTField get TRAN_DATE {
    return _TRAN_DATE = _setField(_TRAN_DATE, 'TRAN_DATE', DbType.text);
  }

  DAILY_INDEXING_REPORTField? _POLICY_NO;
  DAILY_INDEXING_REPORTField get POLICY_NO {
    return _POLICY_NO = _setField(_POLICY_NO, 'POLICY_NO', DbType.text);
  }

  DAILY_INDEXING_REPORTField? _PROPOSAL_NUM;
  DAILY_INDEXING_REPORTField get PROPOSAL_NUM {
    return _PROPOSAL_NUM =
        _setField(_PROPOSAL_NUM, 'PROPOSAL_NUM', DbType.text);
  }

  DAILY_INDEXING_REPORTField? _R_CRE_TIME;
  DAILY_INDEXING_REPORTField get R_CRE_TIME {
    return _R_CRE_TIME = _setField(_R_CRE_TIME, 'R_CRE_TIME', DbType.text);
  }

  DAILY_INDEXING_REPORTField? _CREATED_DATE;
  DAILY_INDEXING_REPORTField get CREATED_DATE {
    return _CREATED_DATE =
        _setField(_CREATED_DATE, 'CREATED_DATE', DbType.text);
  }

  DAILY_INDEXING_REPORTField? _POLICY_TYPE;
  DAILY_INDEXING_REPORTField get POLICY_TYPE {
    return _POLICY_TYPE = _setField(_POLICY_TYPE, 'POLICY_TYPE', DbType.text);
  }

  DAILY_INDEXING_REPORTField? _OPERATOR_ID;
  DAILY_INDEXING_REPORTField get OPERATOR_ID {
    return _OPERATOR_ID = _setField(_OPERATOR_ID, 'OPERATOR_ID', DbType.text);
  }

  DAILY_INDEXING_REPORTField? _REQ_TYPE;
  DAILY_INDEXING_REPORTField get REQ_TYPE {
    return _REQ_TYPE = _setField(_REQ_TYPE, 'REQ_TYPE', DbType.text);
  }

  DAILY_INDEXING_REPORTField? _FUTURE_USE_1;
  DAILY_INDEXING_REPORTField get FUTURE_USE_1 {
    return _FUTURE_USE_1 =
        _setField(_FUTURE_USE_1, 'FUTURE_USE_1', DbType.text);
  }

  DAILY_INDEXING_REPORTField? _FUTURE_USE_2;
  DAILY_INDEXING_REPORTField get FUTURE_USE_2 {
    return _FUTURE_USE_2 =
        _setField(_FUTURE_USE_2, 'FUTURE_USE_2', DbType.text);
  }

  DAILY_INDEXING_REPORTField? _FUTURE_USE_3;
  DAILY_INDEXING_REPORTField get FUTURE_USE_3 {
    return _FUTURE_USE_3 =
        _setField(_FUTURE_USE_3, 'FUTURE_USE_3', DbType.text);
  }

  DAILY_INDEXING_REPORTField? _FUTURE_USE_4;
  DAILY_INDEXING_REPORTField get FUTURE_USE_4 {
    return _FUTURE_USE_4 =
        _setField(_FUTURE_USE_4, 'FUTURE_USE_4', DbType.text);
  }

  DAILY_INDEXING_REPORTField? _FUTURE_USE_5;
  DAILY_INDEXING_REPORTField get FUTURE_USE_5 {
    return _FUTURE_USE_5 =
        _setField(_FUTURE_USE_5, 'FUTURE_USE_5', DbType.text);
  }

  DAILY_INDEXING_REPORTField? _FUTURE_USE_6;
  DAILY_INDEXING_REPORTField get FUTURE_USE_6 {
    return _FUTURE_USE_6 =
        _setField(_FUTURE_USE_6, 'FUTURE_USE_6', DbType.text);
  }

  DAILY_INDEXING_REPORTField? _FUTURE_USE_7;
  DAILY_INDEXING_REPORTField get FUTURE_USE_7 {
    return _FUTURE_USE_7 =
        _setField(_FUTURE_USE_7, 'FUTURE_USE_7', DbType.text);
  }

  DAILY_INDEXING_REPORTField? _GSTN_ID;
  DAILY_INDEXING_REPORTField get GSTN_ID {
    return _GSTN_ID = _setField(_GSTN_ID, 'GSTN_ID', DbType.text);
  }

  /// Deletes List<DAILY_INDEXING_REPORT> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnDAILY_INDEXING_REPORT!
          .updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnDAILY_INDEXING_REPORT!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'RECEIPT_NUM IN (SELECT RECEIPT_NUM from DAILY_INDEXING_REPORT ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnDAILY_INDEXING_REPORT!.updateBatch(qparams, values);
  }

  /// This method always returns [DAILY_INDEXING_REPORT] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> DAILY_INDEXING_REPORT?
  @override
  Future<DAILY_INDEXING_REPORT?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnDAILY_INDEXING_REPORT!.toList(qparams);
    final data = await objFuture;
    DAILY_INDEXING_REPORT? obj;
    if (data.isNotEmpty) {
      obj = DAILY_INDEXING_REPORT.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [DAILY_INDEXING_REPORT]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> DAILY_INDEXING_REPORT?
  @override
  Future<DAILY_INDEXING_REPORT> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        DAILY_INDEXING_REPORT();
  }

  /// This method returns int. [DAILY_INDEXING_REPORT]
  /// <returns>int
  @override
  Future<int> toCount(
      [VoidCallback Function(int c)? daily_indexing_reportCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final daily_indexing_reportsFuture =
        await _mnDAILY_INDEXING_REPORT!.toList(qparams);
    final int count = daily_indexing_reportsFuture[0]['CNT'] as int;
    if (daily_indexing_reportCount != null) {
      daily_indexing_reportCount(count);
    }
    return count;
  }

  /// This method returns List<DAILY_INDEXING_REPORT> [DAILY_INDEXING_REPORT]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<DAILY_INDEXING_REPORT>
  @override
  Future<List<DAILY_INDEXING_REPORT>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<DAILY_INDEXING_REPORT> daily_indexing_reportsData =
        await DAILY_INDEXING_REPORT.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return daily_indexing_reportsData;
  }

  /// This method returns Json String [DAILY_INDEXING_REPORT]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [DAILY_INDEXING_REPORT]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [DAILY_INDEXING_REPORT]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnDAILY_INDEXING_REPORT!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [DAILY_INDEXING_REPORT]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `RECEIPT_NUM` FROM DAILY_INDEXING_REPORT WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<String>.
  /// <returns>List<String>
  @override
  Future<List<String>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<String> RECEIPT_NUMData = <String>[];
    qparams.selectColumns = ['RECEIPT_NUM'];
    final RECEIPT_NUMFuture = await _mnDAILY_INDEXING_REPORT!.toList(qparams);

    final int count = RECEIPT_NUMFuture.length;
    for (int i = 0; i < count; i++) {
      RECEIPT_NUMData.add(RECEIPT_NUMFuture[i]['RECEIPT_NUM'] as String);
    }
    return RECEIPT_NUMData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [DAILY_INDEXING_REPORT]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnDAILY_INDEXING_REPORT!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await DAILY_INDEXING_REPORT.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnDAILY_INDEXING_REPORT!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion DAILY_INDEXING_REPORTFilterBuilder

// region DAILY_INDEXING_REPORTFields
class DAILY_INDEXING_REPORTFields {
  static TableField? _fRECEIPT_NUM;
  static TableField get RECEIPT_NUM {
    return _fRECEIPT_NUM = _fRECEIPT_NUM ??
        SqlSyntax.setField(_fRECEIPT_NUM, 'receipt_num', DbType.integer);
  }

  static TableField? _fTRAN_DATE;
  static TableField get TRAN_DATE {
    return _fTRAN_DATE = _fTRAN_DATE ??
        SqlSyntax.setField(_fTRAN_DATE, 'TRAN_DATE', DbType.text);
  }

  static TableField? _fPOLICY_NO;
  static TableField get POLICY_NO {
    return _fPOLICY_NO = _fPOLICY_NO ??
        SqlSyntax.setField(_fPOLICY_NO, 'POLICY_NO', DbType.text);
  }

  static TableField? _fPROPOSAL_NUM;
  static TableField get PROPOSAL_NUM {
    return _fPROPOSAL_NUM = _fPROPOSAL_NUM ??
        SqlSyntax.setField(_fPROPOSAL_NUM, 'PROPOSAL_NUM', DbType.text);
  }

  static TableField? _fR_CRE_TIME;
  static TableField get R_CRE_TIME {
    return _fR_CRE_TIME = _fR_CRE_TIME ??
        SqlSyntax.setField(_fR_CRE_TIME, 'R_CRE_TIME', DbType.text);
  }

  static TableField? _fCREATED_DATE;
  static TableField get CREATED_DATE {
    return _fCREATED_DATE = _fCREATED_DATE ??
        SqlSyntax.setField(_fCREATED_DATE, 'CREATED_DATE', DbType.text);
  }

  static TableField? _fPOLICY_TYPE;
  static TableField get POLICY_TYPE {
    return _fPOLICY_TYPE = _fPOLICY_TYPE ??
        SqlSyntax.setField(_fPOLICY_TYPE, 'POLICY_TYPE', DbType.text);
  }

  static TableField? _fOPERATOR_ID;
  static TableField get OPERATOR_ID {
    return _fOPERATOR_ID = _fOPERATOR_ID ??
        SqlSyntax.setField(_fOPERATOR_ID, 'OPERATOR_ID', DbType.text);
  }

  static TableField? _fREQ_TYPE;
  static TableField get REQ_TYPE {
    return _fREQ_TYPE =
        _fREQ_TYPE ?? SqlSyntax.setField(_fREQ_TYPE, 'REQ_TYPE', DbType.text);
  }

  static TableField? _fFUTURE_USE_1;
  static TableField get FUTURE_USE_1 {
    return _fFUTURE_USE_1 = _fFUTURE_USE_1 ??
        SqlSyntax.setField(_fFUTURE_USE_1, 'FUTURE_USE_1', DbType.text);
  }

  static TableField? _fFUTURE_USE_2;
  static TableField get FUTURE_USE_2 {
    return _fFUTURE_USE_2 = _fFUTURE_USE_2 ??
        SqlSyntax.setField(_fFUTURE_USE_2, 'FUTURE_USE_2', DbType.text);
  }

  static TableField? _fFUTURE_USE_3;
  static TableField get FUTURE_USE_3 {
    return _fFUTURE_USE_3 = _fFUTURE_USE_3 ??
        SqlSyntax.setField(_fFUTURE_USE_3, 'FUTURE_USE_3', DbType.text);
  }

  static TableField? _fFUTURE_USE_4;
  static TableField get FUTURE_USE_4 {
    return _fFUTURE_USE_4 = _fFUTURE_USE_4 ??
        SqlSyntax.setField(_fFUTURE_USE_4, 'FUTURE_USE_4', DbType.text);
  }

  static TableField? _fFUTURE_USE_5;
  static TableField get FUTURE_USE_5 {
    return _fFUTURE_USE_5 = _fFUTURE_USE_5 ??
        SqlSyntax.setField(_fFUTURE_USE_5, 'FUTURE_USE_5', DbType.text);
  }

  static TableField? _fFUTURE_USE_6;
  static TableField get FUTURE_USE_6 {
    return _fFUTURE_USE_6 = _fFUTURE_USE_6 ??
        SqlSyntax.setField(_fFUTURE_USE_6, 'FUTURE_USE_6', DbType.text);
  }

  static TableField? _fFUTURE_USE_7;
  static TableField get FUTURE_USE_7 {
    return _fFUTURE_USE_7 = _fFUTURE_USE_7 ??
        SqlSyntax.setField(_fFUTURE_USE_7, 'FUTURE_USE_7', DbType.text);
  }

  static TableField? _fGSTN_ID;
  static TableField get GSTN_ID {
    return _fGSTN_ID =
        _fGSTN_ID ?? SqlSyntax.setField(_fGSTN_ID, 'GSTN_ID', DbType.text);
  }
}
// endregion DAILY_INDEXING_REPORTFields

//region DAILY_INDEXING_REPORTManager
class DAILY_INDEXING_REPORTManager extends SqfEntityProvider {
  DAILY_INDEXING_REPORTManager()
      : super(InsTran(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'DAILY_INDEXING_REPORT';
  static const List<String> _primaryKeyList = ['RECEIPT_NUM'];
  static const String _whereStr = 'RECEIPT_NUM=?';
}

//endregion DAILY_INDEXING_REPORTManager
// region DAY_INDEXING_REPORT
class DAY_INDEXING_REPORT extends TableBase {
  DAY_INDEXING_REPORT(
      {this.RECEIPT_NO,
      this.POLICY_NO,
      this.PROPOSAL_NUM,
      this.R_CRE_TIME,
      this.POLICY_TYPE,
      this.TRAN_TYPE,
      this.OPERATOR_ID,
      this.AMOUNT,
      this.CREATED_DATE,
      this.FUTURE_USE_1,
      this.FUTURE_USE_2,
      this.FUTURE_USE_3,
      this.FUTURE_USE_4,
      this.FUTURE_USE_5,
      this.FUTURE_USE_6,
      this.FUTURE_USE_7}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  DAY_INDEXING_REPORT.withFields(
      this.RECEIPT_NO,
      this.POLICY_NO,
      this.PROPOSAL_NUM,
      this.R_CRE_TIME,
      this.POLICY_TYPE,
      this.TRAN_TYPE,
      this.OPERATOR_ID,
      this.AMOUNT,
      this.CREATED_DATE,
      this.FUTURE_USE_1,
      this.FUTURE_USE_2,
      this.FUTURE_USE_3,
      this.FUTURE_USE_4,
      this.FUTURE_USE_5,
      this.FUTURE_USE_6,
      this.FUTURE_USE_7) {
    _setDefaultValues();
  }
  DAY_INDEXING_REPORT.withId(
      this.RECEIPT_NO,
      this.POLICY_NO,
      this.PROPOSAL_NUM,
      this.R_CRE_TIME,
      this.POLICY_TYPE,
      this.TRAN_TYPE,
      this.OPERATOR_ID,
      this.AMOUNT,
      this.CREATED_DATE,
      this.FUTURE_USE_1,
      this.FUTURE_USE_2,
      this.FUTURE_USE_3,
      this.FUTURE_USE_4,
      this.FUTURE_USE_5,
      this.FUTURE_USE_6,
      this.FUTURE_USE_7) {
    _setDefaultValues();
  }
  // fromMap v2.0
  DAY_INDEXING_REPORT.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    RECEIPT_NO = o['RECEIPT_NO'].toString();
    if (o['POLICY_NO'] != null) {
      POLICY_NO = o['POLICY_NO'].toString();
    }
    if (o['PROPOSAL_NUM'] != null) {
      PROPOSAL_NUM = o['PROPOSAL_NUM'].toString();
    }
    if (o['R_CRE_TIME'] != null) {
      R_CRE_TIME = o['R_CRE_TIME'].toString();
    }
    if (o['POLICY_TYPE'] != null) {
      POLICY_TYPE = o['POLICY_TYPE'].toString();
    }
    if (o['TRAN_TYPE'] != null) {
      TRAN_TYPE = o['TRAN_TYPE'].toString();
    }
    if (o['OPERATOR_ID'] != null) {
      OPERATOR_ID = o['OPERATOR_ID'].toString();
    }
    if (o['AMOUNT'] != null) {
      AMOUNT = o['AMOUNT'].toString();
    }
    if (o['CREATED_DATE'] != null) {
      CREATED_DATE = o['CREATED_DATE'].toString();
    }
    if (o['FUTURE_USE_1'] != null) {
      FUTURE_USE_1 = o['FUTURE_USE_1'].toString();
    }
    if (o['FUTURE_USE_2'] != null) {
      FUTURE_USE_2 = o['FUTURE_USE_2'].toString();
    }
    if (o['FUTURE_USE_3'] != null) {
      FUTURE_USE_3 = o['FUTURE_USE_3'].toString();
    }
    if (o['FUTURE_USE_4'] != null) {
      FUTURE_USE_4 = o['FUTURE_USE_4'].toString();
    }
    if (o['FUTURE_USE_5'] != null) {
      FUTURE_USE_5 = o['FUTURE_USE_5'].toString();
    }
    if (o['FUTURE_USE_6'] != null) {
      FUTURE_USE_6 = o['FUTURE_USE_6'].toString();
    }
    if (o['FUTURE_USE_7'] != null) {
      FUTURE_USE_7 = o['FUTURE_USE_7'].toString();
    }

    isSaved = true;
  }
  // FIELDS (DAY_INDEXING_REPORT)
  String? RECEIPT_NO;
  String? POLICY_NO;
  String? PROPOSAL_NUM;
  String? R_CRE_TIME;
  String? POLICY_TYPE;
  String? TRAN_TYPE;
  String? OPERATOR_ID;
  String? AMOUNT;
  String? CREATED_DATE;
  String? FUTURE_USE_1;
  String? FUTURE_USE_2;
  String? FUTURE_USE_3;
  String? FUTURE_USE_4;
  String? FUTURE_USE_5;
  String? FUTURE_USE_6;
  String? FUTURE_USE_7;
  bool? isSaved;
  // end FIELDS (DAY_INDEXING_REPORT)

  static const bool _softDeleteActivated = false;
  DAY_INDEXING_REPORTManager? __mnDAY_INDEXING_REPORT;

  DAY_INDEXING_REPORTManager get _mnDAY_INDEXING_REPORT {
    return __mnDAY_INDEXING_REPORT =
        __mnDAY_INDEXING_REPORT ?? DAY_INDEXING_REPORTManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['RECEIPT_NO'] = RECEIPT_NO;
    if (POLICY_NO != null || !forView) {
      map['POLICY_NO'] = POLICY_NO;
    }
    if (PROPOSAL_NUM != null || !forView) {
      map['PROPOSAL_NUM'] = PROPOSAL_NUM;
    }
    if (R_CRE_TIME != null || !forView) {
      map['R_CRE_TIME'] = R_CRE_TIME;
    }
    if (POLICY_TYPE != null || !forView) {
      map['POLICY_TYPE'] = POLICY_TYPE;
    }
    if (TRAN_TYPE != null || !forView) {
      map['TRAN_TYPE'] = TRAN_TYPE;
    }
    if (OPERATOR_ID != null || !forView) {
      map['OPERATOR_ID'] = OPERATOR_ID;
    }
    if (AMOUNT != null || !forView) {
      map['AMOUNT'] = AMOUNT;
    }
    if (CREATED_DATE != null || !forView) {
      map['CREATED_DATE'] = CREATED_DATE;
    }
    if (FUTURE_USE_1 != null || !forView) {
      map['FUTURE_USE_1'] = FUTURE_USE_1;
    }
    if (FUTURE_USE_2 != null || !forView) {
      map['FUTURE_USE_2'] = FUTURE_USE_2;
    }
    if (FUTURE_USE_3 != null || !forView) {
      map['FUTURE_USE_3'] = FUTURE_USE_3;
    }
    if (FUTURE_USE_4 != null || !forView) {
      map['FUTURE_USE_4'] = FUTURE_USE_4;
    }
    if (FUTURE_USE_5 != null || !forView) {
      map['FUTURE_USE_5'] = FUTURE_USE_5;
    }
    if (FUTURE_USE_6 != null || !forView) {
      map['FUTURE_USE_6'] = FUTURE_USE_6;
    }
    if (FUTURE_USE_7 != null || !forView) {
      map['FUTURE_USE_7'] = FUTURE_USE_7;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['RECEIPT_NO'] = RECEIPT_NO;
    if (POLICY_NO != null || !forView) {
      map['POLICY_NO'] = POLICY_NO;
    }
    if (PROPOSAL_NUM != null || !forView) {
      map['PROPOSAL_NUM'] = PROPOSAL_NUM;
    }
    if (R_CRE_TIME != null || !forView) {
      map['R_CRE_TIME'] = R_CRE_TIME;
    }
    if (POLICY_TYPE != null || !forView) {
      map['POLICY_TYPE'] = POLICY_TYPE;
    }
    if (TRAN_TYPE != null || !forView) {
      map['TRAN_TYPE'] = TRAN_TYPE;
    }
    if (OPERATOR_ID != null || !forView) {
      map['OPERATOR_ID'] = OPERATOR_ID;
    }
    if (AMOUNT != null || !forView) {
      map['AMOUNT'] = AMOUNT;
    }
    if (CREATED_DATE != null || !forView) {
      map['CREATED_DATE'] = CREATED_DATE;
    }
    if (FUTURE_USE_1 != null || !forView) {
      map['FUTURE_USE_1'] = FUTURE_USE_1;
    }
    if (FUTURE_USE_2 != null || !forView) {
      map['FUTURE_USE_2'] = FUTURE_USE_2;
    }
    if (FUTURE_USE_3 != null || !forView) {
      map['FUTURE_USE_3'] = FUTURE_USE_3;
    }
    if (FUTURE_USE_4 != null || !forView) {
      map['FUTURE_USE_4'] = FUTURE_USE_4;
    }
    if (FUTURE_USE_5 != null || !forView) {
      map['FUTURE_USE_5'] = FUTURE_USE_5;
    }
    if (FUTURE_USE_6 != null || !forView) {
      map['FUTURE_USE_6'] = FUTURE_USE_6;
    }
    if (FUTURE_USE_7 != null || !forView) {
      map['FUTURE_USE_7'] = FUTURE_USE_7;
    }

    return map;
  }

  /// This method returns Json String [DAY_INDEXING_REPORT]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [DAY_INDEXING_REPORT]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      RECEIPT_NO,
      POLICY_NO,
      PROPOSAL_NUM,
      R_CRE_TIME,
      POLICY_TYPE,
      TRAN_TYPE,
      OPERATOR_ID,
      AMOUNT,
      CREATED_DATE,
      FUTURE_USE_1,
      FUTURE_USE_2,
      FUTURE_USE_3,
      FUTURE_USE_4,
      FUTURE_USE_5,
      FUTURE_USE_6,
      FUTURE_USE_7
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      RECEIPT_NO,
      POLICY_NO,
      PROPOSAL_NUM,
      R_CRE_TIME,
      POLICY_TYPE,
      TRAN_TYPE,
      OPERATOR_ID,
      AMOUNT,
      CREATED_DATE,
      FUTURE_USE_1,
      FUTURE_USE_2,
      FUTURE_USE_3,
      FUTURE_USE_4,
      FUTURE_USE_5,
      FUTURE_USE_6,
      FUTURE_USE_7
    ];
  }

  static Future<List<DAY_INDEXING_REPORT>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR DAY_INDEXING_REPORT.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<DAY_INDEXING_REPORT>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <DAY_INDEXING_REPORT>[];
    try {
      objList = list
          .map((day_indexing_report) => DAY_INDEXING_REPORT
              .fromMap(day_indexing_report as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR DAY_INDEXING_REPORT.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<DAY_INDEXING_REPORT>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<DAY_INDEXING_REPORT> objList = <DAY_INDEXING_REPORT>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = DAY_INDEXING_REPORT.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns DAY_INDEXING_REPORT by ID if exist, otherwise returns null
  /// Primary Keys: String? RECEIPT_NO
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [DAY_INDEXING_REPORT] if exist, otherwise returns null
  Future<DAY_INDEXING_REPORT?> getById(String? RECEIPT_NO,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (RECEIPT_NO == null) {
      return null;
    }
    DAY_INDEXING_REPORT? obj;
    final data = await _mnDAY_INDEXING_REPORT.getById([RECEIPT_NO]);
    if (data.length != 0) {
      obj = DAY_INDEXING_REPORT.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (DAY_INDEXING_REPORT) object. If the Primary Key (RECEIPT_NO) field is null, returns Error.
  /// INSERTS (If not exist) OR REPLACES (If exist) data while Primary Key is not null.
  /// Call the saveAs() method if you do not want to save it when there is another row with the same RECEIPT_NO
  /// <returns>Returns BoolResult
  @override
  Future<BoolResult> save({bool ignoreBatch = true}) async {
    final result = BoolResult(success: false);
    try {
      await _mnDAY_INDEXING_REPORT.rawInsert(
          'INSERT ${isSaved! ? 'OR REPLACE' : ''} INTO DAY_INDEXING_REPORT (RECEIPT_NO, POLICY_NO, PROPOSAL_NUM, R_CRE_TIME, POLICY_TYPE, TRAN_TYPE, OPERATOR_ID, AMOUNT, CREATED_DATE, FUTURE_USE_1, FUTURE_USE_2, FUTURE_USE_3, FUTURE_USE_4, FUTURE_USE_5, FUTURE_USE_6, FUTURE_USE_7)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          toArgsWithIds(),
          ignoreBatch);
      result.success = true;
      isSaved = true;
    } catch (e) {
      result.errorMessage = e.toString();
    }

    saveResult = result;
    return result;
  }

  /// saveAll method saves the sent List<DAY_INDEXING_REPORT> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<DAY_INDEXING_REPORT> day_indexing_reports,
      {bool? exclusive,
      bool? noResult,
      bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await InsTran().batchStart();
    for (final obj in day_indexing_reports) {
      await obj.save();
    }
    if (!isStartedBatch) {
      result = await InsTran().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns 1
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnDAY_INDEXING_REPORT.rawInsert(
          'INSERT OR REPLACE INTO DAY_INDEXING_REPORT (RECEIPT_NO, POLICY_NO, PROPOSAL_NUM, R_CRE_TIME, POLICY_TYPE, TRAN_TYPE, OPERATOR_ID, AMOUNT, CREATED_DATE, FUTURE_USE_1, FUTURE_USE_2, FUTURE_USE_3, FUTURE_USE_4, FUTURE_USE_5, FUTURE_USE_6, FUTURE_USE_7)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            RECEIPT_NO,
            POLICY_NO,
            PROPOSAL_NUM,
            R_CRE_TIME,
            POLICY_TYPE,
            TRAN_TYPE,
            OPERATOR_ID,
            AMOUNT,
            CREATED_DATE,
            FUTURE_USE_1,
            FUTURE_USE_2,
            FUTURE_USE_3,
            FUTURE_USE_4,
            FUTURE_USE_5,
            FUTURE_USE_6,
            FUTURE_USE_7
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage:
                'DAY_INDEXING_REPORT RECEIPT_NO=$RECEIPT_NO updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage:
                'DAY_INDEXING_REPORT RECEIPT_NO=$RECEIPT_NO did not update');
      }
      return 1;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage:
              'DAY_INDEXING_REPORT Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns 1
  @override
  Future<int?> upsert1({bool ignoreBatch = true}) async {
    try {
      final result = await _mnDAY_INDEXING_REPORT.rawInsert(
          'INSERT OR IGNORE INTO DAY_INDEXING_REPORT (RECEIPT_NO, POLICY_NO, PROPOSAL_NUM, R_CRE_TIME, POLICY_TYPE, TRAN_TYPE, OPERATOR_ID, AMOUNT, CREATED_DATE, FUTURE_USE_1, FUTURE_USE_2, FUTURE_USE_3, FUTURE_USE_4, FUTURE_USE_5, FUTURE_USE_6, FUTURE_USE_7)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            RECEIPT_NO,
            POLICY_NO,
            PROPOSAL_NUM,
            R_CRE_TIME,
            POLICY_TYPE,
            TRAN_TYPE,
            OPERATOR_ID,
            AMOUNT,
            CREATED_DATE,
            FUTURE_USE_1,
            FUTURE_USE_2,
            FUTURE_USE_3,
            FUTURE_USE_4,
            FUTURE_USE_5,
            FUTURE_USE_6,
            FUTURE_USE_7
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage:
                'DAY_INDEXING_REPORT RECEIPT_NO=$RECEIPT_NO updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage:
                'DAY_INDEXING_REPORT RECEIPT_NO=$RECEIPT_NO did not update');
      }
      return 1;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage:
              'DAY_INDEXING_REPORT Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Deletes DAY_INDEXING_REPORT

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint(
        'SQFENTITIY: delete DAY_INDEXING_REPORT invoked (RECEIPT_NO=$RECEIPT_NO)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnDAY_INDEXING_REPORT.delete(QueryParams(
          whereString: 'RECEIPT_NO=?', whereArguments: [RECEIPT_NO]));
    } else {
      return _mnDAY_INDEXING_REPORT.updateBatch(
          QueryParams(
              whereString: 'RECEIPT_NO=?', whereArguments: [RECEIPT_NO]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [DAY_INDEXING_REPORT] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  DAY_INDEXING_REPORTFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return DAY_INDEXING_REPORTFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  DAY_INDEXING_REPORTFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return DAY_INDEXING_REPORTFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      RECEIPT_NO = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion day_indexing_report

// region DAY_INDEXING_REPORTField
class DAY_INDEXING_REPORTField extends FilterBase {
  DAY_INDEXING_REPORTField(
      DAY_INDEXING_REPORTFilterBuilder day_indexing_reportFB)
      : super(day_indexing_reportFB);

  @override
  DAY_INDEXING_REPORTFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as DAY_INDEXING_REPORTFilterBuilder;
  }

  @override
  DAY_INDEXING_REPORTFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as DAY_INDEXING_REPORTFilterBuilder;
  }

  @override
  DAY_INDEXING_REPORTFilterBuilder isNull() {
    return super.isNull() as DAY_INDEXING_REPORTFilterBuilder;
  }

  @override
  DAY_INDEXING_REPORTFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as DAY_INDEXING_REPORTFilterBuilder;
  }

  @override
  DAY_INDEXING_REPORTFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as DAY_INDEXING_REPORTFilterBuilder;
  }

  @override
  DAY_INDEXING_REPORTFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as DAY_INDEXING_REPORTFilterBuilder;
  }

  @override
  DAY_INDEXING_REPORTFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as DAY_INDEXING_REPORTFilterBuilder;
  }

  @override
  DAY_INDEXING_REPORTFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as DAY_INDEXING_REPORTFilterBuilder;
  }

  @override
  DAY_INDEXING_REPORTFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as DAY_INDEXING_REPORTFilterBuilder;
  }

  @override
  DAY_INDEXING_REPORTFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue)
        as DAY_INDEXING_REPORTFilterBuilder;
  }

  @override
  DAY_INDEXING_REPORTFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as DAY_INDEXING_REPORTFilterBuilder;
  }

  @override
  DAY_INDEXING_REPORTFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as DAY_INDEXING_REPORTFilterBuilder;
  }

  @override
  DAY_INDEXING_REPORTField get not {
    return super.not as DAY_INDEXING_REPORTField;
  }
}
// endregion DAY_INDEXING_REPORTField

// region DAY_INDEXING_REPORTFilterBuilder
class DAY_INDEXING_REPORTFilterBuilder extends ConjunctionBase {
  DAY_INDEXING_REPORTFilterBuilder(DAY_INDEXING_REPORT obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnDAY_INDEXING_REPORT = obj._mnDAY_INDEXING_REPORT;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  DAY_INDEXING_REPORTManager? _mnDAY_INDEXING_REPORT;

  /// put the sql keyword 'AND'
  @override
  DAY_INDEXING_REPORTFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  DAY_INDEXING_REPORTFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  DAY_INDEXING_REPORTFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  DAY_INDEXING_REPORTFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  DAY_INDEXING_REPORTFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  DAY_INDEXING_REPORTFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  DAY_INDEXING_REPORTFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  DAY_INDEXING_REPORTFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  DAY_INDEXING_REPORTFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  DAY_INDEXING_REPORTFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  DAY_INDEXING_REPORTFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  DAY_INDEXING_REPORTField _setField(
      DAY_INDEXING_REPORTField? field, String colName, DbType dbtype) {
    return DAY_INDEXING_REPORTField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  DAY_INDEXING_REPORTField? _RECEIPT_NO;
  DAY_INDEXING_REPORTField get RECEIPT_NO {
    return _RECEIPT_NO = _setField(_RECEIPT_NO, 'RECEIPT_NO', DbType.integer);
  }

  DAY_INDEXING_REPORTField? _POLICY_NO;
  DAY_INDEXING_REPORTField get POLICY_NO {
    return _POLICY_NO = _setField(_POLICY_NO, 'POLICY_NO', DbType.text);
  }

  DAY_INDEXING_REPORTField? _PROPOSAL_NUM;
  DAY_INDEXING_REPORTField get PROPOSAL_NUM {
    return _PROPOSAL_NUM =
        _setField(_PROPOSAL_NUM, 'PROPOSAL_NUM', DbType.text);
  }

  DAY_INDEXING_REPORTField? _R_CRE_TIME;
  DAY_INDEXING_REPORTField get R_CRE_TIME {
    return _R_CRE_TIME = _setField(_R_CRE_TIME, 'R_CRE_TIME', DbType.text);
  }

  DAY_INDEXING_REPORTField? _POLICY_TYPE;
  DAY_INDEXING_REPORTField get POLICY_TYPE {
    return _POLICY_TYPE = _setField(_POLICY_TYPE, 'POLICY_TYPE', DbType.text);
  }

  DAY_INDEXING_REPORTField? _TRAN_TYPE;
  DAY_INDEXING_REPORTField get TRAN_TYPE {
    return _TRAN_TYPE = _setField(_TRAN_TYPE, 'TRAN_TYPE', DbType.text);
  }

  DAY_INDEXING_REPORTField? _OPERATOR_ID;
  DAY_INDEXING_REPORTField get OPERATOR_ID {
    return _OPERATOR_ID = _setField(_OPERATOR_ID, 'OPERATOR_ID', DbType.text);
  }

  DAY_INDEXING_REPORTField? _AMOUNT;
  DAY_INDEXING_REPORTField get AMOUNT {
    return _AMOUNT = _setField(_AMOUNT, 'AMOUNT', DbType.text);
  }

  DAY_INDEXING_REPORTField? _CREATED_DATE;
  DAY_INDEXING_REPORTField get CREATED_DATE {
    return _CREATED_DATE =
        _setField(_CREATED_DATE, 'CREATED_DATE', DbType.text);
  }

  DAY_INDEXING_REPORTField? _FUTURE_USE_1;
  DAY_INDEXING_REPORTField get FUTURE_USE_1 {
    return _FUTURE_USE_1 =
        _setField(_FUTURE_USE_1, 'FUTURE_USE_1', DbType.text);
  }

  DAY_INDEXING_REPORTField? _FUTURE_USE_2;
  DAY_INDEXING_REPORTField get FUTURE_USE_2 {
    return _FUTURE_USE_2 =
        _setField(_FUTURE_USE_2, 'FUTURE_USE_2', DbType.text);
  }

  DAY_INDEXING_REPORTField? _FUTURE_USE_3;
  DAY_INDEXING_REPORTField get FUTURE_USE_3 {
    return _FUTURE_USE_3 =
        _setField(_FUTURE_USE_3, 'FUTURE_USE_3', DbType.text);
  }

  DAY_INDEXING_REPORTField? _FUTURE_USE_4;
  DAY_INDEXING_REPORTField get FUTURE_USE_4 {
    return _FUTURE_USE_4 =
        _setField(_FUTURE_USE_4, 'FUTURE_USE_4', DbType.text);
  }

  DAY_INDEXING_REPORTField? _FUTURE_USE_5;
  DAY_INDEXING_REPORTField get FUTURE_USE_5 {
    return _FUTURE_USE_5 =
        _setField(_FUTURE_USE_5, 'FUTURE_USE_5', DbType.text);
  }

  DAY_INDEXING_REPORTField? _FUTURE_USE_6;
  DAY_INDEXING_REPORTField get FUTURE_USE_6 {
    return _FUTURE_USE_6 =
        _setField(_FUTURE_USE_6, 'FUTURE_USE_6', DbType.text);
  }

  DAY_INDEXING_REPORTField? _FUTURE_USE_7;
  DAY_INDEXING_REPORTField get FUTURE_USE_7 {
    return _FUTURE_USE_7 =
        _setField(_FUTURE_USE_7, 'FUTURE_USE_7', DbType.text);
  }

  /// Deletes List<DAY_INDEXING_REPORT> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnDAY_INDEXING_REPORT!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnDAY_INDEXING_REPORT!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'RECEIPT_NO IN (SELECT RECEIPT_NO from DAY_INDEXING_REPORT ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnDAY_INDEXING_REPORT!.updateBatch(qparams, values);
  }

  /// This method always returns [DAY_INDEXING_REPORT] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> DAY_INDEXING_REPORT?
  @override
  Future<DAY_INDEXING_REPORT?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnDAY_INDEXING_REPORT!.toList(qparams);
    final data = await objFuture;
    DAY_INDEXING_REPORT? obj;
    if (data.isNotEmpty) {
      obj = DAY_INDEXING_REPORT.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [DAY_INDEXING_REPORT]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> DAY_INDEXING_REPORT?
  @override
  Future<DAY_INDEXING_REPORT> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        DAY_INDEXING_REPORT();
  }

  /// This method returns int. [DAY_INDEXING_REPORT]
  /// <returns>int
  @override
  Future<int> toCount(
      [VoidCallback Function(int c)? day_indexing_reportCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final day_indexing_reportsFuture =
        await _mnDAY_INDEXING_REPORT!.toList(qparams);
    final int count = day_indexing_reportsFuture[0]['CNT'] as int;
    if (day_indexing_reportCount != null) {
      day_indexing_reportCount(count);
    }
    return count;
  }

  /// This method returns List<DAY_INDEXING_REPORT> [DAY_INDEXING_REPORT]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<DAY_INDEXING_REPORT>
  @override
  Future<List<DAY_INDEXING_REPORT>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<DAY_INDEXING_REPORT> day_indexing_reportsData =
        await DAY_INDEXING_REPORT.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return day_indexing_reportsData;
  }

  /// This method returns Json String [DAY_INDEXING_REPORT]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [DAY_INDEXING_REPORT]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [DAY_INDEXING_REPORT]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnDAY_INDEXING_REPORT!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [DAY_INDEXING_REPORT]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `RECEIPT_NO` FROM DAY_INDEXING_REPORT WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<String>.
  /// <returns>List<String>
  @override
  Future<List<String>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<String> RECEIPT_NOData = <String>[];
    qparams.selectColumns = ['RECEIPT_NO'];
    final RECEIPT_NOFuture = await _mnDAY_INDEXING_REPORT!.toList(qparams);

    final int count = RECEIPT_NOFuture.length;
    for (int i = 0; i < count; i++) {
      RECEIPT_NOData.add(RECEIPT_NOFuture[i]['RECEIPT_NO'] as String);
    }
    return RECEIPT_NOData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [DAY_INDEXING_REPORT]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnDAY_INDEXING_REPORT!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await DAY_INDEXING_REPORT.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnDAY_INDEXING_REPORT!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion DAY_INDEXING_REPORTFilterBuilder

// region DAY_INDEXING_REPORTFields
class DAY_INDEXING_REPORTFields {
  static TableField? _fRECEIPT_NO;
  static TableField get RECEIPT_NO {
    return _fRECEIPT_NO = _fRECEIPT_NO ??
        SqlSyntax.setField(_fRECEIPT_NO, 'receipt_no', DbType.integer);
  }

  static TableField? _fPOLICY_NO;
  static TableField get POLICY_NO {
    return _fPOLICY_NO = _fPOLICY_NO ??
        SqlSyntax.setField(_fPOLICY_NO, 'POLICY_NO', DbType.text);
  }

  static TableField? _fPROPOSAL_NUM;
  static TableField get PROPOSAL_NUM {
    return _fPROPOSAL_NUM = _fPROPOSAL_NUM ??
        SqlSyntax.setField(_fPROPOSAL_NUM, 'PROPOSAL_NUM', DbType.text);
  }

  static TableField? _fR_CRE_TIME;
  static TableField get R_CRE_TIME {
    return _fR_CRE_TIME = _fR_CRE_TIME ??
        SqlSyntax.setField(_fR_CRE_TIME, 'R_CRE_TIME', DbType.text);
  }

  static TableField? _fPOLICY_TYPE;
  static TableField get POLICY_TYPE {
    return _fPOLICY_TYPE = _fPOLICY_TYPE ??
        SqlSyntax.setField(_fPOLICY_TYPE, 'POLICY_TYPE', DbType.text);
  }

  static TableField? _fTRAN_TYPE;
  static TableField get TRAN_TYPE {
    return _fTRAN_TYPE = _fTRAN_TYPE ??
        SqlSyntax.setField(_fTRAN_TYPE, 'TRAN_TYPE', DbType.text);
  }

  static TableField? _fOPERATOR_ID;
  static TableField get OPERATOR_ID {
    return _fOPERATOR_ID = _fOPERATOR_ID ??
        SqlSyntax.setField(_fOPERATOR_ID, 'OPERATOR_ID', DbType.text);
  }

  static TableField? _fAMOUNT;
  static TableField get AMOUNT {
    return _fAMOUNT =
        _fAMOUNT ?? SqlSyntax.setField(_fAMOUNT, 'AMOUNT', DbType.text);
  }

  static TableField? _fCREATED_DATE;
  static TableField get CREATED_DATE {
    return _fCREATED_DATE = _fCREATED_DATE ??
        SqlSyntax.setField(_fCREATED_DATE, 'CREATED_DATE', DbType.text);
  }

  static TableField? _fFUTURE_USE_1;
  static TableField get FUTURE_USE_1 {
    return _fFUTURE_USE_1 = _fFUTURE_USE_1 ??
        SqlSyntax.setField(_fFUTURE_USE_1, 'FUTURE_USE_1', DbType.text);
  }

  static TableField? _fFUTURE_USE_2;
  static TableField get FUTURE_USE_2 {
    return _fFUTURE_USE_2 = _fFUTURE_USE_2 ??
        SqlSyntax.setField(_fFUTURE_USE_2, 'FUTURE_USE_2', DbType.text);
  }

  static TableField? _fFUTURE_USE_3;
  static TableField get FUTURE_USE_3 {
    return _fFUTURE_USE_3 = _fFUTURE_USE_3 ??
        SqlSyntax.setField(_fFUTURE_USE_3, 'FUTURE_USE_3', DbType.text);
  }

  static TableField? _fFUTURE_USE_4;
  static TableField get FUTURE_USE_4 {
    return _fFUTURE_USE_4 = _fFUTURE_USE_4 ??
        SqlSyntax.setField(_fFUTURE_USE_4, 'FUTURE_USE_4', DbType.text);
  }

  static TableField? _fFUTURE_USE_5;
  static TableField get FUTURE_USE_5 {
    return _fFUTURE_USE_5 = _fFUTURE_USE_5 ??
        SqlSyntax.setField(_fFUTURE_USE_5, 'FUTURE_USE_5', DbType.text);
  }

  static TableField? _fFUTURE_USE_6;
  static TableField get FUTURE_USE_6 {
    return _fFUTURE_USE_6 = _fFUTURE_USE_6 ??
        SqlSyntax.setField(_fFUTURE_USE_6, 'FUTURE_USE_6', DbType.text);
  }

  static TableField? _fFUTURE_USE_7;
  static TableField get FUTURE_USE_7 {
    return _fFUTURE_USE_7 = _fFUTURE_USE_7 ??
        SqlSyntax.setField(_fFUTURE_USE_7, 'FUTURE_USE_7', DbType.text);
  }
}
// endregion DAY_INDEXING_REPORTFields

//region DAY_INDEXING_REPORTManager
class DAY_INDEXING_REPORTManager extends SqfEntityProvider {
  DAY_INDEXING_REPORTManager()
      : super(InsTran(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'DAY_INDEXING_REPORT';
  static const List<String> _primaryKeyList = ['RECEIPT_NO'];
  static const String _whereStr = 'RECEIPT_NO=?';
}

//endregion DAY_INDEXING_REPORTManager
// region DAY_TRANSACTION_REPORT
class DAY_TRANSACTION_REPORT extends TableBase {
  DAY_TRANSACTION_REPORT(
      {this.RECEIPT_NO,
      this.STATUS,
      this.TRAN_ID,
      this.FROM_DATE,
      this.TO_DATE,
      this.TRAN_PAYMENT_TYPE,
      this.POLICY_NO,
      this.PROPOSAL_NUM,
      this.R_CRE_TIME,
      this.POLICY_TYPE,
      this.TRAN_TYPE,
      this.TRAN_DATE,
      this.OPERATOR_ID,
      this.AMOUNT,
      this.INTIAL_AMOUNT,
      this.RENEWAL_AMOUNT,
      this.CREATED_DATE,
      this.I_CGST,
      this.I_SGST,
      this.I_UGST,
      this.R_CGST,
      this.R_SGST,
      this.R_UGST,
      this.REBATE,
      this.BAL_AMT,
      this.PAYMENT_MODE,
      this.CGST,
      this.SGST,
      this.UGST,
      this.TOTAL_GST,
      this.GSTN_ID,
      this.PAYMENT_CATEGORY,
      this.PREM_AMNT,
      this.DEFAULT_FEE}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  DAY_TRANSACTION_REPORT.withFields(
      this.RECEIPT_NO,
      this.STATUS,
      this.TRAN_ID,
      this.FROM_DATE,
      this.TO_DATE,
      this.TRAN_PAYMENT_TYPE,
      this.POLICY_NO,
      this.PROPOSAL_NUM,
      this.R_CRE_TIME,
      this.POLICY_TYPE,
      this.TRAN_TYPE,
      this.TRAN_DATE,
      this.OPERATOR_ID,
      this.AMOUNT,
      this.INTIAL_AMOUNT,
      this.RENEWAL_AMOUNT,
      this.CREATED_DATE,
      this.I_CGST,
      this.I_SGST,
      this.I_UGST,
      this.R_CGST,
      this.R_SGST,
      this.R_UGST,
      this.REBATE,
      this.BAL_AMT,
      this.PAYMENT_MODE,
      this.CGST,
      this.SGST,
      this.UGST,
      this.TOTAL_GST,
      this.GSTN_ID,
      this.PAYMENT_CATEGORY,
      this.PREM_AMNT,
      this.DEFAULT_FEE) {
    _setDefaultValues();
  }
  DAY_TRANSACTION_REPORT.withId(
      this.RECEIPT_NO,
      this.STATUS,
      this.TRAN_ID,
      this.FROM_DATE,
      this.TO_DATE,
      this.TRAN_PAYMENT_TYPE,
      this.POLICY_NO,
      this.PROPOSAL_NUM,
      this.R_CRE_TIME,
      this.POLICY_TYPE,
      this.TRAN_TYPE,
      this.TRAN_DATE,
      this.OPERATOR_ID,
      this.AMOUNT,
      this.INTIAL_AMOUNT,
      this.RENEWAL_AMOUNT,
      this.CREATED_DATE,
      this.I_CGST,
      this.I_SGST,
      this.I_UGST,
      this.R_CGST,
      this.R_SGST,
      this.R_UGST,
      this.REBATE,
      this.BAL_AMT,
      this.PAYMENT_MODE,
      this.CGST,
      this.SGST,
      this.UGST,
      this.TOTAL_GST,
      this.GSTN_ID,
      this.PAYMENT_CATEGORY,
      this.PREM_AMNT,
      this.DEFAULT_FEE) {
    _setDefaultValues();
  }
  // fromMap v2.0
  DAY_TRANSACTION_REPORT.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    RECEIPT_NO = o['RECEIPT_NO'].toString();
    if (o['STATUS'] != null) {
      STATUS = o['STATUS'].toString();
    }
    if (o['TRAN_ID'] != null) {
      TRAN_ID = o['TRAN_ID'].toString();
    }
    if (o['FROM_DATE'] != null) {
      FROM_DATE = o['FROM_DATE'].toString();
    }
    if (o['TO_DATE'] != null) {
      TO_DATE = o['TO_DATE'].toString();
    }
    if (o['TRAN_PAYMENT_TYPE'] != null) {
      TRAN_PAYMENT_TYPE = o['TRAN_PAYMENT_TYPE'].toString();
    }
    if (o['POLICY_NO'] != null) {
      POLICY_NO = o['POLICY_NO'].toString();
    }
    if (o['PROPOSAL_NUM'] != null) {
      PROPOSAL_NUM = o['PROPOSAL_NUM'].toString();
    }
    if (o['R_CRE_TIME'] != null) {
      R_CRE_TIME = o['R_CRE_TIME'].toString();
    }
    if (o['POLICY_TYPE'] != null) {
      POLICY_TYPE = o['POLICY_TYPE'].toString();
    }
    if (o['TRAN_TYPE'] != null) {
      TRAN_TYPE = o['TRAN_TYPE'].toString();
    }
    if (o['TRAN_DATE'] != null) {
      TRAN_DATE = o['TRAN_DATE'].toString();
    }
    if (o['OPERATOR_ID'] != null) {
      OPERATOR_ID = o['OPERATOR_ID'].toString();
    }
    if (o['AMOUNT'] != null) {
      AMOUNT = o['AMOUNT'].toString();
    }
    if (o['INTIAL_AMOUNT'] != null) {
      INTIAL_AMOUNT = o['INTIAL_AMOUNT'].toString();
    }
    if (o['RENEWAL_AMOUNT'] != null) {
      RENEWAL_AMOUNT = o['RENEWAL_AMOUNT'].toString();
    }
    if (o['CREATED_DATE'] != null) {
      CREATED_DATE = o['CREATED_DATE'].toString();
    }
    if (o['I_CGST'] != null) {
      I_CGST = o['I_CGST'].toString();
    }
    if (o['I_SGST'] != null) {
      I_SGST = o['I_SGST'].toString();
    }
    if (o['I_UGST'] != null) {
      I_UGST = o['I_UGST'].toString();
    }
    if (o['R_CGST'] != null) {
      R_CGST = o['R_CGST'].toString();
    }
    if (o['R_SGST'] != null) {
      R_SGST = o['R_SGST'].toString();
    }
    if (o['R_UGST'] != null) {
      R_UGST = o['R_UGST'].toString();
    }
    if (o['REBATE'] != null) {
      REBATE = o['REBATE'].toString();
    }
    if (o['BAL_AMT'] != null) {
      BAL_AMT = o['BAL_AMT'].toString();
    }
    if (o['PAYMENT_MODE'] != null) {
      PAYMENT_MODE = o['PAYMENT_MODE'].toString();
    }
    if (o['CGST'] != null) {
      CGST = o['CGST'].toString();
    }
    if (o['SGST'] != null) {
      SGST = o['SGST'].toString();
    }
    if (o['UGST'] != null) {
      UGST = o['UGST'].toString();
    }
    if (o['TOTAL_GST'] != null) {
      TOTAL_GST = o['TOTAL_GST'].toString();
    }
    if (o['GSTN_ID'] != null) {
      GSTN_ID = o['GSTN_ID'].toString();
    }
    if (o['PAYMENT_CATEGORY'] != null) {
      PAYMENT_CATEGORY = o['PAYMENT_CATEGORY'].toString();
    }
    if (o['PREM_AMNT'] != null) {
      PREM_AMNT = o['PREM_AMNT'].toString();
    }
    if (o['DEFAULT_FEE'] != null) {
      DEFAULT_FEE = o['DEFAULT_FEE'].toString();
    }

    isSaved = true;
  }
  // FIELDS (DAY_TRANSACTION_REPORT)
  String? RECEIPT_NO;
  String? STATUS;
  String? TRAN_ID;
  String? FROM_DATE;
  String? TO_DATE;
  String? TRAN_PAYMENT_TYPE;
  String? POLICY_NO;
  String? PROPOSAL_NUM;
  String? R_CRE_TIME;
  String? POLICY_TYPE;
  String? TRAN_TYPE;
  String? TRAN_DATE;
  String? OPERATOR_ID;
  String? AMOUNT;
  String? INTIAL_AMOUNT;
  String? RENEWAL_AMOUNT;
  String? CREATED_DATE;
  String? I_CGST;
  String? I_SGST;
  String? I_UGST;
  String? R_CGST;
  String? R_SGST;
  String? R_UGST;
  String? REBATE;
  String? BAL_AMT;
  String? PAYMENT_MODE;
  String? CGST;
  String? SGST;
  String? UGST;
  String? TOTAL_GST;
  String? GSTN_ID;
  String? PAYMENT_CATEGORY;
  String? PREM_AMNT;
  String? DEFAULT_FEE;
  bool? isSaved;
  // end FIELDS (DAY_TRANSACTION_REPORT)

  static const bool _softDeleteActivated = false;
  DAY_TRANSACTION_REPORTManager? __mnDAY_TRANSACTION_REPORT;

  DAY_TRANSACTION_REPORTManager get _mnDAY_TRANSACTION_REPORT {
    return __mnDAY_TRANSACTION_REPORT =
        __mnDAY_TRANSACTION_REPORT ?? DAY_TRANSACTION_REPORTManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['RECEIPT_NO'] = RECEIPT_NO;
    if (STATUS != null || !forView) {
      map['STATUS'] = STATUS;
    }
    if (TRAN_ID != null || !forView) {
      map['TRAN_ID'] = TRAN_ID;
    }
    if (FROM_DATE != null || !forView) {
      map['FROM_DATE'] = FROM_DATE;
    }
    if (TO_DATE != null || !forView) {
      map['TO_DATE'] = TO_DATE;
    }
    if (TRAN_PAYMENT_TYPE != null || !forView) {
      map['TRAN_PAYMENT_TYPE'] = TRAN_PAYMENT_TYPE;
    }
    if (POLICY_NO != null || !forView) {
      map['POLICY_NO'] = POLICY_NO;
    }
    if (PROPOSAL_NUM != null || !forView) {
      map['PROPOSAL_NUM'] = PROPOSAL_NUM;
    }
    if (R_CRE_TIME != null || !forView) {
      map['R_CRE_TIME'] = R_CRE_TIME;
    }
    if (POLICY_TYPE != null || !forView) {
      map['POLICY_TYPE'] = POLICY_TYPE;
    }
    if (TRAN_TYPE != null || !forView) {
      map['TRAN_TYPE'] = TRAN_TYPE;
    }
    if (TRAN_DATE != null || !forView) {
      map['TRAN_DATE'] = TRAN_DATE;
    }
    if (OPERATOR_ID != null || !forView) {
      map['OPERATOR_ID'] = OPERATOR_ID;
    }
    if (AMOUNT != null || !forView) {
      map['AMOUNT'] = AMOUNT;
    }
    if (INTIAL_AMOUNT != null || !forView) {
      map['INTIAL_AMOUNT'] = INTIAL_AMOUNT;
    }
    if (RENEWAL_AMOUNT != null || !forView) {
      map['RENEWAL_AMOUNT'] = RENEWAL_AMOUNT;
    }
    if (CREATED_DATE != null || !forView) {
      map['CREATED_DATE'] = CREATED_DATE;
    }
    if (I_CGST != null || !forView) {
      map['I_CGST'] = I_CGST;
    }
    if (I_SGST != null || !forView) {
      map['I_SGST'] = I_SGST;
    }
    if (I_UGST != null || !forView) {
      map['I_UGST'] = I_UGST;
    }
    if (R_CGST != null || !forView) {
      map['R_CGST'] = R_CGST;
    }
    if (R_SGST != null || !forView) {
      map['R_SGST'] = R_SGST;
    }
    if (R_UGST != null || !forView) {
      map['R_UGST'] = R_UGST;
    }
    if (REBATE != null || !forView) {
      map['REBATE'] = REBATE;
    }
    if (BAL_AMT != null || !forView) {
      map['BAL_AMT'] = BAL_AMT;
    }
    if (PAYMENT_MODE != null || !forView) {
      map['PAYMENT_MODE'] = PAYMENT_MODE;
    }
    if (CGST != null || !forView) {
      map['CGST'] = CGST;
    }
    if (SGST != null || !forView) {
      map['SGST'] = SGST;
    }
    if (UGST != null || !forView) {
      map['UGST'] = UGST;
    }
    if (TOTAL_GST != null || !forView) {
      map['TOTAL_GST'] = TOTAL_GST;
    }
    if (GSTN_ID != null || !forView) {
      map['GSTN_ID'] = GSTN_ID;
    }
    if (PAYMENT_CATEGORY != null || !forView) {
      map['PAYMENT_CATEGORY'] = PAYMENT_CATEGORY;
    }
    if (PREM_AMNT != null || !forView) {
      map['PREM_AMNT'] = PREM_AMNT;
    }
    if (DEFAULT_FEE != null || !forView) {
      map['DEFAULT_FEE'] = DEFAULT_FEE;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['RECEIPT_NO'] = RECEIPT_NO;
    if (STATUS != null || !forView) {
      map['STATUS'] = STATUS;
    }
    if (TRAN_ID != null || !forView) {
      map['TRAN_ID'] = TRAN_ID;
    }
    if (FROM_DATE != null || !forView) {
      map['FROM_DATE'] = FROM_DATE;
    }
    if (TO_DATE != null || !forView) {
      map['TO_DATE'] = TO_DATE;
    }
    if (TRAN_PAYMENT_TYPE != null || !forView) {
      map['TRAN_PAYMENT_TYPE'] = TRAN_PAYMENT_TYPE;
    }
    if (POLICY_NO != null || !forView) {
      map['POLICY_NO'] = POLICY_NO;
    }
    if (PROPOSAL_NUM != null || !forView) {
      map['PROPOSAL_NUM'] = PROPOSAL_NUM;
    }
    if (R_CRE_TIME != null || !forView) {
      map['R_CRE_TIME'] = R_CRE_TIME;
    }
    if (POLICY_TYPE != null || !forView) {
      map['POLICY_TYPE'] = POLICY_TYPE;
    }
    if (TRAN_TYPE != null || !forView) {
      map['TRAN_TYPE'] = TRAN_TYPE;
    }
    if (TRAN_DATE != null || !forView) {
      map['TRAN_DATE'] = TRAN_DATE;
    }
    if (OPERATOR_ID != null || !forView) {
      map['OPERATOR_ID'] = OPERATOR_ID;
    }
    if (AMOUNT != null || !forView) {
      map['AMOUNT'] = AMOUNT;
    }
    if (INTIAL_AMOUNT != null || !forView) {
      map['INTIAL_AMOUNT'] = INTIAL_AMOUNT;
    }
    if (RENEWAL_AMOUNT != null || !forView) {
      map['RENEWAL_AMOUNT'] = RENEWAL_AMOUNT;
    }
    if (CREATED_DATE != null || !forView) {
      map['CREATED_DATE'] = CREATED_DATE;
    }
    if (I_CGST != null || !forView) {
      map['I_CGST'] = I_CGST;
    }
    if (I_SGST != null || !forView) {
      map['I_SGST'] = I_SGST;
    }
    if (I_UGST != null || !forView) {
      map['I_UGST'] = I_UGST;
    }
    if (R_CGST != null || !forView) {
      map['R_CGST'] = R_CGST;
    }
    if (R_SGST != null || !forView) {
      map['R_SGST'] = R_SGST;
    }
    if (R_UGST != null || !forView) {
      map['R_UGST'] = R_UGST;
    }
    if (REBATE != null || !forView) {
      map['REBATE'] = REBATE;
    }
    if (BAL_AMT != null || !forView) {
      map['BAL_AMT'] = BAL_AMT;
    }
    if (PAYMENT_MODE != null || !forView) {
      map['PAYMENT_MODE'] = PAYMENT_MODE;
    }
    if (CGST != null || !forView) {
      map['CGST'] = CGST;
    }
    if (SGST != null || !forView) {
      map['SGST'] = SGST;
    }
    if (UGST != null || !forView) {
      map['UGST'] = UGST;
    }
    if (TOTAL_GST != null || !forView) {
      map['TOTAL_GST'] = TOTAL_GST;
    }
    if (GSTN_ID != null || !forView) {
      map['GSTN_ID'] = GSTN_ID;
    }
    if (PAYMENT_CATEGORY != null || !forView) {
      map['PAYMENT_CATEGORY'] = PAYMENT_CATEGORY;
    }
    if (PREM_AMNT != null || !forView) {
      map['PREM_AMNT'] = PREM_AMNT;
    }
    if (DEFAULT_FEE != null || !forView) {
      map['DEFAULT_FEE'] = DEFAULT_FEE;
    }

    return map;
  }

  /// This method returns Json String [DAY_TRANSACTION_REPORT]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [DAY_TRANSACTION_REPORT]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      RECEIPT_NO,
      STATUS,
      TRAN_ID,
      FROM_DATE,
      TO_DATE,
      TRAN_PAYMENT_TYPE,
      POLICY_NO,
      PROPOSAL_NUM,
      R_CRE_TIME,
      POLICY_TYPE,
      TRAN_TYPE,
      TRAN_DATE,
      OPERATOR_ID,
      AMOUNT,
      INTIAL_AMOUNT,
      RENEWAL_AMOUNT,
      CREATED_DATE,
      I_CGST,
      I_SGST,
      I_UGST,
      R_CGST,
      R_SGST,
      R_UGST,
      REBATE,
      BAL_AMT,
      PAYMENT_MODE,
      CGST,
      SGST,
      UGST,
      TOTAL_GST,
      GSTN_ID,
      PAYMENT_CATEGORY,
      PREM_AMNT,
      DEFAULT_FEE
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      RECEIPT_NO,
      STATUS,
      TRAN_ID,
      FROM_DATE,
      TO_DATE,
      TRAN_PAYMENT_TYPE,
      POLICY_NO,
      PROPOSAL_NUM,
      R_CRE_TIME,
      POLICY_TYPE,
      TRAN_TYPE,
      TRAN_DATE,
      OPERATOR_ID,
      AMOUNT,
      INTIAL_AMOUNT,
      RENEWAL_AMOUNT,
      CREATED_DATE,
      I_CGST,
      I_SGST,
      I_UGST,
      R_CGST,
      R_SGST,
      R_UGST,
      REBATE,
      BAL_AMT,
      PAYMENT_MODE,
      CGST,
      SGST,
      UGST,
      TOTAL_GST,
      GSTN_ID,
      PAYMENT_CATEGORY,
      PREM_AMNT,
      DEFAULT_FEE
    ];
  }

  static Future<List<DAY_TRANSACTION_REPORT>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR DAY_TRANSACTION_REPORT.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<DAY_TRANSACTION_REPORT>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <DAY_TRANSACTION_REPORT>[];
    try {
      objList = list
          .map((day_transaction_report) => DAY_TRANSACTION_REPORT
              .fromMap(day_transaction_report as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR DAY_TRANSACTION_REPORT.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<DAY_TRANSACTION_REPORT>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<DAY_TRANSACTION_REPORT> objList = <DAY_TRANSACTION_REPORT>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = DAY_TRANSACTION_REPORT.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns DAY_TRANSACTION_REPORT by ID if exist, otherwise returns null
  /// Primary Keys: String? RECEIPT_NO
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [DAY_TRANSACTION_REPORT] if exist, otherwise returns null
  Future<DAY_TRANSACTION_REPORT?> getById(String? RECEIPT_NO,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (RECEIPT_NO == null) {
      return null;
    }
    DAY_TRANSACTION_REPORT? obj;
    final data = await _mnDAY_TRANSACTION_REPORT.getById([RECEIPT_NO]);
    if (data.length != 0) {
      obj = DAY_TRANSACTION_REPORT.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (DAY_TRANSACTION_REPORT) object. If the Primary Key (RECEIPT_NO) field is null, returns Error.
  /// INSERTS (If not exist) OR REPLACES (If exist) data while Primary Key is not null.
  /// Call the saveAs() method if you do not want to save it when there is another row with the same RECEIPT_NO
  /// <returns>Returns BoolResult
  @override
  Future<BoolResult> save({bool ignoreBatch = true}) async {
    final result = BoolResult(success: false);
    try {
      await _mnDAY_TRANSACTION_REPORT.rawInsert(
          'INSERT ${isSaved! ? 'OR REPLACE' : ''} INTO DAY_TRANSACTION_REPORT (RECEIPT_NO, STATUS, TRAN_ID, FROM_DATE, TO_DATE, TRAN_PAYMENT_TYPE, POLICY_NO, PROPOSAL_NUM, R_CRE_TIME, POLICY_TYPE, TRAN_TYPE, TRAN_DATE, OPERATOR_ID, AMOUNT, INTIAL_AMOUNT, RENEWAL_AMOUNT, CREATED_DATE, I_CGST, I_SGST, I_UGST, R_CGST, R_SGST, R_UGST, REBATE, BAL_AMT, PAYMENT_MODE, CGST, SGST, UGST, TOTAL_GST, GSTN_ID, PAYMENT_CATEGORY, PREM_AMNT, DEFAULT_FEE)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          toArgsWithIds(),
          ignoreBatch);
      result.success = true;
      isSaved = true;
    } catch (e) {
      result.errorMessage = e.toString();
    }

    saveResult = result;
    return result;
  }

  /// saveAll method saves the sent List<DAY_TRANSACTION_REPORT> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<DAY_TRANSACTION_REPORT> day_transaction_reports,
      {bool? exclusive,
      bool? noResult,
      bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await InsTran().batchStart();
    for (final obj in day_transaction_reports) {
      await obj.save();
    }
    if (!isStartedBatch) {
      result = await InsTran().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns 1
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnDAY_TRANSACTION_REPORT.rawInsert(
          'INSERT OR REPLACE INTO DAY_TRANSACTION_REPORT (RECEIPT_NO, STATUS, TRAN_ID, FROM_DATE, TO_DATE, TRAN_PAYMENT_TYPE, POLICY_NO, PROPOSAL_NUM, R_CRE_TIME, POLICY_TYPE, TRAN_TYPE, TRAN_DATE, OPERATOR_ID, AMOUNT, INTIAL_AMOUNT, RENEWAL_AMOUNT, CREATED_DATE, I_CGST, I_SGST, I_UGST, R_CGST, R_SGST, R_UGST, REBATE, BAL_AMT, PAYMENT_MODE, CGST, SGST, UGST, TOTAL_GST, GSTN_ID, PAYMENT_CATEGORY, PREM_AMNT, DEFAULT_FEE)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            RECEIPT_NO,
            STATUS,
            TRAN_ID,
            FROM_DATE,
            TO_DATE,
            TRAN_PAYMENT_TYPE,
            POLICY_NO,
            PROPOSAL_NUM,
            R_CRE_TIME,
            POLICY_TYPE,
            TRAN_TYPE,
            TRAN_DATE,
            OPERATOR_ID,
            AMOUNT,
            INTIAL_AMOUNT,
            RENEWAL_AMOUNT,
            CREATED_DATE,
            I_CGST,
            I_SGST,
            I_UGST,
            R_CGST,
            R_SGST,
            R_UGST,
            REBATE,
            BAL_AMT,
            PAYMENT_MODE,
            CGST,
            SGST,
            UGST,
            TOTAL_GST,
            GSTN_ID,
            PAYMENT_CATEGORY,
            PREM_AMNT,
            DEFAULT_FEE
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage:
                'DAY_TRANSACTION_REPORT RECEIPT_NO=$RECEIPT_NO updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage:
                'DAY_TRANSACTION_REPORT RECEIPT_NO=$RECEIPT_NO did not update');
      }
      return 1;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage:
              'DAY_TRANSACTION_REPORT Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns 1
  @override
  Future<int?> upsert1({bool ignoreBatch = true}) async {
    try {
      final result = await _mnDAY_TRANSACTION_REPORT.rawInsert(
          'INSERT OR IGNORE INTO DAY_TRANSACTION_REPORT (RECEIPT_NO, STATUS, TRAN_ID, FROM_DATE, TO_DATE, TRAN_PAYMENT_TYPE, POLICY_NO, PROPOSAL_NUM, R_CRE_TIME, POLICY_TYPE, TRAN_TYPE, TRAN_DATE, OPERATOR_ID, AMOUNT, INTIAL_AMOUNT, RENEWAL_AMOUNT, CREATED_DATE, I_CGST, I_SGST, I_UGST, R_CGST, R_SGST, R_UGST, REBATE, BAL_AMT, PAYMENT_MODE, CGST, SGST, UGST, TOTAL_GST, GSTN_ID, PAYMENT_CATEGORY, PREM_AMNT, DEFAULT_FEE)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            RECEIPT_NO,
            STATUS,
            TRAN_ID,
            FROM_DATE,
            TO_DATE,
            TRAN_PAYMENT_TYPE,
            POLICY_NO,
            PROPOSAL_NUM,
            R_CRE_TIME,
            POLICY_TYPE,
            TRAN_TYPE,
            TRAN_DATE,
            OPERATOR_ID,
            AMOUNT,
            INTIAL_AMOUNT,
            RENEWAL_AMOUNT,
            CREATED_DATE,
            I_CGST,
            I_SGST,
            I_UGST,
            R_CGST,
            R_SGST,
            R_UGST,
            REBATE,
            BAL_AMT,
            PAYMENT_MODE,
            CGST,
            SGST,
            UGST,
            TOTAL_GST,
            GSTN_ID,
            PAYMENT_CATEGORY,
            PREM_AMNT,
            DEFAULT_FEE
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage:
                'DAY_TRANSACTION_REPORT RECEIPT_NO=$RECEIPT_NO updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage:
                'DAY_TRANSACTION_REPORT RECEIPT_NO=$RECEIPT_NO did not update');
      }
      return 1;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage:
              'DAY_TRANSACTION_REPORT Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Deletes DAY_TRANSACTION_REPORT

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint(
        'SQFENTITIY: delete DAY_TRANSACTION_REPORT invoked (RECEIPT_NO=$RECEIPT_NO)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnDAY_TRANSACTION_REPORT.delete(QueryParams(
          whereString: 'RECEIPT_NO=?', whereArguments: [RECEIPT_NO]));
    } else {
      return _mnDAY_TRANSACTION_REPORT.updateBatch(
          QueryParams(
              whereString: 'RECEIPT_NO=?', whereArguments: [RECEIPT_NO]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [DAY_TRANSACTION_REPORT] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  DAY_TRANSACTION_REPORTFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return DAY_TRANSACTION_REPORTFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  DAY_TRANSACTION_REPORTFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return DAY_TRANSACTION_REPORTFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      RECEIPT_NO = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion day_transaction_report

// region DAY_TRANSACTION_REPORTField
class DAY_TRANSACTION_REPORTField extends FilterBase {
  DAY_TRANSACTION_REPORTField(
      DAY_TRANSACTION_REPORTFilterBuilder day_transaction_reportFB)
      : super(day_transaction_reportFB);

  @override
  DAY_TRANSACTION_REPORTFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as DAY_TRANSACTION_REPORTFilterBuilder;
  }

  @override
  DAY_TRANSACTION_REPORTFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as DAY_TRANSACTION_REPORTFilterBuilder;
  }

  @override
  DAY_TRANSACTION_REPORTFilterBuilder isNull() {
    return super.isNull() as DAY_TRANSACTION_REPORTFilterBuilder;
  }

  @override
  DAY_TRANSACTION_REPORTFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as DAY_TRANSACTION_REPORTFilterBuilder;
  }

  @override
  DAY_TRANSACTION_REPORTFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as DAY_TRANSACTION_REPORTFilterBuilder;
  }

  @override
  DAY_TRANSACTION_REPORTFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as DAY_TRANSACTION_REPORTFilterBuilder;
  }

  @override
  DAY_TRANSACTION_REPORTFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as DAY_TRANSACTION_REPORTFilterBuilder;
  }

  @override
  DAY_TRANSACTION_REPORTFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as DAY_TRANSACTION_REPORTFilterBuilder;
  }

  @override
  DAY_TRANSACTION_REPORTFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as DAY_TRANSACTION_REPORTFilterBuilder;
  }

  @override
  DAY_TRANSACTION_REPORTFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue)
        as DAY_TRANSACTION_REPORTFilterBuilder;
  }

  @override
  DAY_TRANSACTION_REPORTFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue)
        as DAY_TRANSACTION_REPORTFilterBuilder;
  }

  @override
  DAY_TRANSACTION_REPORTFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as DAY_TRANSACTION_REPORTFilterBuilder;
  }

  @override
  DAY_TRANSACTION_REPORTField get not {
    return super.not as DAY_TRANSACTION_REPORTField;
  }
}
// endregion DAY_TRANSACTION_REPORTField

// region DAY_TRANSACTION_REPORTFilterBuilder
class DAY_TRANSACTION_REPORTFilterBuilder extends ConjunctionBase {
  DAY_TRANSACTION_REPORTFilterBuilder(
      DAY_TRANSACTION_REPORT obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnDAY_TRANSACTION_REPORT = obj._mnDAY_TRANSACTION_REPORT;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  DAY_TRANSACTION_REPORTManager? _mnDAY_TRANSACTION_REPORT;

  /// put the sql keyword 'AND'
  @override
  DAY_TRANSACTION_REPORTFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  DAY_TRANSACTION_REPORTFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  DAY_TRANSACTION_REPORTFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  DAY_TRANSACTION_REPORTFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  DAY_TRANSACTION_REPORTFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  DAY_TRANSACTION_REPORTFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  DAY_TRANSACTION_REPORTFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  DAY_TRANSACTION_REPORTFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  DAY_TRANSACTION_REPORTFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  DAY_TRANSACTION_REPORTFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  DAY_TRANSACTION_REPORTFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  DAY_TRANSACTION_REPORTField _setField(
      DAY_TRANSACTION_REPORTField? field, String colName, DbType dbtype) {
    return DAY_TRANSACTION_REPORTField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  DAY_TRANSACTION_REPORTField? _RECEIPT_NO;
  DAY_TRANSACTION_REPORTField get RECEIPT_NO {
    return _RECEIPT_NO = _setField(_RECEIPT_NO, 'RECEIPT_NO', DbType.integer);
  }

  DAY_TRANSACTION_REPORTField? _STATUS;
  DAY_TRANSACTION_REPORTField get STATUS {
    return _STATUS = _setField(_STATUS, 'STATUS', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _TRAN_ID;
  DAY_TRANSACTION_REPORTField get TRAN_ID {
    return _TRAN_ID = _setField(_TRAN_ID, 'TRAN_ID', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _FROM_DATE;
  DAY_TRANSACTION_REPORTField get FROM_DATE {
    return _FROM_DATE = _setField(_FROM_DATE, 'FROM_DATE', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _TO_DATE;
  DAY_TRANSACTION_REPORTField get TO_DATE {
    return _TO_DATE = _setField(_TO_DATE, 'TO_DATE', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _TRAN_PAYMENT_TYPE;
  DAY_TRANSACTION_REPORTField get TRAN_PAYMENT_TYPE {
    return _TRAN_PAYMENT_TYPE =
        _setField(_TRAN_PAYMENT_TYPE, 'TRAN_PAYMENT_TYPE', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _POLICY_NO;
  DAY_TRANSACTION_REPORTField get POLICY_NO {
    return _POLICY_NO = _setField(_POLICY_NO, 'POLICY_NO', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _PROPOSAL_NUM;
  DAY_TRANSACTION_REPORTField get PROPOSAL_NUM {
    return _PROPOSAL_NUM =
        _setField(_PROPOSAL_NUM, 'PROPOSAL_NUM', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _R_CRE_TIME;
  DAY_TRANSACTION_REPORTField get R_CRE_TIME {
    return _R_CRE_TIME = _setField(_R_CRE_TIME, 'R_CRE_TIME', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _POLICY_TYPE;
  DAY_TRANSACTION_REPORTField get POLICY_TYPE {
    return _POLICY_TYPE = _setField(_POLICY_TYPE, 'POLICY_TYPE', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _TRAN_TYPE;
  DAY_TRANSACTION_REPORTField get TRAN_TYPE {
    return _TRAN_TYPE = _setField(_TRAN_TYPE, 'TRAN_TYPE', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _TRAN_DATE;
  DAY_TRANSACTION_REPORTField get TRAN_DATE {
    return _TRAN_DATE = _setField(_TRAN_DATE, 'TRAN_DATE', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _OPERATOR_ID;
  DAY_TRANSACTION_REPORTField get OPERATOR_ID {
    return _OPERATOR_ID = _setField(_OPERATOR_ID, 'OPERATOR_ID', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _AMOUNT;
  DAY_TRANSACTION_REPORTField get AMOUNT {
    return _AMOUNT = _setField(_AMOUNT, 'AMOUNT', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _INTIAL_AMOUNT;
  DAY_TRANSACTION_REPORTField get INTIAL_AMOUNT {
    return _INTIAL_AMOUNT =
        _setField(_INTIAL_AMOUNT, 'INTIAL_AMOUNT', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _RENEWAL_AMOUNT;
  DAY_TRANSACTION_REPORTField get RENEWAL_AMOUNT {
    return _RENEWAL_AMOUNT =
        _setField(_RENEWAL_AMOUNT, 'RENEWAL_AMOUNT', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _CREATED_DATE;
  DAY_TRANSACTION_REPORTField get CREATED_DATE {
    return _CREATED_DATE =
        _setField(_CREATED_DATE, 'CREATED_DATE', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _I_CGST;
  DAY_TRANSACTION_REPORTField get I_CGST {
    return _I_CGST = _setField(_I_CGST, 'I_CGST', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _I_SGST;
  DAY_TRANSACTION_REPORTField get I_SGST {
    return _I_SGST = _setField(_I_SGST, 'I_SGST', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _I_UGST;
  DAY_TRANSACTION_REPORTField get I_UGST {
    return _I_UGST = _setField(_I_UGST, 'I_UGST', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _R_CGST;
  DAY_TRANSACTION_REPORTField get R_CGST {
    return _R_CGST = _setField(_R_CGST, 'R_CGST', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _R_SGST;
  DAY_TRANSACTION_REPORTField get R_SGST {
    return _R_SGST = _setField(_R_SGST, 'R_SGST', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _R_UGST;
  DAY_TRANSACTION_REPORTField get R_UGST {
    return _R_UGST = _setField(_R_UGST, 'R_UGST', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _REBATE;
  DAY_TRANSACTION_REPORTField get REBATE {
    return _REBATE = _setField(_REBATE, 'REBATE', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _BAL_AMT;
  DAY_TRANSACTION_REPORTField get BAL_AMT {
    return _BAL_AMT = _setField(_BAL_AMT, 'BAL_AMT', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _PAYMENT_MODE;
  DAY_TRANSACTION_REPORTField get PAYMENT_MODE {
    return _PAYMENT_MODE =
        _setField(_PAYMENT_MODE, 'PAYMENT_MODE', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _CGST;
  DAY_TRANSACTION_REPORTField get CGST {
    return _CGST = _setField(_CGST, 'CGST', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _SGST;
  DAY_TRANSACTION_REPORTField get SGST {
    return _SGST = _setField(_SGST, 'SGST', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _UGST;
  DAY_TRANSACTION_REPORTField get UGST {
    return _UGST = _setField(_UGST, 'UGST', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _TOTAL_GST;
  DAY_TRANSACTION_REPORTField get TOTAL_GST {
    return _TOTAL_GST = _setField(_TOTAL_GST, 'TOTAL_GST', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _GSTN_ID;
  DAY_TRANSACTION_REPORTField get GSTN_ID {
    return _GSTN_ID = _setField(_GSTN_ID, 'GSTN_ID', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _PAYMENT_CATEGORY;
  DAY_TRANSACTION_REPORTField get PAYMENT_CATEGORY {
    return _PAYMENT_CATEGORY =
        _setField(_PAYMENT_CATEGORY, 'PAYMENT_CATEGORY', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _PREM_AMNT;
  DAY_TRANSACTION_REPORTField get PREM_AMNT {
    return _PREM_AMNT = _setField(_PREM_AMNT, 'PREM_AMNT', DbType.text);
  }

  DAY_TRANSACTION_REPORTField? _DEFAULT_FEE;
  DAY_TRANSACTION_REPORTField get DEFAULT_FEE {
    return _DEFAULT_FEE = _setField(_DEFAULT_FEE, 'DEFAULT_FEE', DbType.text);
  }

  /// Deletes List<DAY_TRANSACTION_REPORT> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnDAY_TRANSACTION_REPORT!
          .updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnDAY_TRANSACTION_REPORT!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'RECEIPT_NO IN (SELECT RECEIPT_NO from DAY_TRANSACTION_REPORT ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnDAY_TRANSACTION_REPORT!.updateBatch(qparams, values);
  }

  /// This method always returns [DAY_TRANSACTION_REPORT] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> DAY_TRANSACTION_REPORT?
  @override
  Future<DAY_TRANSACTION_REPORT?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnDAY_TRANSACTION_REPORT!.toList(qparams);
    final data = await objFuture;
    DAY_TRANSACTION_REPORT? obj;
    if (data.isNotEmpty) {
      obj = DAY_TRANSACTION_REPORT.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [DAY_TRANSACTION_REPORT]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> DAY_TRANSACTION_REPORT?
  @override
  Future<DAY_TRANSACTION_REPORT> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        DAY_TRANSACTION_REPORT();
  }

  /// This method returns int. [DAY_TRANSACTION_REPORT]
  /// <returns>int
  @override
  Future<int> toCount(
      [VoidCallback Function(int c)? day_transaction_reportCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final day_transaction_reportsFuture =
        await _mnDAY_TRANSACTION_REPORT!.toList(qparams);
    final int count = day_transaction_reportsFuture[0]['CNT'] as int;
    if (day_transaction_reportCount != null) {
      day_transaction_reportCount(count);
    }
    return count;
  }

  /// This method returns List<DAY_TRANSACTION_REPORT> [DAY_TRANSACTION_REPORT]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<DAY_TRANSACTION_REPORT>
  @override
  Future<List<DAY_TRANSACTION_REPORT>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<DAY_TRANSACTION_REPORT> day_transaction_reportsData =
        await DAY_TRANSACTION_REPORT.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return day_transaction_reportsData;
  }

  /// This method returns Json String [DAY_TRANSACTION_REPORT]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [DAY_TRANSACTION_REPORT]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [DAY_TRANSACTION_REPORT]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnDAY_TRANSACTION_REPORT!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [DAY_TRANSACTION_REPORT]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `RECEIPT_NO` FROM DAY_TRANSACTION_REPORT WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<String>.
  /// <returns>List<String>
  @override
  Future<List<String>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<String> RECEIPT_NOData = <String>[];
    qparams.selectColumns = ['RECEIPT_NO'];
    final RECEIPT_NOFuture = await _mnDAY_TRANSACTION_REPORT!.toList(qparams);

    final int count = RECEIPT_NOFuture.length;
    for (int i = 0; i < count; i++) {
      RECEIPT_NOData.add(RECEIPT_NOFuture[i]['RECEIPT_NO'] as String);
    }
    return RECEIPT_NOData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [DAY_TRANSACTION_REPORT]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnDAY_TRANSACTION_REPORT!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await DAY_TRANSACTION_REPORT.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnDAY_TRANSACTION_REPORT!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion DAY_TRANSACTION_REPORTFilterBuilder

// region DAY_TRANSACTION_REPORTFields
class DAY_TRANSACTION_REPORTFields {
  static TableField? _fRECEIPT_NO;
  static TableField get RECEIPT_NO {
    return _fRECEIPT_NO = _fRECEIPT_NO ??
        SqlSyntax.setField(_fRECEIPT_NO, 'receipt_no', DbType.integer);
  }

  static TableField? _fSTATUS;
  static TableField get STATUS {
    return _fSTATUS =
        _fSTATUS ?? SqlSyntax.setField(_fSTATUS, 'STATUS', DbType.text);
  }

  static TableField? _fTRAN_ID;
  static TableField get TRAN_ID {
    return _fTRAN_ID =
        _fTRAN_ID ?? SqlSyntax.setField(_fTRAN_ID, 'TRAN_ID', DbType.text);
  }

  static TableField? _fFROM_DATE;
  static TableField get FROM_DATE {
    return _fFROM_DATE = _fFROM_DATE ??
        SqlSyntax.setField(_fFROM_DATE, 'FROM_DATE', DbType.text);
  }

  static TableField? _fTO_DATE;
  static TableField get TO_DATE {
    return _fTO_DATE =
        _fTO_DATE ?? SqlSyntax.setField(_fTO_DATE, 'TO_DATE', DbType.text);
  }

  static TableField? _fTRAN_PAYMENT_TYPE;
  static TableField get TRAN_PAYMENT_TYPE {
    return _fTRAN_PAYMENT_TYPE = _fTRAN_PAYMENT_TYPE ??
        SqlSyntax.setField(
            _fTRAN_PAYMENT_TYPE, 'TRAN_PAYMENT_TYPE', DbType.text);
  }

  static TableField? _fPOLICY_NO;
  static TableField get POLICY_NO {
    return _fPOLICY_NO = _fPOLICY_NO ??
        SqlSyntax.setField(_fPOLICY_NO, 'POLICY_NO', DbType.text);
  }

  static TableField? _fPROPOSAL_NUM;
  static TableField get PROPOSAL_NUM {
    return _fPROPOSAL_NUM = _fPROPOSAL_NUM ??
        SqlSyntax.setField(_fPROPOSAL_NUM, 'PROPOSAL_NUM', DbType.text);
  }

  static TableField? _fR_CRE_TIME;
  static TableField get R_CRE_TIME {
    return _fR_CRE_TIME = _fR_CRE_TIME ??
        SqlSyntax.setField(_fR_CRE_TIME, 'R_CRE_TIME', DbType.text);
  }

  static TableField? _fPOLICY_TYPE;
  static TableField get POLICY_TYPE {
    return _fPOLICY_TYPE = _fPOLICY_TYPE ??
        SqlSyntax.setField(_fPOLICY_TYPE, 'POLICY_TYPE', DbType.text);
  }

  static TableField? _fTRAN_TYPE;
  static TableField get TRAN_TYPE {
    return _fTRAN_TYPE = _fTRAN_TYPE ??
        SqlSyntax.setField(_fTRAN_TYPE, 'TRAN_TYPE', DbType.text);
  }

  static TableField? _fTRAN_DATE;
  static TableField get TRAN_DATE {
    return _fTRAN_DATE = _fTRAN_DATE ??
        SqlSyntax.setField(_fTRAN_DATE, 'TRAN_DATE', DbType.text);
  }

  static TableField? _fOPERATOR_ID;
  static TableField get OPERATOR_ID {
    return _fOPERATOR_ID = _fOPERATOR_ID ??
        SqlSyntax.setField(_fOPERATOR_ID, 'OPERATOR_ID', DbType.text);
  }

  static TableField? _fAMOUNT;
  static TableField get AMOUNT {
    return _fAMOUNT =
        _fAMOUNT ?? SqlSyntax.setField(_fAMOUNT, 'AMOUNT', DbType.text);
  }

  static TableField? _fINTIAL_AMOUNT;
  static TableField get INTIAL_AMOUNT {
    return _fINTIAL_AMOUNT = _fINTIAL_AMOUNT ??
        SqlSyntax.setField(_fINTIAL_AMOUNT, 'INTIAL_AMOUNT', DbType.text);
  }

  static TableField? _fRENEWAL_AMOUNT;
  static TableField get RENEWAL_AMOUNT {
    return _fRENEWAL_AMOUNT = _fRENEWAL_AMOUNT ??
        SqlSyntax.setField(_fRENEWAL_AMOUNT, 'RENEWAL_AMOUNT', DbType.text);
  }

  static TableField? _fCREATED_DATE;
  static TableField get CREATED_DATE {
    return _fCREATED_DATE = _fCREATED_DATE ??
        SqlSyntax.setField(_fCREATED_DATE, 'CREATED_DATE', DbType.text);
  }

  static TableField? _fI_CGST;
  static TableField get I_CGST {
    return _fI_CGST =
        _fI_CGST ?? SqlSyntax.setField(_fI_CGST, 'I_CGST', DbType.text);
  }

  static TableField? _fI_SGST;
  static TableField get I_SGST {
    return _fI_SGST =
        _fI_SGST ?? SqlSyntax.setField(_fI_SGST, 'I_SGST', DbType.text);
  }

  static TableField? _fI_UGST;
  static TableField get I_UGST {
    return _fI_UGST =
        _fI_UGST ?? SqlSyntax.setField(_fI_UGST, 'I_UGST', DbType.text);
  }

  static TableField? _fR_CGST;
  static TableField get R_CGST {
    return _fR_CGST =
        _fR_CGST ?? SqlSyntax.setField(_fR_CGST, 'R_CGST', DbType.text);
  }

  static TableField? _fR_SGST;
  static TableField get R_SGST {
    return _fR_SGST =
        _fR_SGST ?? SqlSyntax.setField(_fR_SGST, 'R_SGST', DbType.text);
  }

  static TableField? _fR_UGST;
  static TableField get R_UGST {
    return _fR_UGST =
        _fR_UGST ?? SqlSyntax.setField(_fR_UGST, 'R_UGST', DbType.text);
  }

  static TableField? _fREBATE;
  static TableField get REBATE {
    return _fREBATE =
        _fREBATE ?? SqlSyntax.setField(_fREBATE, 'REBATE', DbType.text);
  }

  static TableField? _fBAL_AMT;
  static TableField get BAL_AMT {
    return _fBAL_AMT =
        _fBAL_AMT ?? SqlSyntax.setField(_fBAL_AMT, 'BAL_AMT', DbType.text);
  }

  static TableField? _fPAYMENT_MODE;
  static TableField get PAYMENT_MODE {
    return _fPAYMENT_MODE = _fPAYMENT_MODE ??
        SqlSyntax.setField(_fPAYMENT_MODE, 'PAYMENT_MODE', DbType.text);
  }

  static TableField? _fCGST;
  static TableField get CGST {
    return _fCGST = _fCGST ?? SqlSyntax.setField(_fCGST, 'CGST', DbType.text);
  }

  static TableField? _fSGST;
  static TableField get SGST {
    return _fSGST = _fSGST ?? SqlSyntax.setField(_fSGST, 'SGST', DbType.text);
  }

  static TableField? _fUGST;
  static TableField get UGST {
    return _fUGST = _fUGST ?? SqlSyntax.setField(_fUGST, 'UGST', DbType.text);
  }

  static TableField? _fTOTAL_GST;
  static TableField get TOTAL_GST {
    return _fTOTAL_GST = _fTOTAL_GST ??
        SqlSyntax.setField(_fTOTAL_GST, 'TOTAL_GST', DbType.text);
  }

  static TableField? _fGSTN_ID;
  static TableField get GSTN_ID {
    return _fGSTN_ID =
        _fGSTN_ID ?? SqlSyntax.setField(_fGSTN_ID, 'GSTN_ID', DbType.text);
  }

  static TableField? _fPAYMENT_CATEGORY;
  static TableField get PAYMENT_CATEGORY {
    return _fPAYMENT_CATEGORY = _fPAYMENT_CATEGORY ??
        SqlSyntax.setField(_fPAYMENT_CATEGORY, 'PAYMENT_CATEGORY', DbType.text);
  }

  static TableField? _fPREM_AMNT;
  static TableField get PREM_AMNT {
    return _fPREM_AMNT = _fPREM_AMNT ??
        SqlSyntax.setField(_fPREM_AMNT, 'PREM_AMNT', DbType.text);
  }

  static TableField? _fDEFAULT_FEE;
  static TableField get DEFAULT_FEE {
    return _fDEFAULT_FEE = _fDEFAULT_FEE ??
        SqlSyntax.setField(_fDEFAULT_FEE, 'DEFAULT_FEE', DbType.text);
  }
}
// endregion DAY_TRANSACTION_REPORTFields

//region DAY_TRANSACTION_REPORTManager
class DAY_TRANSACTION_REPORTManager extends SqfEntityProvider {
  DAY_TRANSACTION_REPORTManager()
      : super(InsTran(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'DAY_TRANSACTION_REPORT';
  static const List<String> _primaryKeyList = ['RECEIPT_NO'];
  static const String _whereStr = 'RECEIPT_NO=?';
}

//endregion DAY_TRANSACTION_REPORTManager
// region Ins_transaction
class Ins_transaction extends TableBase {
  Ins_transaction(
      {this.SNo,
      this.policyNumber,
      this.tranType,
      this.policyType,
      this.amount,
      this.tranDate,
      this.tranTime}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Ins_transaction.withFields(this.policyNumber, this.tranType, this.policyType,
      this.amount, this.tranDate, this.tranTime) {
    _setDefaultValues();
  }
  Ins_transaction.withId(this.SNo, this.policyNumber, this.tranType,
      this.policyType, this.amount, this.tranDate, this.tranTime) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Ins_transaction.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    SNo = int.tryParse(o['SNo'].toString());
    if (o['policyNumber'] != null) {
      policyNumber = o['policyNumber'].toString();
    }
    if (o['tranType'] != null) {
      tranType = o['tranType'].toString();
    }
    if (o['policyType'] != null) {
      policyType = o['policyType'].toString();
    }
    if (o['amount'] != null) {
      amount = o['amount'].toString();
    }
    if (o['tranDate'] != null) {
      tranDate = o['tranDate'].toString();
    }
    if (o['tranTime'] != null) {
      tranTime = o['tranTime'].toString();
    }
  }
  // FIELDS (Ins_transaction)
  int? SNo;
  String? policyNumber;
  String? tranType;
  String? policyType;
  String? amount;
  String? tranDate;
  String? tranTime;

  // end FIELDS (Ins_transaction)

  static const bool _softDeleteActivated = false;
  Ins_transactionManager? __mnIns_transaction;

  Ins_transactionManager get _mnIns_transaction {
    return __mnIns_transaction =
        __mnIns_transaction ?? Ins_transactionManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['SNo'] = SNo;
    if (policyNumber != null || !forView) {
      map['policyNumber'] = policyNumber;
    }
    if (tranType != null || !forView) {
      map['tranType'] = tranType;
    }
    if (policyType != null || !forView) {
      map['policyType'] = policyType;
    }
    if (amount != null || !forView) {
      map['amount'] = amount;
    }
    if (tranDate != null || !forView) {
      map['tranDate'] = tranDate;
    }
    if (tranTime != null || !forView) {
      map['tranTime'] = tranTime;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['SNo'] = SNo;
    if (policyNumber != null || !forView) {
      map['policyNumber'] = policyNumber;
    }
    if (tranType != null || !forView) {
      map['tranType'] = tranType;
    }
    if (policyType != null || !forView) {
      map['policyType'] = policyType;
    }
    if (amount != null || !forView) {
      map['amount'] = amount;
    }
    if (tranDate != null || !forView) {
      map['tranDate'] = tranDate;
    }
    if (tranTime != null || !forView) {
      map['tranTime'] = tranTime;
    }

    return map;
  }

  /// This method returns Json String [Ins_transaction]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Ins_transaction]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [policyNumber, tranType, policyType, amount, tranDate, tranTime];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      SNo,
      policyNumber,
      tranType,
      policyType,
      amount,
      tranDate,
      tranTime
    ];
  }

  static Future<List<Ins_transaction>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Ins_transaction.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Ins_transaction>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Ins_transaction>[];
    try {
      objList = list
          .map((ins_transaction) =>
              Ins_transaction.fromMap(ins_transaction as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Ins_transaction.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Ins_transaction>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Ins_transaction> objList = <Ins_transaction>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Ins_transaction.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Ins_transaction by ID if exist, otherwise returns null
  /// Primary Keys: int? SNo
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Ins_transaction] if exist, otherwise returns null
  Future<Ins_transaction?> getById(int? SNo,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (SNo == null) {
      return null;
    }
    Ins_transaction? obj;
    final data = await _mnIns_transaction.getById([SNo]);
    if (data.length != 0) {
      obj = Ins_transaction.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Ins_transaction) object. If the SNo field is null, saves as a new record and returns new SNo, if SNo is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns SNo
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (SNo == null || SNo == 0) {
      SNo = await _mnIns_transaction.insert(this, ignoreBatch);
    } else {
      await _mnIns_transaction.update(this);
    }

    return SNo;
  }

  /// Saves the (Ins_transaction) object. If the SNo field is null, saves as a new record and returns new SNo, if SNo is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns SNo
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (SNo == null || SNo == 0) {
      SNo = await _mnIns_transaction.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // SNo= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnIns_transaction.updateOrThrow(this);
    }

    return SNo;
  }

  /// saveAs Ins_transaction. Returns a new Primary Key value of Ins_transaction

  /// <returns>Returns a new Primary Key value of Ins_transaction
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    SNo = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Ins_transaction> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Ins_transaction> ins_transactions,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await InsTran().batchStart();
    for (final obj in ins_transactions) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await InsTran().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < ins_transactions.length; i++) {
        if (ins_transactions[i].SNo == null) {
          ins_transactions[i].SNo = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns SNo
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnIns_transaction.rawInsert(
          'INSERT OR REPLACE INTO ins_transactions (SNo, policyNumber, tranType, policyType, amount, tranDate, tranTime)  VALUES (?,?,?,?,?,?,?)',
          [SNo, policyNumber, tranType, policyType, amount, tranDate, tranTime],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Ins_transaction SNo=$SNo updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Ins_transaction SNo=$SNo did not update');
      }
      return SNo;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Ins_transaction Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns SNo
  @override
  Future<int?> upsert1({bool ignoreBatch = true}) async {
    try {
      final result = await _mnIns_transaction.rawInsert(
          'INSERT OR IGNORE INTO ins_transactions (SNo, policyNumber, tranType, policyType, amount, tranDate, tranTime)  VALUES (?,?,?,?,?,?,?)',
          [SNo, policyNumber, tranType, policyType, amount, tranDate, tranTime],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Ins_transaction SNo=$SNo updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Ins_transaction SNo=$SNo did not update');
      }
      return SNo;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Ins_transaction Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Ins_transaction>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Ins_transaction> ins_transactions,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnIns_transaction.rawInsertAll(
        'INSERT OR REPLACE INTO ins_transactions (SNo, policyNumber, tranType, policyType, amount, tranDate, tranTime)  VALUES (?,?,?,?,?,?,?)',
        ins_transactions,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Ins_transaction

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Ins_transaction invoked (SNo=$SNo)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnIns_transaction
          .delete(QueryParams(whereString: 'SNo=?', whereArguments: [SNo]));
    } else {
      return _mnIns_transaction.updateBatch(
          QueryParams(whereString: 'SNo=?', whereArguments: [SNo]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Ins_transaction] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  Ins_transactionFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Ins_transactionFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  Ins_transactionFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Ins_transactionFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      SNo = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion ins_transaction

// region Ins_transactionField
class Ins_transactionField extends FilterBase {
  Ins_transactionField(Ins_transactionFilterBuilder ins_transactionFB)
      : super(ins_transactionFB);

  @override
  Ins_transactionFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as Ins_transactionFilterBuilder;
  }

  @override
  Ins_transactionFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as Ins_transactionFilterBuilder;
  }

  @override
  Ins_transactionFilterBuilder isNull() {
    return super.isNull() as Ins_transactionFilterBuilder;
  }

  @override
  Ins_transactionFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as Ins_transactionFilterBuilder;
  }

  @override
  Ins_transactionFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as Ins_transactionFilterBuilder;
  }

  @override
  Ins_transactionFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as Ins_transactionFilterBuilder;
  }

  @override
  Ins_transactionFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as Ins_transactionFilterBuilder;
  }

  @override
  Ins_transactionFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as Ins_transactionFilterBuilder;
  }

  @override
  Ins_transactionFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as Ins_transactionFilterBuilder;
  }

  @override
  Ins_transactionFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as Ins_transactionFilterBuilder;
  }

  @override
  Ins_transactionFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as Ins_transactionFilterBuilder;
  }

  @override
  Ins_transactionFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as Ins_transactionFilterBuilder;
  }

  @override
  Ins_transactionField get not {
    return super.not as Ins_transactionField;
  }
}
// endregion Ins_transactionField

// region Ins_transactionFilterBuilder
class Ins_transactionFilterBuilder extends ConjunctionBase {
  Ins_transactionFilterBuilder(Ins_transaction obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnIns_transaction = obj._mnIns_transaction;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  Ins_transactionManager? _mnIns_transaction;

  /// put the sql keyword 'AND'
  @override
  Ins_transactionFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  Ins_transactionFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  Ins_transactionFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  Ins_transactionFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  Ins_transactionFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  Ins_transactionFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  Ins_transactionFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  Ins_transactionFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  Ins_transactionFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  Ins_transactionFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  Ins_transactionFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  Ins_transactionField _setField(
      Ins_transactionField? field, String colName, DbType dbtype) {
    return Ins_transactionField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  Ins_transactionField? _SNo;
  Ins_transactionField get SNo {
    return _SNo = _setField(_SNo, 'SNo', DbType.integer);
  }

  Ins_transactionField? _policyNumber;
  Ins_transactionField get policyNumber {
    return _policyNumber =
        _setField(_policyNumber, 'policyNumber', DbType.text);
  }

  Ins_transactionField? _tranType;
  Ins_transactionField get tranType {
    return _tranType = _setField(_tranType, 'tranType', DbType.text);
  }

  Ins_transactionField? _policyType;
  Ins_transactionField get policyType {
    return _policyType = _setField(_policyType, 'policyType', DbType.text);
  }

  Ins_transactionField? _amount;
  Ins_transactionField get amount {
    return _amount = _setField(_amount, 'amount', DbType.text);
  }

  Ins_transactionField? _tranDate;
  Ins_transactionField get tranDate {
    return _tranDate = _setField(_tranDate, 'tranDate', DbType.text);
  }

  Ins_transactionField? _tranTime;
  Ins_transactionField get tranTime {
    return _tranTime = _setField(_tranTime, 'tranTime', DbType.text);
  }

  /// Deletes List<Ins_transaction> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnIns_transaction!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnIns_transaction!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'SNo IN (SELECT SNo from ins_transactions ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnIns_transaction!.updateBatch(qparams, values);
  }

  /// This method always returns [Ins_transaction] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Ins_transaction?
  @override
  Future<Ins_transaction?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnIns_transaction!.toList(qparams);
    final data = await objFuture;
    Ins_transaction? obj;
    if (data.isNotEmpty) {
      obj = Ins_transaction.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Ins_transaction]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Ins_transaction?
  @override
  Future<Ins_transaction> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Ins_transaction();
  }

  /// This method returns int. [Ins_transaction]
  /// <returns>int
  @override
  Future<int> toCount(
      [VoidCallback Function(int c)? ins_transactionCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final ins_transactionsFuture = await _mnIns_transaction!.toList(qparams);
    final int count = ins_transactionsFuture[0]['CNT'] as int;
    if (ins_transactionCount != null) {
      ins_transactionCount(count);
    }
    return count;
  }

  /// This method returns List<Ins_transaction> [Ins_transaction]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Ins_transaction>
  @override
  Future<List<Ins_transaction>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Ins_transaction> ins_transactionsData =
        await Ins_transaction.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return ins_transactionsData;
  }

  /// This method returns Json String [Ins_transaction]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Ins_transaction]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Ins_transaction]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnIns_transaction!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Ins_transaction]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `SNo` FROM ins_transactions WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> SNoData = <int>[];
    qparams.selectColumns = ['SNo'];
    final SNoFuture = await _mnIns_transaction!.toList(qparams);

    final int count = SNoFuture.length;
    for (int i = 0; i < count; i++) {
      SNoData.add(SNoFuture[i]['SNo'] as int);
    }
    return SNoData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Ins_transaction]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnIns_transaction!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Ins_transaction.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnIns_transaction!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion Ins_transactionFilterBuilder

// region Ins_transactionFields
class Ins_transactionFields {
  static TableField? _fSNo;
  static TableField get SNo {
    return _fSNo = _fSNo ?? SqlSyntax.setField(_fSNo, 'sno', DbType.integer);
  }

  static TableField? _fPolicyNumber;
  static TableField get policyNumber {
    return _fPolicyNumber = _fPolicyNumber ??
        SqlSyntax.setField(_fPolicyNumber, 'policyNumber', DbType.text);
  }

  static TableField? _fTranType;
  static TableField get tranType {
    return _fTranType =
        _fTranType ?? SqlSyntax.setField(_fTranType, 'tranType', DbType.text);
  }

  static TableField? _fPolicyType;
  static TableField get policyType {
    return _fPolicyType = _fPolicyType ??
        SqlSyntax.setField(_fPolicyType, 'policyType', DbType.text);
  }

  static TableField? _fAmount;
  static TableField get amount {
    return _fAmount =
        _fAmount ?? SqlSyntax.setField(_fAmount, 'amount', DbType.text);
  }

  static TableField? _fTranDate;
  static TableField get tranDate {
    return _fTranDate =
        _fTranDate ?? SqlSyntax.setField(_fTranDate, 'tranDate', DbType.text);
  }

  static TableField? _fTranTime;
  static TableField get tranTime {
    return _fTranTime =
        _fTranTime ?? SqlSyntax.setField(_fTranTime, 'tranTime', DbType.text);
  }
}
// endregion Ins_transactionFields

//region Ins_transactionManager
class Ins_transactionManager extends SqfEntityProvider {
  Ins_transactionManager()
      : super(InsTran(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'ins_transactions';
  static const List<String> _primaryKeyList = ['SNo'];
  static const String _whereStr = 'SNo=?';
}

//endregion Ins_transactionManager
// region OfficeDetail
class OfficeDetail extends TableBase {
  OfficeDetail(
      {this.SNo,
      this.BOOFFICETYPE,
      this.dateTime,
      this.BOOFFICECODE,
      this.COOFFICETYPE,
      this.HOOFFICEADDRESS,
      this.HOOFFICECODE,
      this.HOOFFICETYPE,
      this.BOOFFICEADDRESS,
      this.OFFICECODE_6,
      this.OFFICECODE_4,
      this.OFFICECODE_5,
      this.OFFICECODE_2,
      this.OFFICECODE_3,
      this.OFFICECODE_1,
      this.POCode,
      this.OFFICETYPE_3,
      this.OFFICEADDRESS_4,
      this.OFFICEADDRESS_3,
      this.OFFICETYPE_4,
      this.OFFICETYPE_1,
      this.OFFICEADDRESS_6,
      this.OFFICETYPE_2,
      this.OFFICEADDRESS_5,
      this.COOFFICEADDRESS,
      this.OFFICEADDRESS_2,
      this.OFFICETYPE_5,
      this.COOFFICECODE,
      this.OFFICEADDRESS_1,
      this.OFFICETYPE_6}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  OfficeDetail.withFields(
      this.BOOFFICETYPE,
      this.dateTime,
      this.BOOFFICECODE,
      this.COOFFICETYPE,
      this.HOOFFICEADDRESS,
      this.HOOFFICECODE,
      this.HOOFFICETYPE,
      this.BOOFFICEADDRESS,
      this.OFFICECODE_6,
      this.OFFICECODE_4,
      this.OFFICECODE_5,
      this.OFFICECODE_2,
      this.OFFICECODE_3,
      this.OFFICECODE_1,
      this.POCode,
      this.OFFICETYPE_3,
      this.OFFICEADDRESS_4,
      this.OFFICEADDRESS_3,
      this.OFFICETYPE_4,
      this.OFFICETYPE_1,
      this.OFFICEADDRESS_6,
      this.OFFICETYPE_2,
      this.OFFICEADDRESS_5,
      this.COOFFICEADDRESS,
      this.OFFICEADDRESS_2,
      this.OFFICETYPE_5,
      this.COOFFICECODE,
      this.OFFICEADDRESS_1,
      this.OFFICETYPE_6) {
    _setDefaultValues();
  }
  OfficeDetail.withId(
      this.SNo,
      this.BOOFFICETYPE,
      this.dateTime,
      this.BOOFFICECODE,
      this.COOFFICETYPE,
      this.HOOFFICEADDRESS,
      this.HOOFFICECODE,
      this.HOOFFICETYPE,
      this.BOOFFICEADDRESS,
      this.OFFICECODE_6,
      this.OFFICECODE_4,
      this.OFFICECODE_5,
      this.OFFICECODE_2,
      this.OFFICECODE_3,
      this.OFFICECODE_1,
      this.POCode,
      this.OFFICETYPE_3,
      this.OFFICEADDRESS_4,
      this.OFFICEADDRESS_3,
      this.OFFICETYPE_4,
      this.OFFICETYPE_1,
      this.OFFICEADDRESS_6,
      this.OFFICETYPE_2,
      this.OFFICEADDRESS_5,
      this.COOFFICEADDRESS,
      this.OFFICEADDRESS_2,
      this.OFFICETYPE_5,
      this.COOFFICECODE,
      this.OFFICEADDRESS_1,
      this.OFFICETYPE_6) {
    _setDefaultValues();
  }
  // fromMap v2.0
  OfficeDetail.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    SNo = int.tryParse(o['SNo'].toString());
    if (o['BOOFFICETYPE'] != null) {
      BOOFFICETYPE = o['BOOFFICETYPE'].toString();
    }
    if (o['dateTime'] != null) {
      dateTime = o['dateTime'].toString();
    }
    if (o['BOOFFICECODE'] != null) {
      BOOFFICECODE = o['BOOFFICECODE'].toString();
    }
    if (o['COOFFICETYPE'] != null) {
      COOFFICETYPE = o['COOFFICETYPE'].toString();
    }
    if (o['HOOFFICEADDRESS'] != null) {
      HOOFFICEADDRESS = o['HOOFFICEADDRESS'].toString();
    }
    if (o['HOOFFICECODE'] != null) {
      HOOFFICECODE = o['HOOFFICECODE'].toString();
    }
    if (o['HOOFFICETYPE'] != null) {
      HOOFFICETYPE = o['HOOFFICETYPE'].toString();
    }
    if (o['BOOFFICEADDRESS'] != null) {
      BOOFFICEADDRESS = o['BOOFFICEADDRESS'].toString();
    }
    if (o['OFFICECODE_6'] != null) {
      OFFICECODE_6 = o['OFFICECODE_6'].toString();
    }
    if (o['OFFICECODE_4'] != null) {
      OFFICECODE_4 = o['OFFICECODE_4'].toString();
    }
    if (o['OFFICECODE_5'] != null) {
      OFFICECODE_5 = o['OFFICECODE_5'].toString();
    }
    if (o['OFFICECODE_2'] != null) {
      OFFICECODE_2 = o['OFFICECODE_2'].toString();
    }
    if (o['OFFICECODE_3'] != null) {
      OFFICECODE_3 = o['OFFICECODE_3'].toString();
    }
    if (o['OFFICECODE_1'] != null) {
      OFFICECODE_1 = o['OFFICECODE_1'].toString();
    }
    if (o['POCode'] != null) {
      POCode = o['POCode'].toString();
    }
    if (o['OFFICETYPE_3'] != null) {
      OFFICETYPE_3 = o['OFFICETYPE_3'].toString();
    }
    if (o['OFFICEADDRESS_4'] != null) {
      OFFICEADDRESS_4 = o['OFFICEADDRESS_4'].toString();
    }
    if (o['OFFICEADDRESS_3'] != null) {
      OFFICEADDRESS_3 = o['OFFICEADDRESS_3'].toString();
    }
    if (o['OFFICETYPE_4'] != null) {
      OFFICETYPE_4 = o['OFFICETYPE_4'].toString();
    }
    if (o['OFFICETYPE_1'] != null) {
      OFFICETYPE_1 = o['OFFICETYPE_1'].toString();
    }
    if (o['OFFICEADDRESS_6'] != null) {
      OFFICEADDRESS_6 = o['OFFICEADDRESS_6'].toString();
    }
    if (o['OFFICETYPE_2'] != null) {
      OFFICETYPE_2 = o['OFFICETYPE_2'].toString();
    }
    if (o['OFFICEADDRESS_5'] != null) {
      OFFICEADDRESS_5 = o['OFFICEADDRESS_5'].toString();
    }
    if (o['COOFFICEADDRESS'] != null) {
      COOFFICEADDRESS = o['COOFFICEADDRESS'].toString();
    }
    if (o['OFFICEADDRESS_2'] != null) {
      OFFICEADDRESS_2 = o['OFFICEADDRESS_2'].toString();
    }
    if (o['OFFICETYPE_5'] != null) {
      OFFICETYPE_5 = o['OFFICETYPE_5'].toString();
    }
    if (o['COOFFICECODE'] != null) {
      COOFFICECODE = o['COOFFICECODE'].toString();
    }
    if (o['OFFICEADDRESS_1'] != null) {
      OFFICEADDRESS_1 = o['OFFICEADDRESS_1'].toString();
    }
    if (o['OFFICETYPE_6'] != null) {
      OFFICETYPE_6 = o['OFFICETYPE_6'].toString();
    }
  }
  // FIELDS (OfficeDetail)
  int? SNo;
  String? BOOFFICETYPE;
  String? dateTime;
  String? BOOFFICECODE;
  String? COOFFICETYPE;
  String? HOOFFICEADDRESS;
  String? HOOFFICECODE;
  String? HOOFFICETYPE;
  String? BOOFFICEADDRESS;
  String? OFFICECODE_6;
  String? OFFICECODE_4;
  String? OFFICECODE_5;
  String? OFFICECODE_2;
  String? OFFICECODE_3;
  String? OFFICECODE_1;
  String? POCode;
  String? OFFICETYPE_3;
  String? OFFICEADDRESS_4;
  String? OFFICEADDRESS_3;
  String? OFFICETYPE_4;
  String? OFFICETYPE_1;
  String? OFFICEADDRESS_6;
  String? OFFICETYPE_2;
  String? OFFICEADDRESS_5;
  String? COOFFICEADDRESS;
  String? OFFICEADDRESS_2;
  String? OFFICETYPE_5;
  String? COOFFICECODE;
  String? OFFICEADDRESS_1;
  String? OFFICETYPE_6;

  // end FIELDS (OfficeDetail)

  static const bool _softDeleteActivated = false;
  OfficeDetailManager? __mnOfficeDetail;

  OfficeDetailManager get _mnOfficeDetail {
    return __mnOfficeDetail = __mnOfficeDetail ?? OfficeDetailManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['SNo'] = SNo;
    if (BOOFFICETYPE != null || !forView) {
      map['BOOFFICETYPE'] = BOOFFICETYPE;
    }
    if (dateTime != null || !forView) {
      map['dateTime'] = dateTime;
    }
    if (BOOFFICECODE != null || !forView) {
      map['BOOFFICECODE'] = BOOFFICECODE;
    }
    if (COOFFICETYPE != null || !forView) {
      map['COOFFICETYPE'] = COOFFICETYPE;
    }
    if (HOOFFICEADDRESS != null || !forView) {
      map['HOOFFICEADDRESS'] = HOOFFICEADDRESS;
    }
    if (HOOFFICECODE != null || !forView) {
      map['HOOFFICECODE'] = HOOFFICECODE;
    }
    if (HOOFFICETYPE != null || !forView) {
      map['HOOFFICETYPE'] = HOOFFICETYPE;
    }
    if (BOOFFICEADDRESS != null || !forView) {
      map['BOOFFICEADDRESS'] = BOOFFICEADDRESS;
    }
    if (OFFICECODE_6 != null || !forView) {
      map['OFFICECODE_6'] = OFFICECODE_6;
    }
    if (OFFICECODE_4 != null || !forView) {
      map['OFFICECODE_4'] = OFFICECODE_4;
    }
    if (OFFICECODE_5 != null || !forView) {
      map['OFFICECODE_5'] = OFFICECODE_5;
    }
    if (OFFICECODE_2 != null || !forView) {
      map['OFFICECODE_2'] = OFFICECODE_2;
    }
    if (OFFICECODE_3 != null || !forView) {
      map['OFFICECODE_3'] = OFFICECODE_3;
    }
    if (OFFICECODE_1 != null || !forView) {
      map['OFFICECODE_1'] = OFFICECODE_1;
    }
    if (POCode != null || !forView) {
      map['POCode'] = POCode;
    }
    if (OFFICETYPE_3 != null || !forView) {
      map['OFFICETYPE_3'] = OFFICETYPE_3;
    }
    if (OFFICEADDRESS_4 != null || !forView) {
      map['OFFICEADDRESS_4'] = OFFICEADDRESS_4;
    }
    if (OFFICEADDRESS_3 != null || !forView) {
      map['OFFICEADDRESS_3'] = OFFICEADDRESS_3;
    }
    if (OFFICETYPE_4 != null || !forView) {
      map['OFFICETYPE_4'] = OFFICETYPE_4;
    }
    if (OFFICETYPE_1 != null || !forView) {
      map['OFFICETYPE_1'] = OFFICETYPE_1;
    }
    if (OFFICEADDRESS_6 != null || !forView) {
      map['OFFICEADDRESS_6'] = OFFICEADDRESS_6;
    }
    if (OFFICETYPE_2 != null || !forView) {
      map['OFFICETYPE_2'] = OFFICETYPE_2;
    }
    if (OFFICEADDRESS_5 != null || !forView) {
      map['OFFICEADDRESS_5'] = OFFICEADDRESS_5;
    }
    if (COOFFICEADDRESS != null || !forView) {
      map['COOFFICEADDRESS'] = COOFFICEADDRESS;
    }
    if (OFFICEADDRESS_2 != null || !forView) {
      map['OFFICEADDRESS_2'] = OFFICEADDRESS_2;
    }
    if (OFFICETYPE_5 != null || !forView) {
      map['OFFICETYPE_5'] = OFFICETYPE_5;
    }
    if (COOFFICECODE != null || !forView) {
      map['COOFFICECODE'] = COOFFICECODE;
    }
    if (OFFICEADDRESS_1 != null || !forView) {
      map['OFFICEADDRESS_1'] = OFFICEADDRESS_1;
    }
    if (OFFICETYPE_6 != null || !forView) {
      map['OFFICETYPE_6'] = OFFICETYPE_6;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['SNo'] = SNo;
    if (BOOFFICETYPE != null || !forView) {
      map['BOOFFICETYPE'] = BOOFFICETYPE;
    }
    if (dateTime != null || !forView) {
      map['dateTime'] = dateTime;
    }
    if (BOOFFICECODE != null || !forView) {
      map['BOOFFICECODE'] = BOOFFICECODE;
    }
    if (COOFFICETYPE != null || !forView) {
      map['COOFFICETYPE'] = COOFFICETYPE;
    }
    if (HOOFFICEADDRESS != null || !forView) {
      map['HOOFFICEADDRESS'] = HOOFFICEADDRESS;
    }
    if (HOOFFICECODE != null || !forView) {
      map['HOOFFICECODE'] = HOOFFICECODE;
    }
    if (HOOFFICETYPE != null || !forView) {
      map['HOOFFICETYPE'] = HOOFFICETYPE;
    }
    if (BOOFFICEADDRESS != null || !forView) {
      map['BOOFFICEADDRESS'] = BOOFFICEADDRESS;
    }
    if (OFFICECODE_6 != null || !forView) {
      map['OFFICECODE_6'] = OFFICECODE_6;
    }
    if (OFFICECODE_4 != null || !forView) {
      map['OFFICECODE_4'] = OFFICECODE_4;
    }
    if (OFFICECODE_5 != null || !forView) {
      map['OFFICECODE_5'] = OFFICECODE_5;
    }
    if (OFFICECODE_2 != null || !forView) {
      map['OFFICECODE_2'] = OFFICECODE_2;
    }
    if (OFFICECODE_3 != null || !forView) {
      map['OFFICECODE_3'] = OFFICECODE_3;
    }
    if (OFFICECODE_1 != null || !forView) {
      map['OFFICECODE_1'] = OFFICECODE_1;
    }
    if (POCode != null || !forView) {
      map['POCode'] = POCode;
    }
    if (OFFICETYPE_3 != null || !forView) {
      map['OFFICETYPE_3'] = OFFICETYPE_3;
    }
    if (OFFICEADDRESS_4 != null || !forView) {
      map['OFFICEADDRESS_4'] = OFFICEADDRESS_4;
    }
    if (OFFICEADDRESS_3 != null || !forView) {
      map['OFFICEADDRESS_3'] = OFFICEADDRESS_3;
    }
    if (OFFICETYPE_4 != null || !forView) {
      map['OFFICETYPE_4'] = OFFICETYPE_4;
    }
    if (OFFICETYPE_1 != null || !forView) {
      map['OFFICETYPE_1'] = OFFICETYPE_1;
    }
    if (OFFICEADDRESS_6 != null || !forView) {
      map['OFFICEADDRESS_6'] = OFFICEADDRESS_6;
    }
    if (OFFICETYPE_2 != null || !forView) {
      map['OFFICETYPE_2'] = OFFICETYPE_2;
    }
    if (OFFICEADDRESS_5 != null || !forView) {
      map['OFFICEADDRESS_5'] = OFFICEADDRESS_5;
    }
    if (COOFFICEADDRESS != null || !forView) {
      map['COOFFICEADDRESS'] = COOFFICEADDRESS;
    }
    if (OFFICEADDRESS_2 != null || !forView) {
      map['OFFICEADDRESS_2'] = OFFICEADDRESS_2;
    }
    if (OFFICETYPE_5 != null || !forView) {
      map['OFFICETYPE_5'] = OFFICETYPE_5;
    }
    if (COOFFICECODE != null || !forView) {
      map['COOFFICECODE'] = COOFFICECODE;
    }
    if (OFFICEADDRESS_1 != null || !forView) {
      map['OFFICEADDRESS_1'] = OFFICEADDRESS_1;
    }
    if (OFFICETYPE_6 != null || !forView) {
      map['OFFICETYPE_6'] = OFFICETYPE_6;
    }

    return map;
  }

  /// This method returns Json String [OfficeDetail]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [OfficeDetail]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      BOOFFICETYPE,
      dateTime,
      BOOFFICECODE,
      COOFFICETYPE,
      HOOFFICEADDRESS,
      HOOFFICECODE,
      HOOFFICETYPE,
      BOOFFICEADDRESS,
      OFFICECODE_6,
      OFFICECODE_4,
      OFFICECODE_5,
      OFFICECODE_2,
      OFFICECODE_3,
      OFFICECODE_1,
      POCode,
      OFFICETYPE_3,
      OFFICEADDRESS_4,
      OFFICEADDRESS_3,
      OFFICETYPE_4,
      OFFICETYPE_1,
      OFFICEADDRESS_6,
      OFFICETYPE_2,
      OFFICEADDRESS_5,
      COOFFICEADDRESS,
      OFFICEADDRESS_2,
      OFFICETYPE_5,
      COOFFICECODE,
      OFFICEADDRESS_1,
      OFFICETYPE_6
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      SNo,
      BOOFFICETYPE,
      dateTime,
      BOOFFICECODE,
      COOFFICETYPE,
      HOOFFICEADDRESS,
      HOOFFICECODE,
      HOOFFICETYPE,
      BOOFFICEADDRESS,
      OFFICECODE_6,
      OFFICECODE_4,
      OFFICECODE_5,
      OFFICECODE_2,
      OFFICECODE_3,
      OFFICECODE_1,
      POCode,
      OFFICETYPE_3,
      OFFICEADDRESS_4,
      OFFICEADDRESS_3,
      OFFICETYPE_4,
      OFFICETYPE_1,
      OFFICEADDRESS_6,
      OFFICETYPE_2,
      OFFICEADDRESS_5,
      COOFFICEADDRESS,
      OFFICEADDRESS_2,
      OFFICETYPE_5,
      COOFFICECODE,
      OFFICEADDRESS_1,
      OFFICETYPE_6
    ];
  }

  static Future<List<OfficeDetail>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR OfficeDetail.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<OfficeDetail>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <OfficeDetail>[];
    try {
      objList = list
          .map((officedetail) =>
              OfficeDetail.fromMap(officedetail as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR OfficeDetail.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<OfficeDetail>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<OfficeDetail> objList = <OfficeDetail>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = OfficeDetail.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns OfficeDetail by ID if exist, otherwise returns null
  /// Primary Keys: int? SNo
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [OfficeDetail] if exist, otherwise returns null
  Future<OfficeDetail?> getById(int? SNo,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (SNo == null) {
      return null;
    }
    OfficeDetail? obj;
    final data = await _mnOfficeDetail.getById([SNo]);
    if (data.length != 0) {
      obj = OfficeDetail.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (OfficeDetail) object. If the SNo field is null, saves as a new record and returns new SNo, if SNo is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns SNo
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (SNo == null || SNo == 0) {
      SNo = await _mnOfficeDetail.insert(this, ignoreBatch);
    } else {
      await _mnOfficeDetail.update(this);
    }

    return SNo;
  }

  /// Saves the (OfficeDetail) object. If the SNo field is null, saves as a new record and returns new SNo, if SNo is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns SNo
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (SNo == null || SNo == 0) {
      SNo = await _mnOfficeDetail.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // SNo= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnOfficeDetail.updateOrThrow(this);
    }

    return SNo;
  }

  /// saveAs OfficeDetail. Returns a new Primary Key value of OfficeDetail

  /// <returns>Returns a new Primary Key value of OfficeDetail
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    SNo = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<OfficeDetail> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<OfficeDetail> officedetails,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await InsTran().batchStart();
    for (final obj in officedetails) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await InsTran().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < officedetails.length; i++) {
        if (officedetails[i].SNo == null) {
          officedetails[i].SNo = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns SNo
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnOfficeDetail.rawInsert(
          'INSERT OR REPLACE INTO officeDetails (SNo, BOOFFICETYPE, dateTime, BOOFFICECODE, COOFFICETYPE, HOOFFICEADDRESS, HOOFFICECODE, HOOFFICETYPE, BOOFFICEADDRESS, OFFICECODE_6, OFFICECODE_4, OFFICECODE_5, OFFICECODE_2, OFFICECODE_3, OFFICECODE_1, POCode, OFFICETYPE_3, OFFICEADDRESS_4, OFFICEADDRESS_3, OFFICETYPE_4, OFFICETYPE_1, OFFICEADDRESS_6, OFFICETYPE_2, OFFICEADDRESS_5, COOFFICEADDRESS, OFFICEADDRESS_2, OFFICETYPE_5, COOFFICECODE, OFFICEADDRESS_1, OFFICETYPE_6)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            SNo,
            BOOFFICETYPE,
            dateTime,
            BOOFFICECODE,
            COOFFICETYPE,
            HOOFFICEADDRESS,
            HOOFFICECODE,
            HOOFFICETYPE,
            BOOFFICEADDRESS,
            OFFICECODE_6,
            OFFICECODE_4,
            OFFICECODE_5,
            OFFICECODE_2,
            OFFICECODE_3,
            OFFICECODE_1,
            POCode,
            OFFICETYPE_3,
            OFFICEADDRESS_4,
            OFFICEADDRESS_3,
            OFFICETYPE_4,
            OFFICETYPE_1,
            OFFICEADDRESS_6,
            OFFICETYPE_2,
            OFFICEADDRESS_5,
            COOFFICEADDRESS,
            OFFICEADDRESS_2,
            OFFICETYPE_5,
            COOFFICECODE,
            OFFICEADDRESS_1,
            OFFICETYPE_6
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'OfficeDetail SNo=$SNo updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'OfficeDetail SNo=$SNo did not update');
      }
      return SNo;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'OfficeDetail Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns SNo
  @override
  Future<int?> upsert1({bool ignoreBatch = true}) async {
    try {
      final result = await _mnOfficeDetail.rawInsert(
          'INSERT OR IGNORE INTO officeDetails (SNo, BOOFFICETYPE, dateTime, BOOFFICECODE, COOFFICETYPE, HOOFFICEADDRESS, HOOFFICECODE, HOOFFICETYPE, BOOFFICEADDRESS, OFFICECODE_6, OFFICECODE_4, OFFICECODE_5, OFFICECODE_2, OFFICECODE_3, OFFICECODE_1, POCode, OFFICETYPE_3, OFFICEADDRESS_4, OFFICEADDRESS_3, OFFICETYPE_4, OFFICETYPE_1, OFFICEADDRESS_6, OFFICETYPE_2, OFFICEADDRESS_5, COOFFICEADDRESS, OFFICEADDRESS_2, OFFICETYPE_5, COOFFICECODE, OFFICEADDRESS_1, OFFICETYPE_6)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            SNo,
            BOOFFICETYPE,
            dateTime,
            BOOFFICECODE,
            COOFFICETYPE,
            HOOFFICEADDRESS,
            HOOFFICECODE,
            HOOFFICETYPE,
            BOOFFICEADDRESS,
            OFFICECODE_6,
            OFFICECODE_4,
            OFFICECODE_5,
            OFFICECODE_2,
            OFFICECODE_3,
            OFFICECODE_1,
            POCode,
            OFFICETYPE_3,
            OFFICEADDRESS_4,
            OFFICEADDRESS_3,
            OFFICETYPE_4,
            OFFICETYPE_1,
            OFFICEADDRESS_6,
            OFFICETYPE_2,
            OFFICEADDRESS_5,
            COOFFICEADDRESS,
            OFFICEADDRESS_2,
            OFFICETYPE_5,
            COOFFICECODE,
            OFFICEADDRESS_1,
            OFFICETYPE_6
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'OfficeDetail SNo=$SNo updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'OfficeDetail SNo=$SNo did not update');
      }
      return SNo;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'OfficeDetail Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<OfficeDetail>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<OfficeDetail> officedetails,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnOfficeDetail.rawInsertAll(
        'INSERT OR REPLACE INTO officeDetails (SNo, BOOFFICETYPE, dateTime, BOOFFICECODE, COOFFICETYPE, HOOFFICEADDRESS, HOOFFICECODE, HOOFFICETYPE, BOOFFICEADDRESS, OFFICECODE_6, OFFICECODE_4, OFFICECODE_5, OFFICECODE_2, OFFICECODE_3, OFFICECODE_1, POCode, OFFICETYPE_3, OFFICEADDRESS_4, OFFICEADDRESS_3, OFFICETYPE_4, OFFICETYPE_1, OFFICEADDRESS_6, OFFICETYPE_2, OFFICEADDRESS_5, COOFFICEADDRESS, OFFICEADDRESS_2, OFFICETYPE_5, COOFFICECODE, OFFICEADDRESS_1, OFFICETYPE_6)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
        officedetails,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes OfficeDetail

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete OfficeDetail invoked (SNo=$SNo)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnOfficeDetail
          .delete(QueryParams(whereString: 'SNo=?', whereArguments: [SNo]));
    } else {
      return _mnOfficeDetail.updateBatch(
          QueryParams(whereString: 'SNo=?', whereArguments: [SNo]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [OfficeDetail] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  OfficeDetailFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return OfficeDetailFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  OfficeDetailFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return OfficeDetailFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      SNo = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion officedetail

// region OfficeDetailField
class OfficeDetailField extends FilterBase {
  OfficeDetailField(OfficeDetailFilterBuilder officedetailFB)
      : super(officedetailFB);

  @override
  OfficeDetailFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as OfficeDetailFilterBuilder;
  }

  @override
  OfficeDetailFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as OfficeDetailFilterBuilder;
  }

  @override
  OfficeDetailFilterBuilder isNull() {
    return super.isNull() as OfficeDetailFilterBuilder;
  }

  @override
  OfficeDetailFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as OfficeDetailFilterBuilder;
  }

  @override
  OfficeDetailFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as OfficeDetailFilterBuilder;
  }

  @override
  OfficeDetailFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as OfficeDetailFilterBuilder;
  }

  @override
  OfficeDetailFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as OfficeDetailFilterBuilder;
  }

  @override
  OfficeDetailFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as OfficeDetailFilterBuilder;
  }

  @override
  OfficeDetailFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as OfficeDetailFilterBuilder;
  }

  @override
  OfficeDetailFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as OfficeDetailFilterBuilder;
  }

  @override
  OfficeDetailFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as OfficeDetailFilterBuilder;
  }

  @override
  OfficeDetailFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as OfficeDetailFilterBuilder;
  }

  @override
  OfficeDetailField get not {
    return super.not as OfficeDetailField;
  }
}
// endregion OfficeDetailField

// region OfficeDetailFilterBuilder
class OfficeDetailFilterBuilder extends ConjunctionBase {
  OfficeDetailFilterBuilder(OfficeDetail obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnOfficeDetail = obj._mnOfficeDetail;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  OfficeDetailManager? _mnOfficeDetail;

  /// put the sql keyword 'AND'
  @override
  OfficeDetailFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  OfficeDetailFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  OfficeDetailFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  OfficeDetailFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  OfficeDetailFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  OfficeDetailFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  OfficeDetailFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  OfficeDetailFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  OfficeDetailFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  OfficeDetailFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  OfficeDetailFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  OfficeDetailField _setField(
      OfficeDetailField? field, String colName, DbType dbtype) {
    return OfficeDetailField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  OfficeDetailField? _SNo;
  OfficeDetailField get SNo {
    return _SNo = _setField(_SNo, 'SNo', DbType.integer);
  }

  OfficeDetailField? _BOOFFICETYPE;
  OfficeDetailField get BOOFFICETYPE {
    return _BOOFFICETYPE =
        _setField(_BOOFFICETYPE, 'BOOFFICETYPE', DbType.text);
  }

  OfficeDetailField? _dateTime;
  OfficeDetailField get dateTime {
    return _dateTime = _setField(_dateTime, 'dateTime', DbType.text);
  }

  OfficeDetailField? _BOOFFICECODE;
  OfficeDetailField get BOOFFICECODE {
    return _BOOFFICECODE =
        _setField(_BOOFFICECODE, 'BOOFFICECODE', DbType.text);
  }

  OfficeDetailField? _COOFFICETYPE;
  OfficeDetailField get COOFFICETYPE {
    return _COOFFICETYPE =
        _setField(_COOFFICETYPE, 'COOFFICETYPE', DbType.text);
  }

  OfficeDetailField? _HOOFFICEADDRESS;
  OfficeDetailField get HOOFFICEADDRESS {
    return _HOOFFICEADDRESS =
        _setField(_HOOFFICEADDRESS, 'HOOFFICEADDRESS', DbType.text);
  }

  OfficeDetailField? _HOOFFICECODE;
  OfficeDetailField get HOOFFICECODE {
    return _HOOFFICECODE =
        _setField(_HOOFFICECODE, 'HOOFFICECODE', DbType.text);
  }

  OfficeDetailField? _HOOFFICETYPE;
  OfficeDetailField get HOOFFICETYPE {
    return _HOOFFICETYPE =
        _setField(_HOOFFICETYPE, 'HOOFFICETYPE', DbType.text);
  }

  OfficeDetailField? _BOOFFICEADDRESS;
  OfficeDetailField get BOOFFICEADDRESS {
    return _BOOFFICEADDRESS =
        _setField(_BOOFFICEADDRESS, 'BOOFFICEADDRESS', DbType.text);
  }

  OfficeDetailField? _OFFICECODE_6;
  OfficeDetailField get OFFICECODE_6 {
    return _OFFICECODE_6 =
        _setField(_OFFICECODE_6, 'OFFICECODE_6', DbType.text);
  }

  OfficeDetailField? _OFFICECODE_4;
  OfficeDetailField get OFFICECODE_4 {
    return _OFFICECODE_4 =
        _setField(_OFFICECODE_4, 'OFFICECODE_4', DbType.text);
  }

  OfficeDetailField? _OFFICECODE_5;
  OfficeDetailField get OFFICECODE_5 {
    return _OFFICECODE_5 =
        _setField(_OFFICECODE_5, 'OFFICECODE_5', DbType.text);
  }

  OfficeDetailField? _OFFICECODE_2;
  OfficeDetailField get OFFICECODE_2 {
    return _OFFICECODE_2 =
        _setField(_OFFICECODE_2, 'OFFICECODE_2', DbType.text);
  }

  OfficeDetailField? _OFFICECODE_3;
  OfficeDetailField get OFFICECODE_3 {
    return _OFFICECODE_3 =
        _setField(_OFFICECODE_3, 'OFFICECODE_3', DbType.text);
  }

  OfficeDetailField? _OFFICECODE_1;
  OfficeDetailField get OFFICECODE_1 {
    return _OFFICECODE_1 =
        _setField(_OFFICECODE_1, 'OFFICECODE_1', DbType.text);
  }

  OfficeDetailField? _POCode;
  OfficeDetailField get POCode {
    return _POCode = _setField(_POCode, 'POCode', DbType.text);
  }

  OfficeDetailField? _OFFICETYPE_3;
  OfficeDetailField get OFFICETYPE_3 {
    return _OFFICETYPE_3 =
        _setField(_OFFICETYPE_3, 'OFFICETYPE_3', DbType.text);
  }

  OfficeDetailField? _OFFICEADDRESS_4;
  OfficeDetailField get OFFICEADDRESS_4 {
    return _OFFICEADDRESS_4 =
        _setField(_OFFICEADDRESS_4, 'OFFICEADDRESS_4', DbType.text);
  }

  OfficeDetailField? _OFFICEADDRESS_3;
  OfficeDetailField get OFFICEADDRESS_3 {
    return _OFFICEADDRESS_3 =
        _setField(_OFFICEADDRESS_3, 'OFFICEADDRESS_3', DbType.text);
  }

  OfficeDetailField? _OFFICETYPE_4;
  OfficeDetailField get OFFICETYPE_4 {
    return _OFFICETYPE_4 =
        _setField(_OFFICETYPE_4, 'OFFICETYPE_4', DbType.text);
  }

  OfficeDetailField? _OFFICETYPE_1;
  OfficeDetailField get OFFICETYPE_1 {
    return _OFFICETYPE_1 =
        _setField(_OFFICETYPE_1, 'OFFICETYPE_1', DbType.text);
  }

  OfficeDetailField? _OFFICEADDRESS_6;
  OfficeDetailField get OFFICEADDRESS_6 {
    return _OFFICEADDRESS_6 =
        _setField(_OFFICEADDRESS_6, 'OFFICEADDRESS_6', DbType.text);
  }

  OfficeDetailField? _OFFICETYPE_2;
  OfficeDetailField get OFFICETYPE_2 {
    return _OFFICETYPE_2 =
        _setField(_OFFICETYPE_2, 'OFFICETYPE_2', DbType.text);
  }

  OfficeDetailField? _OFFICEADDRESS_5;
  OfficeDetailField get OFFICEADDRESS_5 {
    return _OFFICEADDRESS_5 =
        _setField(_OFFICEADDRESS_5, 'OFFICEADDRESS_5', DbType.text);
  }

  OfficeDetailField? _COOFFICEADDRESS;
  OfficeDetailField get COOFFICEADDRESS {
    return _COOFFICEADDRESS =
        _setField(_COOFFICEADDRESS, 'COOFFICEADDRESS', DbType.text);
  }

  OfficeDetailField? _OFFICEADDRESS_2;
  OfficeDetailField get OFFICEADDRESS_2 {
    return _OFFICEADDRESS_2 =
        _setField(_OFFICEADDRESS_2, 'OFFICEADDRESS_2', DbType.text);
  }

  OfficeDetailField? _OFFICETYPE_5;
  OfficeDetailField get OFFICETYPE_5 {
    return _OFFICETYPE_5 =
        _setField(_OFFICETYPE_5, 'OFFICETYPE_5', DbType.text);
  }

  OfficeDetailField? _COOFFICECODE;
  OfficeDetailField get COOFFICECODE {
    return _COOFFICECODE =
        _setField(_COOFFICECODE, 'COOFFICECODE', DbType.text);
  }

  OfficeDetailField? _OFFICEADDRESS_1;
  OfficeDetailField get OFFICEADDRESS_1 {
    return _OFFICEADDRESS_1 =
        _setField(_OFFICEADDRESS_1, 'OFFICEADDRESS_1', DbType.text);
  }

  OfficeDetailField? _OFFICETYPE_6;
  OfficeDetailField get OFFICETYPE_6 {
    return _OFFICETYPE_6 =
        _setField(_OFFICETYPE_6, 'OFFICETYPE_6', DbType.text);
  }

  /// Deletes List<OfficeDetail> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnOfficeDetail!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnOfficeDetail!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'SNo IN (SELECT SNo from officeDetails ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnOfficeDetail!.updateBatch(qparams, values);
  }

  /// This method always returns [OfficeDetail] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> OfficeDetail?
  @override
  Future<OfficeDetail?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnOfficeDetail!.toList(qparams);
    final data = await objFuture;
    OfficeDetail? obj;
    if (data.isNotEmpty) {
      obj = OfficeDetail.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [OfficeDetail]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> OfficeDetail?
  @override
  Future<OfficeDetail> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        OfficeDetail();
  }

  /// This method returns int. [OfficeDetail]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? officedetailCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final officedetailsFuture = await _mnOfficeDetail!.toList(qparams);
    final int count = officedetailsFuture[0]['CNT'] as int;
    if (officedetailCount != null) {
      officedetailCount(count);
    }
    return count;
  }

  /// This method returns List<OfficeDetail> [OfficeDetail]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<OfficeDetail>
  @override
  Future<List<OfficeDetail>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<OfficeDetail> officedetailsData = await OfficeDetail.fromMapList(
        data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return officedetailsData;
  }

  /// This method returns Json String [OfficeDetail]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [OfficeDetail]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [OfficeDetail]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnOfficeDetail!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [OfficeDetail]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `SNo` FROM officeDetails WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> SNoData = <int>[];
    qparams.selectColumns = ['SNo'];
    final SNoFuture = await _mnOfficeDetail!.toList(qparams);

    final int count = SNoFuture.length;
    for (int i = 0; i < count; i++) {
      SNoData.add(SNoFuture[i]['SNo'] as int);
    }
    return SNoData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [OfficeDetail]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnOfficeDetail!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await OfficeDetail.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnOfficeDetail!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion OfficeDetailFilterBuilder

// region OfficeDetailFields
class OfficeDetailFields {
  static TableField? _fSNo;
  static TableField get SNo {
    return _fSNo = _fSNo ?? SqlSyntax.setField(_fSNo, 'sno', DbType.integer);
  }

  static TableField? _fBOOFFICETYPE;
  static TableField get BOOFFICETYPE {
    return _fBOOFFICETYPE = _fBOOFFICETYPE ??
        SqlSyntax.setField(_fBOOFFICETYPE, 'BOOFFICETYPE', DbType.text);
  }

  static TableField? _fDateTime;
  static TableField get dateTime {
    return _fDateTime =
        _fDateTime ?? SqlSyntax.setField(_fDateTime, 'dateTime', DbType.text);
  }

  static TableField? _fBOOFFICECODE;
  static TableField get BOOFFICECODE {
    return _fBOOFFICECODE = _fBOOFFICECODE ??
        SqlSyntax.setField(_fBOOFFICECODE, 'BOOFFICECODE', DbType.text);
  }

  static TableField? _fCOOFFICETYPE;
  static TableField get COOFFICETYPE {
    return _fCOOFFICETYPE = _fCOOFFICETYPE ??
        SqlSyntax.setField(_fCOOFFICETYPE, 'COOFFICETYPE', DbType.text);
  }

  static TableField? _fHOOFFICEADDRESS;
  static TableField get HOOFFICEADDRESS {
    return _fHOOFFICEADDRESS = _fHOOFFICEADDRESS ??
        SqlSyntax.setField(_fHOOFFICEADDRESS, 'HOOFFICEADDRESS', DbType.text);
  }

  static TableField? _fHOOFFICECODE;
  static TableField get HOOFFICECODE {
    return _fHOOFFICECODE = _fHOOFFICECODE ??
        SqlSyntax.setField(_fHOOFFICECODE, 'HOOFFICECODE', DbType.text);
  }

  static TableField? _fHOOFFICETYPE;
  static TableField get HOOFFICETYPE {
    return _fHOOFFICETYPE = _fHOOFFICETYPE ??
        SqlSyntax.setField(_fHOOFFICETYPE, 'HOOFFICETYPE', DbType.text);
  }

  static TableField? _fBOOFFICEADDRESS;
  static TableField get BOOFFICEADDRESS {
    return _fBOOFFICEADDRESS = _fBOOFFICEADDRESS ??
        SqlSyntax.setField(_fBOOFFICEADDRESS, 'BOOFFICEADDRESS', DbType.text);
  }

  static TableField? _fOFFICECODE_6;
  static TableField get OFFICECODE_6 {
    return _fOFFICECODE_6 = _fOFFICECODE_6 ??
        SqlSyntax.setField(_fOFFICECODE_6, 'OFFICECODE_6', DbType.text);
  }

  static TableField? _fOFFICECODE_4;
  static TableField get OFFICECODE_4 {
    return _fOFFICECODE_4 = _fOFFICECODE_4 ??
        SqlSyntax.setField(_fOFFICECODE_4, 'OFFICECODE_4', DbType.text);
  }

  static TableField? _fOFFICECODE_5;
  static TableField get OFFICECODE_5 {
    return _fOFFICECODE_5 = _fOFFICECODE_5 ??
        SqlSyntax.setField(_fOFFICECODE_5, 'OFFICECODE_5', DbType.text);
  }

  static TableField? _fOFFICECODE_2;
  static TableField get OFFICECODE_2 {
    return _fOFFICECODE_2 = _fOFFICECODE_2 ??
        SqlSyntax.setField(_fOFFICECODE_2, 'OFFICECODE_2', DbType.text);
  }

  static TableField? _fOFFICECODE_3;
  static TableField get OFFICECODE_3 {
    return _fOFFICECODE_3 = _fOFFICECODE_3 ??
        SqlSyntax.setField(_fOFFICECODE_3, 'OFFICECODE_3', DbType.text);
  }

  static TableField? _fOFFICECODE_1;
  static TableField get OFFICECODE_1 {
    return _fOFFICECODE_1 = _fOFFICECODE_1 ??
        SqlSyntax.setField(_fOFFICECODE_1, 'OFFICECODE_1', DbType.text);
  }

  static TableField? _fPOCode;
  static TableField get POCode {
    return _fPOCode =
        _fPOCode ?? SqlSyntax.setField(_fPOCode, 'POCode', DbType.text);
  }

  static TableField? _fOFFICETYPE_3;
  static TableField get OFFICETYPE_3 {
    return _fOFFICETYPE_3 = _fOFFICETYPE_3 ??
        SqlSyntax.setField(_fOFFICETYPE_3, 'OFFICETYPE_3', DbType.text);
  }

  static TableField? _fOFFICEADDRESS_4;
  static TableField get OFFICEADDRESS_4 {
    return _fOFFICEADDRESS_4 = _fOFFICEADDRESS_4 ??
        SqlSyntax.setField(_fOFFICEADDRESS_4, 'OFFICEADDRESS_4', DbType.text);
  }

  static TableField? _fOFFICEADDRESS_3;
  static TableField get OFFICEADDRESS_3 {
    return _fOFFICEADDRESS_3 = _fOFFICEADDRESS_3 ??
        SqlSyntax.setField(_fOFFICEADDRESS_3, 'OFFICEADDRESS_3', DbType.text);
  }

  static TableField? _fOFFICETYPE_4;
  static TableField get OFFICETYPE_4 {
    return _fOFFICETYPE_4 = _fOFFICETYPE_4 ??
        SqlSyntax.setField(_fOFFICETYPE_4, 'OFFICETYPE_4', DbType.text);
  }

  static TableField? _fOFFICETYPE_1;
  static TableField get OFFICETYPE_1 {
    return _fOFFICETYPE_1 = _fOFFICETYPE_1 ??
        SqlSyntax.setField(_fOFFICETYPE_1, 'OFFICETYPE_1', DbType.text);
  }

  static TableField? _fOFFICEADDRESS_6;
  static TableField get OFFICEADDRESS_6 {
    return _fOFFICEADDRESS_6 = _fOFFICEADDRESS_6 ??
        SqlSyntax.setField(_fOFFICEADDRESS_6, 'OFFICEADDRESS_6', DbType.text);
  }

  static TableField? _fOFFICETYPE_2;
  static TableField get OFFICETYPE_2 {
    return _fOFFICETYPE_2 = _fOFFICETYPE_2 ??
        SqlSyntax.setField(_fOFFICETYPE_2, 'OFFICETYPE_2', DbType.text);
  }

  static TableField? _fOFFICEADDRESS_5;
  static TableField get OFFICEADDRESS_5 {
    return _fOFFICEADDRESS_5 = _fOFFICEADDRESS_5 ??
        SqlSyntax.setField(_fOFFICEADDRESS_5, 'OFFICEADDRESS_5', DbType.text);
  }

  static TableField? _fCOOFFICEADDRESS;
  static TableField get COOFFICEADDRESS {
    return _fCOOFFICEADDRESS = _fCOOFFICEADDRESS ??
        SqlSyntax.setField(_fCOOFFICEADDRESS, 'COOFFICEADDRESS', DbType.text);
  }

  static TableField? _fOFFICEADDRESS_2;
  static TableField get OFFICEADDRESS_2 {
    return _fOFFICEADDRESS_2 = _fOFFICEADDRESS_2 ??
        SqlSyntax.setField(_fOFFICEADDRESS_2, 'OFFICEADDRESS_2', DbType.text);
  }

  static TableField? _fOFFICETYPE_5;
  static TableField get OFFICETYPE_5 {
    return _fOFFICETYPE_5 = _fOFFICETYPE_5 ??
        SqlSyntax.setField(_fOFFICETYPE_5, 'OFFICETYPE_5', DbType.text);
  }

  static TableField? _fCOOFFICECODE;
  static TableField get COOFFICECODE {
    return _fCOOFFICECODE = _fCOOFFICECODE ??
        SqlSyntax.setField(_fCOOFFICECODE, 'COOFFICECODE', DbType.text);
  }

  static TableField? _fOFFICEADDRESS_1;
  static TableField get OFFICEADDRESS_1 {
    return _fOFFICEADDRESS_1 = _fOFFICEADDRESS_1 ??
        SqlSyntax.setField(_fOFFICEADDRESS_1, 'OFFICEADDRESS_1', DbType.text);
  }

  static TableField? _fOFFICETYPE_6;
  static TableField get OFFICETYPE_6 {
    return _fOFFICETYPE_6 = _fOFFICETYPE_6 ??
        SqlSyntax.setField(_fOFFICETYPE_6, 'OFFICETYPE_6', DbType.text);
  }
}
// endregion OfficeDetailFields

//region OfficeDetailManager
class OfficeDetailManager extends SqfEntityProvider {
  OfficeDetailManager()
      : super(InsTran(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'officeDetails';
  static const List<String> _primaryKeyList = ['SNo'];
  static const String _whereStr = 'SNo=?';
}

//endregion OfficeDetailManager
// region INS_ERROR_CODES
class INS_ERROR_CODES extends TableBase {
  INS_ERROR_CODES({this.SNo, this.Error_code, this.Error_message}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  INS_ERROR_CODES.withFields(this.Error_code, this.Error_message) {
    _setDefaultValues();
  }
  INS_ERROR_CODES.withId(this.SNo, this.Error_code, this.Error_message) {
    _setDefaultValues();
  }
  // fromMap v2.0
  INS_ERROR_CODES.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    SNo = int.tryParse(o['SNo'].toString());
    if (o['Error_code'] != null) {
      Error_code = o['Error_code'].toString();
    }
    if (o['Error_message'] != null) {
      Error_message = o['Error_message'].toString();
    }
  }
  // FIELDS (INS_ERROR_CODES)
  int? SNo;
  String? Error_code;
  String? Error_message;

  // end FIELDS (INS_ERROR_CODES)

  static const bool _softDeleteActivated = false;
  INS_ERROR_CODESManager? __mnINS_ERROR_CODES;

  INS_ERROR_CODESManager get _mnINS_ERROR_CODES {
    return __mnINS_ERROR_CODES =
        __mnINS_ERROR_CODES ?? INS_ERROR_CODESManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['SNo'] = SNo;
    if (Error_code != null || !forView) {
      map['Error_code'] = Error_code;
    }
    if (Error_message != null || !forView) {
      map['Error_message'] = Error_message;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['SNo'] = SNo;
    if (Error_code != null || !forView) {
      map['Error_code'] = Error_code;
    }
    if (Error_message != null || !forView) {
      map['Error_message'] = Error_message;
    }

    return map;
  }

  /// This method returns Json String [INS_ERROR_CODES]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [INS_ERROR_CODES]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [Error_code, Error_message];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [SNo, Error_code, Error_message];
  }

  static Future<List<INS_ERROR_CODES>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR INS_ERROR_CODES.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<INS_ERROR_CODES>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <INS_ERROR_CODES>[];
    try {
      objList = list
          .map((ins_error_codes) =>
              INS_ERROR_CODES.fromMap(ins_error_codes as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR INS_ERROR_CODES.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<INS_ERROR_CODES>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<INS_ERROR_CODES> objList = <INS_ERROR_CODES>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = INS_ERROR_CODES.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns INS_ERROR_CODES by ID if exist, otherwise returns null
  /// Primary Keys: int? SNo
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [INS_ERROR_CODES] if exist, otherwise returns null
  Future<INS_ERROR_CODES?> getById(int? SNo,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (SNo == null) {
      return null;
    }
    INS_ERROR_CODES? obj;
    final data = await _mnINS_ERROR_CODES.getById([SNo]);
    if (data.length != 0) {
      obj = INS_ERROR_CODES.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (INS_ERROR_CODES) object. If the SNo field is null, saves as a new record and returns new SNo, if SNo is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns SNo
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (SNo == null || SNo == 0) {
      SNo = await _mnINS_ERROR_CODES.insert(this, ignoreBatch);
    } else {
      await _mnINS_ERROR_CODES.update(this);
    }

    return SNo;
  }

  /// Saves the (INS_ERROR_CODES) object. If the SNo field is null, saves as a new record and returns new SNo, if SNo is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns SNo
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (SNo == null || SNo == 0) {
      SNo = await _mnINS_ERROR_CODES.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // SNo= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnINS_ERROR_CODES.updateOrThrow(this);
    }

    return SNo;
  }

  /// saveAs INS_ERROR_CODES. Returns a new Primary Key value of INS_ERROR_CODES

  /// <returns>Returns a new Primary Key value of INS_ERROR_CODES
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    SNo = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<INS_ERROR_CODES> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<INS_ERROR_CODES> ins_error_codeses,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await InsTran().batchStart();
    for (final obj in ins_error_codeses) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await InsTran().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < ins_error_codeses.length; i++) {
        if (ins_error_codeses[i].SNo == null) {
          ins_error_codeses[i].SNo = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns SNo
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnINS_ERROR_CODES.rawInsert(
          'INSERT OR REPLACE INTO INS_ERROR_CODES (SNo, Error_code, Error_message)  VALUES (?,?,?)',
          [SNo, Error_code, Error_message],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'INS_ERROR_CODES SNo=$SNo updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'INS_ERROR_CODES SNo=$SNo did not update');
      }
      return SNo;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'INS_ERROR_CODES Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns SNo
  @override
  Future<int?> upsert1({bool ignoreBatch = true}) async {
    try {
      final result = await _mnINS_ERROR_CODES.rawInsert(
          'INSERT OR IGNORE INTO INS_ERROR_CODES (SNo, Error_code, Error_message)  VALUES (?,?,?)',
          [SNo, Error_code, Error_message],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'INS_ERROR_CODES SNo=$SNo updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'INS_ERROR_CODES SNo=$SNo did not update');
      }
      return SNo;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'INS_ERROR_CODES Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<INS_ERROR_CODES>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<INS_ERROR_CODES> ins_error_codeses,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnINS_ERROR_CODES.rawInsertAll(
        'INSERT OR REPLACE INTO INS_ERROR_CODES (SNo, Error_code, Error_message)  VALUES (?,?,?)',
        ins_error_codeses,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes INS_ERROR_CODES

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete INS_ERROR_CODES invoked (SNo=$SNo)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnINS_ERROR_CODES
          .delete(QueryParams(whereString: 'SNo=?', whereArguments: [SNo]));
    } else {
      return _mnINS_ERROR_CODES.updateBatch(
          QueryParams(whereString: 'SNo=?', whereArguments: [SNo]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [INS_ERROR_CODES] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  INS_ERROR_CODESFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return INS_ERROR_CODESFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  INS_ERROR_CODESFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return INS_ERROR_CODESFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      SNo = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion ins_error_codes

// region INS_ERROR_CODESField
class INS_ERROR_CODESField extends FilterBase {
  INS_ERROR_CODESField(INS_ERROR_CODESFilterBuilder ins_error_codesFB)
      : super(ins_error_codesFB);

  @override
  INS_ERROR_CODESFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as INS_ERROR_CODESFilterBuilder;
  }

  @override
  INS_ERROR_CODESFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as INS_ERROR_CODESFilterBuilder;
  }

  @override
  INS_ERROR_CODESFilterBuilder isNull() {
    return super.isNull() as INS_ERROR_CODESFilterBuilder;
  }

  @override
  INS_ERROR_CODESFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as INS_ERROR_CODESFilterBuilder;
  }

  @override
  INS_ERROR_CODESFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as INS_ERROR_CODESFilterBuilder;
  }

  @override
  INS_ERROR_CODESFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as INS_ERROR_CODESFilterBuilder;
  }

  @override
  INS_ERROR_CODESFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as INS_ERROR_CODESFilterBuilder;
  }

  @override
  INS_ERROR_CODESFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as INS_ERROR_CODESFilterBuilder;
  }

  @override
  INS_ERROR_CODESFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as INS_ERROR_CODESFilterBuilder;
  }

  @override
  INS_ERROR_CODESFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as INS_ERROR_CODESFilterBuilder;
  }

  @override
  INS_ERROR_CODESFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as INS_ERROR_CODESFilterBuilder;
  }

  @override
  INS_ERROR_CODESFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as INS_ERROR_CODESFilterBuilder;
  }

  @override
  INS_ERROR_CODESField get not {
    return super.not as INS_ERROR_CODESField;
  }
}
// endregion INS_ERROR_CODESField

// region INS_ERROR_CODESFilterBuilder
class INS_ERROR_CODESFilterBuilder extends ConjunctionBase {
  INS_ERROR_CODESFilterBuilder(INS_ERROR_CODES obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnINS_ERROR_CODES = obj._mnINS_ERROR_CODES;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  INS_ERROR_CODESManager? _mnINS_ERROR_CODES;

  /// put the sql keyword 'AND'
  @override
  INS_ERROR_CODESFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  INS_ERROR_CODESFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  INS_ERROR_CODESFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  INS_ERROR_CODESFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  INS_ERROR_CODESFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  INS_ERROR_CODESFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  INS_ERROR_CODESFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  INS_ERROR_CODESFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  INS_ERROR_CODESFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  INS_ERROR_CODESFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  INS_ERROR_CODESFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  INS_ERROR_CODESField _setField(
      INS_ERROR_CODESField? field, String colName, DbType dbtype) {
    return INS_ERROR_CODESField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  INS_ERROR_CODESField? _SNo;
  INS_ERROR_CODESField get SNo {
    return _SNo = _setField(_SNo, 'SNo', DbType.integer);
  }

  INS_ERROR_CODESField? _Error_code;
  INS_ERROR_CODESField get Error_code {
    return _Error_code = _setField(_Error_code, 'Error_code', DbType.text);
  }

  INS_ERROR_CODESField? _Error_message;
  INS_ERROR_CODESField get Error_message {
    return _Error_message =
        _setField(_Error_message, 'Error_message', DbType.text);
  }

  /// Deletes List<INS_ERROR_CODES> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnINS_ERROR_CODES!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnINS_ERROR_CODES!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'SNo IN (SELECT SNo from INS_ERROR_CODES ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnINS_ERROR_CODES!.updateBatch(qparams, values);
  }

  /// This method always returns [INS_ERROR_CODES] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> INS_ERROR_CODES?
  @override
  Future<INS_ERROR_CODES?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnINS_ERROR_CODES!.toList(qparams);
    final data = await objFuture;
    INS_ERROR_CODES? obj;
    if (data.isNotEmpty) {
      obj = INS_ERROR_CODES.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [INS_ERROR_CODES]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> INS_ERROR_CODES?
  @override
  Future<INS_ERROR_CODES> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        INS_ERROR_CODES();
  }

  /// This method returns int. [INS_ERROR_CODES]
  /// <returns>int
  @override
  Future<int> toCount(
      [VoidCallback Function(int c)? ins_error_codesCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final ins_error_codesesFuture = await _mnINS_ERROR_CODES!.toList(qparams);
    final int count = ins_error_codesesFuture[0]['CNT'] as int;
    if (ins_error_codesCount != null) {
      ins_error_codesCount(count);
    }
    return count;
  }

  /// This method returns List<INS_ERROR_CODES> [INS_ERROR_CODES]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<INS_ERROR_CODES>
  @override
  Future<List<INS_ERROR_CODES>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<INS_ERROR_CODES> ins_error_codesesData =
        await INS_ERROR_CODES.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return ins_error_codesesData;
  }

  /// This method returns Json String [INS_ERROR_CODES]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [INS_ERROR_CODES]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [INS_ERROR_CODES]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnINS_ERROR_CODES!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [INS_ERROR_CODES]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `SNo` FROM INS_ERROR_CODES WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> SNoData = <int>[];
    qparams.selectColumns = ['SNo'];
    final SNoFuture = await _mnINS_ERROR_CODES!.toList(qparams);

    final int count = SNoFuture.length;
    for (int i = 0; i < count; i++) {
      SNoData.add(SNoFuture[i]['SNo'] as int);
    }
    return SNoData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [INS_ERROR_CODES]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnINS_ERROR_CODES!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await INS_ERROR_CODES.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnINS_ERROR_CODES!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion INS_ERROR_CODESFilterBuilder

// region INS_ERROR_CODESFields
class INS_ERROR_CODESFields {
  static TableField? _fSNo;
  static TableField get SNo {
    return _fSNo = _fSNo ?? SqlSyntax.setField(_fSNo, 'sno', DbType.integer);
  }

  static TableField? _fError_code;
  static TableField get Error_code {
    return _fError_code = _fError_code ??
        SqlSyntax.setField(_fError_code, 'Error_code', DbType.text);
  }

  static TableField? _fError_message;
  static TableField get Error_message {
    return _fError_message = _fError_message ??
        SqlSyntax.setField(_fError_message, 'Error_message', DbType.text);
  }
}
// endregion INS_ERROR_CODESFields

//region INS_ERROR_CODESManager
class INS_ERROR_CODESManager extends SqfEntityProvider {
  INS_ERROR_CODESManager()
      : super(InsTran(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'INS_ERROR_CODES';
  static const List<String> _primaryKeyList = ['SNo'];
  static const String _whereStr = 'SNo=?';
}

//endregion INS_ERROR_CODESManager
// region INS_CIRCLE_CODES
class INS_CIRCLE_CODES extends TableBase {
  INS_CIRCLE_CODES({this.SNo, this.Circle_code, this.CO_CODE}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  INS_CIRCLE_CODES.withFields(this.Circle_code, this.CO_CODE) {
    _setDefaultValues();
  }
  INS_CIRCLE_CODES.withId(this.SNo, this.Circle_code, this.CO_CODE) {
    _setDefaultValues();
  }
  // fromMap v2.0
  INS_CIRCLE_CODES.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    SNo = int.tryParse(o['SNo'].toString());
    if (o['Circle_code'] != null) {
      Circle_code = o['Circle_code'].toString();
    }
    if (o['CO_CODE'] != null) {
      CO_CODE = o['CO_CODE'].toString();
    }
  }
  // FIELDS (INS_CIRCLE_CODES)
  int? SNo;
  String? Circle_code;
  String? CO_CODE;

  // end FIELDS (INS_CIRCLE_CODES)

  static const bool _softDeleteActivated = false;
  INS_CIRCLE_CODESManager? __mnINS_CIRCLE_CODES;

  INS_CIRCLE_CODESManager get _mnINS_CIRCLE_CODES {
    return __mnINS_CIRCLE_CODES =
        __mnINS_CIRCLE_CODES ?? INS_CIRCLE_CODESManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['SNo'] = SNo;
    if (Circle_code != null || !forView) {
      map['Circle_code'] = Circle_code;
    }
    if (CO_CODE != null || !forView) {
      map['CO_CODE'] = CO_CODE;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['SNo'] = SNo;
    if (Circle_code != null || !forView) {
      map['Circle_code'] = Circle_code;
    }
    if (CO_CODE != null || !forView) {
      map['CO_CODE'] = CO_CODE;
    }

    return map;
  }

  /// This method returns Json String [INS_CIRCLE_CODES]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [INS_CIRCLE_CODES]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [Circle_code, CO_CODE];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [SNo, Circle_code, CO_CODE];
  }

  static Future<List<INS_CIRCLE_CODES>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR INS_CIRCLE_CODES.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<INS_CIRCLE_CODES>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <INS_CIRCLE_CODES>[];
    try {
      objList = list
          .map((ins_circle_codes) => INS_CIRCLE_CODES
              .fromMap(ins_circle_codes as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR INS_CIRCLE_CODES.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<INS_CIRCLE_CODES>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<INS_CIRCLE_CODES> objList = <INS_CIRCLE_CODES>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = INS_CIRCLE_CODES.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns INS_CIRCLE_CODES by ID if exist, otherwise returns null
  /// Primary Keys: int? SNo
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [INS_CIRCLE_CODES] if exist, otherwise returns null
  Future<INS_CIRCLE_CODES?> getById(int? SNo,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (SNo == null) {
      return null;
    }
    INS_CIRCLE_CODES? obj;
    final data = await _mnINS_CIRCLE_CODES.getById([SNo]);
    if (data.length != 0) {
      obj = INS_CIRCLE_CODES.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (INS_CIRCLE_CODES) object. If the SNo field is null, saves as a new record and returns new SNo, if SNo is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns SNo
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (SNo == null || SNo == 0) {
      SNo = await _mnINS_CIRCLE_CODES.insert(this, ignoreBatch);
    } else {
      await _mnINS_CIRCLE_CODES.update(this);
    }

    return SNo;
  }

  /// Saves the (INS_CIRCLE_CODES) object. If the SNo field is null, saves as a new record and returns new SNo, if SNo is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns SNo
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (SNo == null || SNo == 0) {
      SNo = await _mnINS_CIRCLE_CODES.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // SNo= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnINS_CIRCLE_CODES.updateOrThrow(this);
    }

    return SNo;
  }

  /// saveAs INS_CIRCLE_CODES. Returns a new Primary Key value of INS_CIRCLE_CODES

  /// <returns>Returns a new Primary Key value of INS_CIRCLE_CODES
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    SNo = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<INS_CIRCLE_CODES> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<INS_CIRCLE_CODES> ins_circle_codeses,
      {bool? exclusive,
      bool? noResult,
      bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await InsTran().batchStart();
    for (final obj in ins_circle_codeses) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await InsTran().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < ins_circle_codeses.length; i++) {
        if (ins_circle_codeses[i].SNo == null) {
          ins_circle_codeses[i].SNo = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns SNo
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnINS_CIRCLE_CODES.rawInsert(
          'INSERT OR REPLACE INTO INS_CIRCLE_CODES (SNo, Circle_code, CO_CODE)  VALUES (?,?,?)',
          [SNo, Circle_code, CO_CODE],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'INS_CIRCLE_CODES SNo=$SNo updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'INS_CIRCLE_CODES SNo=$SNo did not update');
      }
      return SNo;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'INS_CIRCLE_CODES Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns SNo
  @override
  Future<int?> upsert1({bool ignoreBatch = true}) async {
    try {
      final result = await _mnINS_CIRCLE_CODES.rawInsert(
          'INSERT OR IGNORE INTO INS_CIRCLE_CODES (SNo, Circle_code, CO_CODE)  VALUES (?,?,?)',
          [SNo, Circle_code, CO_CODE],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'INS_CIRCLE_CODES SNo=$SNo updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'INS_CIRCLE_CODES SNo=$SNo did not update');
      }
      return SNo;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'INS_CIRCLE_CODES Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<INS_CIRCLE_CODES>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<INS_CIRCLE_CODES> ins_circle_codeses,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnINS_CIRCLE_CODES.rawInsertAll(
        'INSERT OR REPLACE INTO INS_CIRCLE_CODES (SNo, Circle_code, CO_CODE)  VALUES (?,?,?)',
        ins_circle_codeses,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes INS_CIRCLE_CODES

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete INS_CIRCLE_CODES invoked (SNo=$SNo)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnINS_CIRCLE_CODES
          .delete(QueryParams(whereString: 'SNo=?', whereArguments: [SNo]));
    } else {
      return _mnINS_CIRCLE_CODES.updateBatch(
          QueryParams(whereString: 'SNo=?', whereArguments: [SNo]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [INS_CIRCLE_CODES] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  INS_CIRCLE_CODESFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return INS_CIRCLE_CODESFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  INS_CIRCLE_CODESFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return INS_CIRCLE_CODESFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      SNo = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion ins_circle_codes

// region INS_CIRCLE_CODESField
class INS_CIRCLE_CODESField extends FilterBase {
  INS_CIRCLE_CODESField(INS_CIRCLE_CODESFilterBuilder ins_circle_codesFB)
      : super(ins_circle_codesFB);

  @override
  INS_CIRCLE_CODESFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as INS_CIRCLE_CODESFilterBuilder;
  }

  @override
  INS_CIRCLE_CODESFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as INS_CIRCLE_CODESFilterBuilder;
  }

  @override
  INS_CIRCLE_CODESFilterBuilder isNull() {
    return super.isNull() as INS_CIRCLE_CODESFilterBuilder;
  }

  @override
  INS_CIRCLE_CODESFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as INS_CIRCLE_CODESFilterBuilder;
  }

  @override
  INS_CIRCLE_CODESFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as INS_CIRCLE_CODESFilterBuilder;
  }

  @override
  INS_CIRCLE_CODESFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as INS_CIRCLE_CODESFilterBuilder;
  }

  @override
  INS_CIRCLE_CODESFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as INS_CIRCLE_CODESFilterBuilder;
  }

  @override
  INS_CIRCLE_CODESFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as INS_CIRCLE_CODESFilterBuilder;
  }

  @override
  INS_CIRCLE_CODESFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as INS_CIRCLE_CODESFilterBuilder;
  }

  @override
  INS_CIRCLE_CODESFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as INS_CIRCLE_CODESFilterBuilder;
  }

  @override
  INS_CIRCLE_CODESFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as INS_CIRCLE_CODESFilterBuilder;
  }

  @override
  INS_CIRCLE_CODESFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as INS_CIRCLE_CODESFilterBuilder;
  }

  @override
  INS_CIRCLE_CODESField get not {
    return super.not as INS_CIRCLE_CODESField;
  }
}
// endregion INS_CIRCLE_CODESField

// region INS_CIRCLE_CODESFilterBuilder
class INS_CIRCLE_CODESFilterBuilder extends ConjunctionBase {
  INS_CIRCLE_CODESFilterBuilder(INS_CIRCLE_CODES obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnINS_CIRCLE_CODES = obj._mnINS_CIRCLE_CODES;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  INS_CIRCLE_CODESManager? _mnINS_CIRCLE_CODES;

  /// put the sql keyword 'AND'
  @override
  INS_CIRCLE_CODESFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  INS_CIRCLE_CODESFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  INS_CIRCLE_CODESFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  INS_CIRCLE_CODESFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  INS_CIRCLE_CODESFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  INS_CIRCLE_CODESFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  INS_CIRCLE_CODESFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  INS_CIRCLE_CODESFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  INS_CIRCLE_CODESFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  INS_CIRCLE_CODESFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  INS_CIRCLE_CODESFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  INS_CIRCLE_CODESField _setField(
      INS_CIRCLE_CODESField? field, String colName, DbType dbtype) {
    return INS_CIRCLE_CODESField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  INS_CIRCLE_CODESField? _SNo;
  INS_CIRCLE_CODESField get SNo {
    return _SNo = _setField(_SNo, 'SNo', DbType.integer);
  }

  INS_CIRCLE_CODESField? _Circle_code;
  INS_CIRCLE_CODESField get Circle_code {
    return _Circle_code = _setField(_Circle_code, 'Circle_code', DbType.text);
  }

  INS_CIRCLE_CODESField? _CO_CODE;
  INS_CIRCLE_CODESField get CO_CODE {
    return _CO_CODE = _setField(_CO_CODE, 'CO_CODE', DbType.text);
  }

  /// Deletes List<INS_CIRCLE_CODES> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnINS_CIRCLE_CODES!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnINS_CIRCLE_CODES!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'SNo IN (SELECT SNo from INS_CIRCLE_CODES ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnINS_CIRCLE_CODES!.updateBatch(qparams, values);
  }

  /// This method always returns [INS_CIRCLE_CODES] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> INS_CIRCLE_CODES?
  @override
  Future<INS_CIRCLE_CODES?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnINS_CIRCLE_CODES!.toList(qparams);
    final data = await objFuture;
    INS_CIRCLE_CODES? obj;
    if (data.isNotEmpty) {
      obj = INS_CIRCLE_CODES.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [INS_CIRCLE_CODES]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> INS_CIRCLE_CODES?
  @override
  Future<INS_CIRCLE_CODES> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        INS_CIRCLE_CODES();
  }

  /// This method returns int. [INS_CIRCLE_CODES]
  /// <returns>int
  @override
  Future<int> toCount(
      [VoidCallback Function(int c)? ins_circle_codesCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final ins_circle_codesesFuture = await _mnINS_CIRCLE_CODES!.toList(qparams);
    final int count = ins_circle_codesesFuture[0]['CNT'] as int;
    if (ins_circle_codesCount != null) {
      ins_circle_codesCount(count);
    }
    return count;
  }

  /// This method returns List<INS_CIRCLE_CODES> [INS_CIRCLE_CODES]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<INS_CIRCLE_CODES>
  @override
  Future<List<INS_CIRCLE_CODES>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<INS_CIRCLE_CODES> ins_circle_codesesData =
        await INS_CIRCLE_CODES.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return ins_circle_codesesData;
  }

  /// This method returns Json String [INS_CIRCLE_CODES]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [INS_CIRCLE_CODES]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [INS_CIRCLE_CODES]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnINS_CIRCLE_CODES!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [INS_CIRCLE_CODES]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `SNo` FROM INS_CIRCLE_CODES WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> SNoData = <int>[];
    qparams.selectColumns = ['SNo'];
    final SNoFuture = await _mnINS_CIRCLE_CODES!.toList(qparams);

    final int count = SNoFuture.length;
    for (int i = 0; i < count; i++) {
      SNoData.add(SNoFuture[i]['SNo'] as int);
    }
    return SNoData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [INS_CIRCLE_CODES]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnINS_CIRCLE_CODES!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await INS_CIRCLE_CODES.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnINS_CIRCLE_CODES!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion INS_CIRCLE_CODESFilterBuilder

// region INS_CIRCLE_CODESFields
class INS_CIRCLE_CODESFields {
  static TableField? _fSNo;
  static TableField get SNo {
    return _fSNo = _fSNo ?? SqlSyntax.setField(_fSNo, 'sno', DbType.integer);
  }

  static TableField? _fCircle_code;
  static TableField get Circle_code {
    return _fCircle_code = _fCircle_code ??
        SqlSyntax.setField(_fCircle_code, 'Circle_code', DbType.text);
  }

  static TableField? _fCO_CODE;
  static TableField get CO_CODE {
    return _fCO_CODE =
        _fCO_CODE ?? SqlSyntax.setField(_fCO_CODE, 'CO_CODE', DbType.text);
  }
}
// endregion INS_CIRCLE_CODESFields

//region INS_CIRCLE_CODESManager
class INS_CIRCLE_CODESManager extends SqfEntityProvider {
  INS_CIRCLE_CODESManager()
      : super(InsTran(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'INS_CIRCLE_CODES';
  static const List<String> _primaryKeyList = ['SNo'];
  static const String _whereStr = 'SNo=?';
}

//endregion INS_CIRCLE_CODESManager
class InsTranSequenceManager extends SqfEntityProvider {
  InsTranSequenceManager() : super(InsTran());
}
// END OF ENTITIES
