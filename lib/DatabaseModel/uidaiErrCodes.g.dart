// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'uidaiErrCodes.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:API_Errcode.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// API_Errcode TABLE
class TableAPI_Errcode extends SqfEntityTableBase {
  TableAPI_Errcode() {
    // declare properties of EntityTable
    tableName = 'API_Errcodes';
    primaryKeyName = 'API_Err_code';
    primaryKeyType = PrimaryKeyType.text;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('Description', DbType.text),
      SqfEntityFieldBase('Suggestion', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableAPI_Errcode();
  }
}

// Aadhar_OTP_ErrCode TABLE
class TableAadhar_OTP_ErrCode extends SqfEntityTableBase {
  TableAadhar_OTP_ErrCode() {
    // declare properties of EntityTable
    tableName = 'Aadhar_OTP_ErrCodes';
    primaryKeyName = 'API_Err_code';
    primaryKeyType = PrimaryKeyType.text;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('Description', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableAadhar_OTP_ErrCode();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class UIDAIErrorCodes extends SqfEntityModelProvider {
  UIDAIErrorCodes() {
    databaseName = aadharModel.databaseName;
    password = aadharModel.password;
    dbVersion = aadharModel.dbVersion;
    preSaveAction = aadharModel.preSaveAction;
    logFunction = aadharModel.logFunction;
    databaseTables = [
      TableAPI_Errcode.getInstance,
      TableAadhar_OTP_ErrCode.getInstance,
    ];

    bundledDatabasePath = aadharModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = aadharModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region API_Errcode
class API_Errcode extends TableBase {
  API_Errcode({this.API_Err_code, this.Description, this.Suggestion}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  API_Errcode.withFields(this.API_Err_code, this.Description, this.Suggestion) {
    _setDefaultValues();
  }
  API_Errcode.withId(this.API_Err_code, this.Description, this.Suggestion) {
    _setDefaultValues();
  }
  // fromMap v2.0
  API_Errcode.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    API_Err_code = o['API_Err_code'].toString();
    if (o['Description'] != null) {
      Description = o['Description'].toString();
    }
    if (o['Suggestion'] != null) {
      Suggestion = o['Suggestion'].toString();
    }

    isSaved = true;
  }
  // FIELDS (API_Errcode)
  String? API_Err_code;
  String? Description;
  String? Suggestion;
  bool? isSaved;
  // end FIELDS (API_Errcode)

  static const bool _softDeleteActivated = false;
  API_ErrcodeManager? __mnAPI_Errcode;

  API_ErrcodeManager get _mnAPI_Errcode {
    return __mnAPI_Errcode = __mnAPI_Errcode ?? API_ErrcodeManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['API_Err_code'] = API_Err_code;
    if (Description != null || !forView) {
      map['Description'] = Description;
    }
    if (Suggestion != null || !forView) {
      map['Suggestion'] = Suggestion;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['API_Err_code'] = API_Err_code;
    if (Description != null || !forView) {
      map['Description'] = Description;
    }
    if (Suggestion != null || !forView) {
      map['Suggestion'] = Suggestion;
    }

    return map;
  }

  /// This method returns Json String [API_Errcode]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [API_Errcode]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [API_Err_code, Description, Suggestion];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [API_Err_code, Description, Suggestion];
  }

  static Future<List<API_Errcode>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR API_Errcode.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<API_Errcode>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <API_Errcode>[];
    try {
      objList = list
          .map((api_errcode) =>
              API_Errcode.fromMap(api_errcode as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR API_Errcode.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<API_Errcode>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<API_Errcode> objList = <API_Errcode>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = API_Errcode.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns API_Errcode by ID if exist, otherwise returns null
  /// Primary Keys: String? API_Err_code
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [API_Errcode] if exist, otherwise returns null
  Future<API_Errcode?> getById(String? API_Err_code,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (API_Err_code == null) {
      return null;
    }
    API_Errcode? obj;
    final data = await _mnAPI_Errcode.getById([API_Err_code]);
    if (data.length != 0) {
      obj = API_Errcode.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (API_Errcode) object. If the Primary Key (API_Err_code) field is null, returns Error.
  /// INSERTS (If not exist) OR REPLACES (If exist) data while Primary Key is not null.
  /// Call the saveAs() method if you do not want to save it when there is another row with the same API_Err_code
  /// <returns>Returns BoolResult
  @override
  Future<BoolResult> save({bool ignoreBatch = true}) async {
    final result = BoolResult(success: false);
    try {
      await _mnAPI_Errcode.rawInsert(
          'INSERT ${isSaved! ? 'OR REPLACE' : ''} INTO API_Errcodes (API_Err_code, Description, Suggestion)  VALUES (?,?,?)',
          toArgsWithIds(),
          ignoreBatch);
      result.success = true;
      isSaved = true;
    } catch (e) {
      result.errorMessage = e.toString();
    }

    saveResult = result;
    return result;
  }

  /// saveAll method saves the sent List<API_Errcode> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<API_Errcode> api_errcodes,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await UIDAIErrorCodes().batchStart();
    for (final obj in api_errcodes) {
      await obj.save();
    }
    if (!isStartedBatch) {
      result = await UIDAIErrorCodes().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns 1
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnAPI_Errcode.rawInsert(
          'INSERT OR REPLACE INTO API_Errcodes (API_Err_code, Description, Suggestion)  VALUES (?,?,?)',
          [API_Err_code, Description, Suggestion],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage:
                'API_Errcode API_Err_code=$API_Err_code updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage:
                'API_Errcode API_Err_code=$API_Err_code did not update');
      }
      return 1;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'API_Errcode Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns 1
  @override
  Future<int?> upsert1({bool ignoreBatch = true}) async {
    try {
      final result = await _mnAPI_Errcode.rawInsert(
          'INSERT OR IGNORE INTO API_Errcodes (API_Err_code, Description, Suggestion)  VALUES (?,?,?)',
          [API_Err_code, Description, Suggestion],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage:
                'API_Errcode API_Err_code=$API_Err_code updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage:
                'API_Errcode API_Err_code=$API_Err_code did not update');
      }
      return 1;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'API_Errcode Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Deletes API_Errcode

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint(
        'SQFENTITIY: delete API_Errcode invoked (API_Err_code=$API_Err_code)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnAPI_Errcode.delete(QueryParams(
          whereString: 'API_Err_code=?', whereArguments: [API_Err_code]));
    } else {
      return _mnAPI_Errcode.updateBatch(
          QueryParams(
              whereString: 'API_Err_code=?', whereArguments: [API_Err_code]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [API_Errcode] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  API_ErrcodeFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return API_ErrcodeFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  API_ErrcodeFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return API_ErrcodeFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      API_Err_code = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion api_errcode

// region API_ErrcodeField
class API_ErrcodeField extends FilterBase {
  API_ErrcodeField(API_ErrcodeFilterBuilder api_errcodeFB)
      : super(api_errcodeFB);

  @override
  API_ErrcodeFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as API_ErrcodeFilterBuilder;
  }

  @override
  API_ErrcodeFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as API_ErrcodeFilterBuilder;
  }

  @override
  API_ErrcodeFilterBuilder isNull() {
    return super.isNull() as API_ErrcodeFilterBuilder;
  }

  @override
  API_ErrcodeFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as API_ErrcodeFilterBuilder;
  }

  @override
  API_ErrcodeFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as API_ErrcodeFilterBuilder;
  }

  @override
  API_ErrcodeFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as API_ErrcodeFilterBuilder;
  }

  @override
  API_ErrcodeFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as API_ErrcodeFilterBuilder;
  }

  @override
  API_ErrcodeFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as API_ErrcodeFilterBuilder;
  }

  @override
  API_ErrcodeFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as API_ErrcodeFilterBuilder;
  }

  @override
  API_ErrcodeFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as API_ErrcodeFilterBuilder;
  }

  @override
  API_ErrcodeFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as API_ErrcodeFilterBuilder;
  }

  @override
  API_ErrcodeFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as API_ErrcodeFilterBuilder;
  }

  @override
  API_ErrcodeField get not {
    return super.not as API_ErrcodeField;
  }
}
// endregion API_ErrcodeField

// region API_ErrcodeFilterBuilder
class API_ErrcodeFilterBuilder extends ConjunctionBase {
  API_ErrcodeFilterBuilder(API_Errcode obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnAPI_Errcode = obj._mnAPI_Errcode;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  API_ErrcodeManager? _mnAPI_Errcode;

  /// put the sql keyword 'AND'
  @override
  API_ErrcodeFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  API_ErrcodeFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  API_ErrcodeFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  API_ErrcodeFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  API_ErrcodeFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  API_ErrcodeFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  API_ErrcodeFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  API_ErrcodeFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  API_ErrcodeFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  API_ErrcodeFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  API_ErrcodeFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  API_ErrcodeField _setField(
      API_ErrcodeField? field, String colName, DbType dbtype) {
    return API_ErrcodeField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  API_ErrcodeField? _API_Err_code;
  API_ErrcodeField get API_Err_code {
    return _API_Err_code =
        _setField(_API_Err_code, 'API_Err_code', DbType.integer);
  }

  API_ErrcodeField? _Description;
  API_ErrcodeField get Description {
    return _Description = _setField(_Description, 'Description', DbType.text);
  }

  API_ErrcodeField? _Suggestion;
  API_ErrcodeField get Suggestion {
    return _Suggestion = _setField(_Suggestion, 'Suggestion', DbType.text);
  }

  /// Deletes List<API_Errcode> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnAPI_Errcode!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnAPI_Errcode!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'API_Err_code IN (SELECT API_Err_code from API_Errcodes ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnAPI_Errcode!.updateBatch(qparams, values);
  }

  /// This method always returns [API_Errcode] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> API_Errcode?
  @override
  Future<API_Errcode?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnAPI_Errcode!.toList(qparams);
    final data = await objFuture;
    API_Errcode? obj;
    if (data.isNotEmpty) {
      obj = API_Errcode.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [API_Errcode]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> API_Errcode?
  @override
  Future<API_Errcode> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        API_Errcode();
  }

  /// This method returns int. [API_Errcode]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? api_errcodeCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final api_errcodesFuture = await _mnAPI_Errcode!.toList(qparams);
    final int count = api_errcodesFuture[0]['CNT'] as int;
    if (api_errcodeCount != null) {
      api_errcodeCount(count);
    }
    return count;
  }

  /// This method returns List<API_Errcode> [API_Errcode]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<API_Errcode>
  @override
  Future<List<API_Errcode>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<API_Errcode> api_errcodesData = await API_Errcode.fromMapList(
        data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return api_errcodesData;
  }

  /// This method returns Json String [API_Errcode]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [API_Errcode]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [API_Errcode]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnAPI_Errcode!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [API_Errcode]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `API_Err_code` FROM API_Errcodes WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<String>.
  /// <returns>List<String>
  @override
  Future<List<String>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<String> API_Err_codeData = <String>[];
    qparams.selectColumns = ['API_Err_code'];
    final API_Err_codeFuture = await _mnAPI_Errcode!.toList(qparams);

    final int count = API_Err_codeFuture.length;
    for (int i = 0; i < count; i++) {
      API_Err_codeData.add(API_Err_codeFuture[i]['API_Err_code'] as String);
    }
    return API_Err_codeData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [API_Errcode]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnAPI_Errcode!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await API_Errcode.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnAPI_Errcode!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion API_ErrcodeFilterBuilder

// region API_ErrcodeFields
class API_ErrcodeFields {
  static TableField? _fAPI_Err_code;
  static TableField get API_Err_code {
    return _fAPI_Err_code = _fAPI_Err_code ??
        SqlSyntax.setField(_fAPI_Err_code, 'api_err_code', DbType.integer);
  }

  static TableField? _fDescription;
  static TableField get Description {
    return _fDescription = _fDescription ??
        SqlSyntax.setField(_fDescription, 'Description', DbType.text);
  }

  static TableField? _fSuggestion;
  static TableField get Suggestion {
    return _fSuggestion = _fSuggestion ??
        SqlSyntax.setField(_fSuggestion, 'Suggestion', DbType.text);
  }
}
// endregion API_ErrcodeFields

//region API_ErrcodeManager
class API_ErrcodeManager extends SqfEntityProvider {
  API_ErrcodeManager()
      : super(UIDAIErrorCodes(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'API_Errcodes';
  static const List<String> _primaryKeyList = ['API_Err_code'];
  static const String _whereStr = 'API_Err_code=?';
}

//endregion API_ErrcodeManager
// region Aadhar_OTP_ErrCode
class Aadhar_OTP_ErrCode extends TableBase {
  Aadhar_OTP_ErrCode({this.API_Err_code, this.Description}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Aadhar_OTP_ErrCode.withFields(this.API_Err_code, this.Description) {
    _setDefaultValues();
  }
  Aadhar_OTP_ErrCode.withId(this.API_Err_code, this.Description) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Aadhar_OTP_ErrCode.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    API_Err_code = o['API_Err_code'].toString();
    if (o['Description'] != null) {
      Description = o['Description'].toString();
    }

    isSaved = true;
  }
  // FIELDS (Aadhar_OTP_ErrCode)
  String? API_Err_code;
  String? Description;
  bool? isSaved;
  // end FIELDS (Aadhar_OTP_ErrCode)

  static const bool _softDeleteActivated = false;
  Aadhar_OTP_ErrCodeManager? __mnAadhar_OTP_ErrCode;

  Aadhar_OTP_ErrCodeManager get _mnAadhar_OTP_ErrCode {
    return __mnAadhar_OTP_ErrCode =
        __mnAadhar_OTP_ErrCode ?? Aadhar_OTP_ErrCodeManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['API_Err_code'] = API_Err_code;
    if (Description != null || !forView) {
      map['Description'] = Description;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['API_Err_code'] = API_Err_code;
    if (Description != null || !forView) {
      map['Description'] = Description;
    }

    return map;
  }

  /// This method returns Json String [Aadhar_OTP_ErrCode]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Aadhar_OTP_ErrCode]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [API_Err_code, Description];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [API_Err_code, Description];
  }

  static Future<List<Aadhar_OTP_ErrCode>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Aadhar_OTP_ErrCode.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Aadhar_OTP_ErrCode>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Aadhar_OTP_ErrCode>[];
    try {
      objList = list
          .map((aadhar_otp_errcode) => Aadhar_OTP_ErrCode.fromMap(
              aadhar_otp_errcode as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Aadhar_OTP_ErrCode.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Aadhar_OTP_ErrCode>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Aadhar_OTP_ErrCode> objList = <Aadhar_OTP_ErrCode>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Aadhar_OTP_ErrCode.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Aadhar_OTP_ErrCode by ID if exist, otherwise returns null
  /// Primary Keys: String? API_Err_code
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Aadhar_OTP_ErrCode] if exist, otherwise returns null
  Future<Aadhar_OTP_ErrCode?> getById(String? API_Err_code,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (API_Err_code == null) {
      return null;
    }
    Aadhar_OTP_ErrCode? obj;
    final data = await _mnAadhar_OTP_ErrCode.getById([API_Err_code]);
    if (data.length != 0) {
      obj = Aadhar_OTP_ErrCode.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Aadhar_OTP_ErrCode) object. If the Primary Key (API_Err_code) field is null, returns Error.
  /// INSERTS (If not exist) OR REPLACES (If exist) data while Primary Key is not null.
  /// Call the saveAs() method if you do not want to save it when there is another row with the same API_Err_code
  /// <returns>Returns BoolResult
  @override
  Future<BoolResult> save({bool ignoreBatch = true}) async {
    final result = BoolResult(success: false);
    try {
      await _mnAadhar_OTP_ErrCode.rawInsert(
          'INSERT ${isSaved! ? 'OR REPLACE' : ''} INTO Aadhar_OTP_ErrCodes (API_Err_code, Description)  VALUES (?,?)',
          toArgsWithIds(),
          ignoreBatch);
      result.success = true;
      isSaved = true;
    } catch (e) {
      result.errorMessage = e.toString();
    }

    saveResult = result;
    return result;
  }

  /// saveAll method saves the sent List<Aadhar_OTP_ErrCode> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<Aadhar_OTP_ErrCode> aadhar_otp_errcodes,
      {bool? exclusive,
      bool? noResult,
      bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await UIDAIErrorCodes().batchStart();
    for (final obj in aadhar_otp_errcodes) {
      await obj.save();
    }
    if (!isStartedBatch) {
      result = await UIDAIErrorCodes().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns 1
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnAadhar_OTP_ErrCode.rawInsert(
          'INSERT OR REPLACE INTO Aadhar_OTP_ErrCodes (API_Err_code, Description)  VALUES (?,?)',
          [API_Err_code, Description],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage:
                'Aadhar_OTP_ErrCode API_Err_code=$API_Err_code updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage:
                'Aadhar_OTP_ErrCode API_Err_code=$API_Err_code did not update');
      }
      return 1;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage:
              'Aadhar_OTP_ErrCode Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns 1
  @override
  Future<int?> upsert1({bool ignoreBatch = true}) async {
    try {
      final result = await _mnAadhar_OTP_ErrCode.rawInsert(
          'INSERT OR IGNORE INTO Aadhar_OTP_ErrCodes (API_Err_code, Description)  VALUES (?,?)',
          [API_Err_code, Description],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage:
                'Aadhar_OTP_ErrCode API_Err_code=$API_Err_code updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage:
                'Aadhar_OTP_ErrCode API_Err_code=$API_Err_code did not update');
      }
      return 1;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage:
              'Aadhar_OTP_ErrCode Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Deletes Aadhar_OTP_ErrCode

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint(
        'SQFENTITIY: delete Aadhar_OTP_ErrCode invoked (API_Err_code=$API_Err_code)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnAadhar_OTP_ErrCode.delete(QueryParams(
          whereString: 'API_Err_code=?', whereArguments: [API_Err_code]));
    } else {
      return _mnAadhar_OTP_ErrCode.updateBatch(
          QueryParams(
              whereString: 'API_Err_code=?', whereArguments: [API_Err_code]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Aadhar_OTP_ErrCode] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  Aadhar_OTP_ErrCodeFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Aadhar_OTP_ErrCodeFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  Aadhar_OTP_ErrCodeFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Aadhar_OTP_ErrCodeFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      API_Err_code = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion aadhar_otp_errcode

// region Aadhar_OTP_ErrCodeField
class Aadhar_OTP_ErrCodeField extends FilterBase {
  Aadhar_OTP_ErrCodeField(Aadhar_OTP_ErrCodeFilterBuilder aadhar_otp_errcodeFB)
      : super(aadhar_otp_errcodeFB);

  @override
  Aadhar_OTP_ErrCodeFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as Aadhar_OTP_ErrCodeFilterBuilder;
  }

  @override
  Aadhar_OTP_ErrCodeFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as Aadhar_OTP_ErrCodeFilterBuilder;
  }

  @override
  Aadhar_OTP_ErrCodeFilterBuilder isNull() {
    return super.isNull() as Aadhar_OTP_ErrCodeFilterBuilder;
  }

  @override
  Aadhar_OTP_ErrCodeFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as Aadhar_OTP_ErrCodeFilterBuilder;
  }

  @override
  Aadhar_OTP_ErrCodeFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as Aadhar_OTP_ErrCodeFilterBuilder;
  }

  @override
  Aadhar_OTP_ErrCodeFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as Aadhar_OTP_ErrCodeFilterBuilder;
  }

  @override
  Aadhar_OTP_ErrCodeFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as Aadhar_OTP_ErrCodeFilterBuilder;
  }

  @override
  Aadhar_OTP_ErrCodeFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as Aadhar_OTP_ErrCodeFilterBuilder;
  }

  @override
  Aadhar_OTP_ErrCodeFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as Aadhar_OTP_ErrCodeFilterBuilder;
  }

  @override
  Aadhar_OTP_ErrCodeFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as Aadhar_OTP_ErrCodeFilterBuilder;
  }

  @override
  Aadhar_OTP_ErrCodeFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as Aadhar_OTP_ErrCodeFilterBuilder;
  }

  @override
  Aadhar_OTP_ErrCodeFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as Aadhar_OTP_ErrCodeFilterBuilder;
  }

  @override
  Aadhar_OTP_ErrCodeField get not {
    return super.not as Aadhar_OTP_ErrCodeField;
  }
}
// endregion Aadhar_OTP_ErrCodeField

// region Aadhar_OTP_ErrCodeFilterBuilder
class Aadhar_OTP_ErrCodeFilterBuilder extends ConjunctionBase {
  Aadhar_OTP_ErrCodeFilterBuilder(Aadhar_OTP_ErrCode obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnAadhar_OTP_ErrCode = obj._mnAadhar_OTP_ErrCode;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  Aadhar_OTP_ErrCodeManager? _mnAadhar_OTP_ErrCode;

  /// put the sql keyword 'AND'
  @override
  Aadhar_OTP_ErrCodeFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  Aadhar_OTP_ErrCodeFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  Aadhar_OTP_ErrCodeFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  Aadhar_OTP_ErrCodeFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  Aadhar_OTP_ErrCodeFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  Aadhar_OTP_ErrCodeFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  Aadhar_OTP_ErrCodeFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  Aadhar_OTP_ErrCodeFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  Aadhar_OTP_ErrCodeFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  Aadhar_OTP_ErrCodeFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  Aadhar_OTP_ErrCodeFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  Aadhar_OTP_ErrCodeField _setField(
      Aadhar_OTP_ErrCodeField? field, String colName, DbType dbtype) {
    return Aadhar_OTP_ErrCodeField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  Aadhar_OTP_ErrCodeField? _API_Err_code;
  Aadhar_OTP_ErrCodeField get API_Err_code {
    return _API_Err_code =
        _setField(_API_Err_code, 'API_Err_code', DbType.integer);
  }

  Aadhar_OTP_ErrCodeField? _Description;
  Aadhar_OTP_ErrCodeField get Description {
    return _Description = _setField(_Description, 'Description', DbType.text);
  }

  /// Deletes List<Aadhar_OTP_ErrCode> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnAadhar_OTP_ErrCode!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnAadhar_OTP_ErrCode!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'API_Err_code IN (SELECT API_Err_code from Aadhar_OTP_ErrCodes ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnAadhar_OTP_ErrCode!.updateBatch(qparams, values);
  }

  /// This method always returns [Aadhar_OTP_ErrCode] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Aadhar_OTP_ErrCode?
  @override
  Future<Aadhar_OTP_ErrCode?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnAadhar_OTP_ErrCode!.toList(qparams);
    final data = await objFuture;
    Aadhar_OTP_ErrCode? obj;
    if (data.isNotEmpty) {
      obj = Aadhar_OTP_ErrCode.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Aadhar_OTP_ErrCode]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Aadhar_OTP_ErrCode?
  @override
  Future<Aadhar_OTP_ErrCode> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Aadhar_OTP_ErrCode();
  }

  /// This method returns int. [Aadhar_OTP_ErrCode]
  /// <returns>int
  @override
  Future<int> toCount(
      [VoidCallback Function(int c)? aadhar_otp_errcodeCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final aadhar_otp_errcodesFuture =
        await _mnAadhar_OTP_ErrCode!.toList(qparams);
    final int count = aadhar_otp_errcodesFuture[0]['CNT'] as int;
    if (aadhar_otp_errcodeCount != null) {
      aadhar_otp_errcodeCount(count);
    }
    return count;
  }

  /// This method returns List<Aadhar_OTP_ErrCode> [Aadhar_OTP_ErrCode]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Aadhar_OTP_ErrCode>
  @override
  Future<List<Aadhar_OTP_ErrCode>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Aadhar_OTP_ErrCode> aadhar_otp_errcodesData =
        await Aadhar_OTP_ErrCode.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return aadhar_otp_errcodesData;
  }

  /// This method returns Json String [Aadhar_OTP_ErrCode]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Aadhar_OTP_ErrCode]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Aadhar_OTP_ErrCode]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnAadhar_OTP_ErrCode!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Aadhar_OTP_ErrCode]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `API_Err_code` FROM Aadhar_OTP_ErrCodes WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<String>.
  /// <returns>List<String>
  @override
  Future<List<String>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<String> API_Err_codeData = <String>[];
    qparams.selectColumns = ['API_Err_code'];
    final API_Err_codeFuture = await _mnAadhar_OTP_ErrCode!.toList(qparams);

    final int count = API_Err_codeFuture.length;
    for (int i = 0; i < count; i++) {
      API_Err_codeData.add(API_Err_codeFuture[i]['API_Err_code'] as String);
    }
    return API_Err_codeData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Aadhar_OTP_ErrCode]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnAadhar_OTP_ErrCode!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Aadhar_OTP_ErrCode.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnAadhar_OTP_ErrCode!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion Aadhar_OTP_ErrCodeFilterBuilder

// region Aadhar_OTP_ErrCodeFields
class Aadhar_OTP_ErrCodeFields {
  static TableField? _fAPI_Err_code;
  static TableField get API_Err_code {
    return _fAPI_Err_code = _fAPI_Err_code ??
        SqlSyntax.setField(_fAPI_Err_code, 'api_err_code', DbType.integer);
  }

  static TableField? _fDescription;
  static TableField get Description {
    return _fDescription = _fDescription ??
        SqlSyntax.setField(_fDescription, 'Description', DbType.text);
  }
}
// endregion Aadhar_OTP_ErrCodeFields

//region Aadhar_OTP_ErrCodeManager
class Aadhar_OTP_ErrCodeManager extends SqfEntityProvider {
  Aadhar_OTP_ErrCodeManager()
      : super(UIDAIErrorCodes(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'Aadhar_OTP_ErrCodes';
  static const List<String> _primaryKeyList = ['API_Err_code'];
  static const String _whereStr = 'API_Err_code=?';
}

//endregion Aadhar_OTP_ErrCodeManager
class UIDAIErrorCodesSequenceManager extends SqfEntityProvider {
  UIDAIErrorCodesSequenceManager() : super(UIDAIErrorCodes());
}
// END OF ENTITIES
