// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'tempInsurance.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:OfficeDetail.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// OfficeDetail TABLE
class TableOfficeDetail extends SqfEntityTableBase {
  TableOfficeDetail() {
    // declare properties of EntityTable
    tableName = 'officeDetails';
    primaryKeyName = 'SNo';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('BOOFFICETYPE', DbType.text),
      SqfEntityFieldBase('dateTime', DbType.text),
      SqfEntityFieldBase('BOOFFICECODE', DbType.text),
      SqfEntityFieldBase('COOFFICETYPE', DbType.text),
      SqfEntityFieldBase('HOOFFICEADDRESS', DbType.text),
      SqfEntityFieldBase('HOOFFICECODE', DbType.text),
      SqfEntityFieldBase('HOOFFICETYPE', DbType.text),
      SqfEntityFieldBase('BOOFFICEADDRESS', DbType.text),
      SqfEntityFieldBase('OFFICECODE_6', DbType.text),
      SqfEntityFieldBase('OFFICECODE_4', DbType.text),
      SqfEntityFieldBase('OFFICECODE_5', DbType.text),
      SqfEntityFieldBase('OFFICECODE_2', DbType.text),
      SqfEntityFieldBase('OFFICECODE_3', DbType.text),
      SqfEntityFieldBase('OFFICECODE_1', DbType.text),
      SqfEntityFieldBase('POCode', DbType.text),
      SqfEntityFieldBase('OFFICETYPE_3', DbType.text),
      SqfEntityFieldBase('OFFICEADDRESS_4', DbType.text),
      SqfEntityFieldBase('OFFICEADDRESS_3', DbType.text),
      SqfEntityFieldBase('OFFICETYPE_4', DbType.text),
      SqfEntityFieldBase('OFFICETYPE_1', DbType.text),
      SqfEntityFieldBase('OFFICEADDRESS_6', DbType.text),
      SqfEntityFieldBase('OFFICETYPE_2', DbType.text),
      SqfEntityFieldBase('OFFICEADDRESS_5', DbType.text),
      SqfEntityFieldBase('COOFFICEADDRESS', DbType.text),
      SqfEntityFieldBase('OFFICEADDRESS_2', DbType.text),
      SqfEntityFieldBase('OFFICETYPE_5', DbType.text),
      SqfEntityFieldBase('COOFFICECODE', DbType.text),
      SqfEntityFieldBase('OFFICEADDRESS_1', DbType.text),
      SqfEntityFieldBase('OFFICETYPE_6', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableOfficeDetail();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class OfficeDetails extends SqfEntityModelProvider {
  OfficeDetails() {
    databaseName = reportModel.databaseName;
    password = reportModel.password;
    dbVersion = reportModel.dbVersion;
    preSaveAction = reportModel.preSaveAction;
    logFunction = reportModel.logFunction;
    databaseTables = [
      TableOfficeDetail.getInstance,
    ];

    bundledDatabasePath = reportModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = reportModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region OfficeDetail
class OfficeDetail extends TableBase {
  OfficeDetail(
      {this.SNo,
      this.BOOFFICETYPE,
      this.dateTime,
      this.BOOFFICECODE,
      this.COOFFICETYPE,
      this.HOOFFICEADDRESS,
      this.HOOFFICECODE,
      this.HOOFFICETYPE,
      this.BOOFFICEADDRESS,
      this.OFFICECODE_6,
      this.OFFICECODE_4,
      this.OFFICECODE_5,
      this.OFFICECODE_2,
      this.OFFICECODE_3,
      this.OFFICECODE_1,
      this.POCode,
      this.OFFICETYPE_3,
      this.OFFICEADDRESS_4,
      this.OFFICEADDRESS_3,
      this.OFFICETYPE_4,
      this.OFFICETYPE_1,
      this.OFFICEADDRESS_6,
      this.OFFICETYPE_2,
      this.OFFICEADDRESS_5,
      this.COOFFICEADDRESS,
      this.OFFICEADDRESS_2,
      this.OFFICETYPE_5,
      this.COOFFICECODE,
      this.OFFICEADDRESS_1,
      this.OFFICETYPE_6}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  OfficeDetail.withFields(
      this.BOOFFICETYPE,
      this.dateTime,
      this.BOOFFICECODE,
      this.COOFFICETYPE,
      this.HOOFFICEADDRESS,
      this.HOOFFICECODE,
      this.HOOFFICETYPE,
      this.BOOFFICEADDRESS,
      this.OFFICECODE_6,
      this.OFFICECODE_4,
      this.OFFICECODE_5,
      this.OFFICECODE_2,
      this.OFFICECODE_3,
      this.OFFICECODE_1,
      this.POCode,
      this.OFFICETYPE_3,
      this.OFFICEADDRESS_4,
      this.OFFICEADDRESS_3,
      this.OFFICETYPE_4,
      this.OFFICETYPE_1,
      this.OFFICEADDRESS_6,
      this.OFFICETYPE_2,
      this.OFFICEADDRESS_5,
      this.COOFFICEADDRESS,
      this.OFFICEADDRESS_2,
      this.OFFICETYPE_5,
      this.COOFFICECODE,
      this.OFFICEADDRESS_1,
      this.OFFICETYPE_6) {
    _setDefaultValues();
  }
  OfficeDetail.withId(
      this.SNo,
      this.BOOFFICETYPE,
      this.dateTime,
      this.BOOFFICECODE,
      this.COOFFICETYPE,
      this.HOOFFICEADDRESS,
      this.HOOFFICECODE,
      this.HOOFFICETYPE,
      this.BOOFFICEADDRESS,
      this.OFFICECODE_6,
      this.OFFICECODE_4,
      this.OFFICECODE_5,
      this.OFFICECODE_2,
      this.OFFICECODE_3,
      this.OFFICECODE_1,
      this.POCode,
      this.OFFICETYPE_3,
      this.OFFICEADDRESS_4,
      this.OFFICEADDRESS_3,
      this.OFFICETYPE_4,
      this.OFFICETYPE_1,
      this.OFFICEADDRESS_6,
      this.OFFICETYPE_2,
      this.OFFICEADDRESS_5,
      this.COOFFICEADDRESS,
      this.OFFICEADDRESS_2,
      this.OFFICETYPE_5,
      this.COOFFICECODE,
      this.OFFICEADDRESS_1,
      this.OFFICETYPE_6) {
    _setDefaultValues();
  }
  // fromMap v2.0
  OfficeDetail.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    SNo = int.tryParse(o['SNo'].toString());
    if (o['BOOFFICETYPE'] != null) {
      BOOFFICETYPE = o['BOOFFICETYPE'].toString();
    }
    if (o['dateTime'] != null) {
      dateTime = o['dateTime'].toString();
    }
    if (o['BOOFFICECODE'] != null) {
      BOOFFICECODE = o['BOOFFICECODE'].toString();
    }
    if (o['COOFFICETYPE'] != null) {
      COOFFICETYPE = o['COOFFICETYPE'].toString();
    }
    if (o['HOOFFICEADDRESS'] != null) {
      HOOFFICEADDRESS = o['HOOFFICEADDRESS'].toString();
    }
    if (o['HOOFFICECODE'] != null) {
      HOOFFICECODE = o['HOOFFICECODE'].toString();
    }
    if (o['HOOFFICETYPE'] != null) {
      HOOFFICETYPE = o['HOOFFICETYPE'].toString();
    }
    if (o['BOOFFICEADDRESS'] != null) {
      BOOFFICEADDRESS = o['BOOFFICEADDRESS'].toString();
    }
    if (o['OFFICECODE_6'] != null) {
      OFFICECODE_6 = o['OFFICECODE_6'].toString();
    }
    if (o['OFFICECODE_4'] != null) {
      OFFICECODE_4 = o['OFFICECODE_4'].toString();
    }
    if (o['OFFICECODE_5'] != null) {
      OFFICECODE_5 = o['OFFICECODE_5'].toString();
    }
    if (o['OFFICECODE_2'] != null) {
      OFFICECODE_2 = o['OFFICECODE_2'].toString();
    }
    if (o['OFFICECODE_3'] != null) {
      OFFICECODE_3 = o['OFFICECODE_3'].toString();
    }
    if (o['OFFICECODE_1'] != null) {
      OFFICECODE_1 = o['OFFICECODE_1'].toString();
    }
    if (o['POCode'] != null) {
      POCode = o['POCode'].toString();
    }
    if (o['OFFICETYPE_3'] != null) {
      OFFICETYPE_3 = o['OFFICETYPE_3'].toString();
    }
    if (o['OFFICEADDRESS_4'] != null) {
      OFFICEADDRESS_4 = o['OFFICEADDRESS_4'].toString();
    }
    if (o['OFFICEADDRESS_3'] != null) {
      OFFICEADDRESS_3 = o['OFFICEADDRESS_3'].toString();
    }
    if (o['OFFICETYPE_4'] != null) {
      OFFICETYPE_4 = o['OFFICETYPE_4'].toString();
    }
    if (o['OFFICETYPE_1'] != null) {
      OFFICETYPE_1 = o['OFFICETYPE_1'].toString();
    }
    if (o['OFFICEADDRESS_6'] != null) {
      OFFICEADDRESS_6 = o['OFFICEADDRESS_6'].toString();
    }
    if (o['OFFICETYPE_2'] != null) {
      OFFICETYPE_2 = o['OFFICETYPE_2'].toString();
    }
    if (o['OFFICEADDRESS_5'] != null) {
      OFFICEADDRESS_5 = o['OFFICEADDRESS_5'].toString();
    }
    if (o['COOFFICEADDRESS'] != null) {
      COOFFICEADDRESS = o['COOFFICEADDRESS'].toString();
    }
    if (o['OFFICEADDRESS_2'] != null) {
      OFFICEADDRESS_2 = o['OFFICEADDRESS_2'].toString();
    }
    if (o['OFFICETYPE_5'] != null) {
      OFFICETYPE_5 = o['OFFICETYPE_5'].toString();
    }
    if (o['COOFFICECODE'] != null) {
      COOFFICECODE = o['COOFFICECODE'].toString();
    }
    if (o['OFFICEADDRESS_1'] != null) {
      OFFICEADDRESS_1 = o['OFFICEADDRESS_1'].toString();
    }
    if (o['OFFICETYPE_6'] != null) {
      OFFICETYPE_6 = o['OFFICETYPE_6'].toString();
    }
  }
  // FIELDS (OfficeDetail)
  int? SNo;
  String? BOOFFICETYPE;
  String? dateTime;
  String? BOOFFICECODE;
  String? COOFFICETYPE;
  String? HOOFFICEADDRESS;
  String? HOOFFICECODE;
  String? HOOFFICETYPE;
  String? BOOFFICEADDRESS;
  String? OFFICECODE_6;
  String? OFFICECODE_4;
  String? OFFICECODE_5;
  String? OFFICECODE_2;
  String? OFFICECODE_3;
  String? OFFICECODE_1;
  String? POCode;
  String? OFFICETYPE_3;
  String? OFFICEADDRESS_4;
  String? OFFICEADDRESS_3;
  String? OFFICETYPE_4;
  String? OFFICETYPE_1;
  String? OFFICEADDRESS_6;
  String? OFFICETYPE_2;
  String? OFFICEADDRESS_5;
  String? COOFFICEADDRESS;
  String? OFFICEADDRESS_2;
  String? OFFICETYPE_5;
  String? COOFFICECODE;
  String? OFFICEADDRESS_1;
  String? OFFICETYPE_6;

  // end FIELDS (OfficeDetail)

  static const bool _softDeleteActivated = false;
  OfficeDetailManager? __mnOfficeDetail;

  OfficeDetailManager get _mnOfficeDetail {
    return __mnOfficeDetail = __mnOfficeDetail ?? OfficeDetailManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['SNo'] = SNo;
    if (BOOFFICETYPE != null || !forView) {
      map['BOOFFICETYPE'] = BOOFFICETYPE;
    }
    if (dateTime != null || !forView) {
      map['dateTime'] = dateTime;
    }
    if (BOOFFICECODE != null || !forView) {
      map['BOOFFICECODE'] = BOOFFICECODE;
    }
    if (COOFFICETYPE != null || !forView) {
      map['COOFFICETYPE'] = COOFFICETYPE;
    }
    if (HOOFFICEADDRESS != null || !forView) {
      map['HOOFFICEADDRESS'] = HOOFFICEADDRESS;
    }
    if (HOOFFICECODE != null || !forView) {
      map['HOOFFICECODE'] = HOOFFICECODE;
    }
    if (HOOFFICETYPE != null || !forView) {
      map['HOOFFICETYPE'] = HOOFFICETYPE;
    }
    if (BOOFFICEADDRESS != null || !forView) {
      map['BOOFFICEADDRESS'] = BOOFFICEADDRESS;
    }
    if (OFFICECODE_6 != null || !forView) {
      map['OFFICECODE_6'] = OFFICECODE_6;
    }
    if (OFFICECODE_4 != null || !forView) {
      map['OFFICECODE_4'] = OFFICECODE_4;
    }
    if (OFFICECODE_5 != null || !forView) {
      map['OFFICECODE_5'] = OFFICECODE_5;
    }
    if (OFFICECODE_2 != null || !forView) {
      map['OFFICECODE_2'] = OFFICECODE_2;
    }
    if (OFFICECODE_3 != null || !forView) {
      map['OFFICECODE_3'] = OFFICECODE_3;
    }
    if (OFFICECODE_1 != null || !forView) {
      map['OFFICECODE_1'] = OFFICECODE_1;
    }
    if (POCode != null || !forView) {
      map['POCode'] = POCode;
    }
    if (OFFICETYPE_3 != null || !forView) {
      map['OFFICETYPE_3'] = OFFICETYPE_3;
    }
    if (OFFICEADDRESS_4 != null || !forView) {
      map['OFFICEADDRESS_4'] = OFFICEADDRESS_4;
    }
    if (OFFICEADDRESS_3 != null || !forView) {
      map['OFFICEADDRESS_3'] = OFFICEADDRESS_3;
    }
    if (OFFICETYPE_4 != null || !forView) {
      map['OFFICETYPE_4'] = OFFICETYPE_4;
    }
    if (OFFICETYPE_1 != null || !forView) {
      map['OFFICETYPE_1'] = OFFICETYPE_1;
    }
    if (OFFICEADDRESS_6 != null || !forView) {
      map['OFFICEADDRESS_6'] = OFFICEADDRESS_6;
    }
    if (OFFICETYPE_2 != null || !forView) {
      map['OFFICETYPE_2'] = OFFICETYPE_2;
    }
    if (OFFICEADDRESS_5 != null || !forView) {
      map['OFFICEADDRESS_5'] = OFFICEADDRESS_5;
    }
    if (COOFFICEADDRESS != null || !forView) {
      map['COOFFICEADDRESS'] = COOFFICEADDRESS;
    }
    if (OFFICEADDRESS_2 != null || !forView) {
      map['OFFICEADDRESS_2'] = OFFICEADDRESS_2;
    }
    if (OFFICETYPE_5 != null || !forView) {
      map['OFFICETYPE_5'] = OFFICETYPE_5;
    }
    if (COOFFICECODE != null || !forView) {
      map['COOFFICECODE'] = COOFFICECODE;
    }
    if (OFFICEADDRESS_1 != null || !forView) {
      map['OFFICEADDRESS_1'] = OFFICEADDRESS_1;
    }
    if (OFFICETYPE_6 != null || !forView) {
      map['OFFICETYPE_6'] = OFFICETYPE_6;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['SNo'] = SNo;
    if (BOOFFICETYPE != null || !forView) {
      map['BOOFFICETYPE'] = BOOFFICETYPE;
    }
    if (dateTime != null || !forView) {
      map['dateTime'] = dateTime;
    }
    if (BOOFFICECODE != null || !forView) {
      map['BOOFFICECODE'] = BOOFFICECODE;
    }
    if (COOFFICETYPE != null || !forView) {
      map['COOFFICETYPE'] = COOFFICETYPE;
    }
    if (HOOFFICEADDRESS != null || !forView) {
      map['HOOFFICEADDRESS'] = HOOFFICEADDRESS;
    }
    if (HOOFFICECODE != null || !forView) {
      map['HOOFFICECODE'] = HOOFFICECODE;
    }
    if (HOOFFICETYPE != null || !forView) {
      map['HOOFFICETYPE'] = HOOFFICETYPE;
    }
    if (BOOFFICEADDRESS != null || !forView) {
      map['BOOFFICEADDRESS'] = BOOFFICEADDRESS;
    }
    if (OFFICECODE_6 != null || !forView) {
      map['OFFICECODE_6'] = OFFICECODE_6;
    }
    if (OFFICECODE_4 != null || !forView) {
      map['OFFICECODE_4'] = OFFICECODE_4;
    }
    if (OFFICECODE_5 != null || !forView) {
      map['OFFICECODE_5'] = OFFICECODE_5;
    }
    if (OFFICECODE_2 != null || !forView) {
      map['OFFICECODE_2'] = OFFICECODE_2;
    }
    if (OFFICECODE_3 != null || !forView) {
      map['OFFICECODE_3'] = OFFICECODE_3;
    }
    if (OFFICECODE_1 != null || !forView) {
      map['OFFICECODE_1'] = OFFICECODE_1;
    }
    if (POCode != null || !forView) {
      map['POCode'] = POCode;
    }
    if (OFFICETYPE_3 != null || !forView) {
      map['OFFICETYPE_3'] = OFFICETYPE_3;
    }
    if (OFFICEADDRESS_4 != null || !forView) {
      map['OFFICEADDRESS_4'] = OFFICEADDRESS_4;
    }
    if (OFFICEADDRESS_3 != null || !forView) {
      map['OFFICEADDRESS_3'] = OFFICEADDRESS_3;
    }
    if (OFFICETYPE_4 != null || !forView) {
      map['OFFICETYPE_4'] = OFFICETYPE_4;
    }
    if (OFFICETYPE_1 != null || !forView) {
      map['OFFICETYPE_1'] = OFFICETYPE_1;
    }
    if (OFFICEADDRESS_6 != null || !forView) {
      map['OFFICEADDRESS_6'] = OFFICEADDRESS_6;
    }
    if (OFFICETYPE_2 != null || !forView) {
      map['OFFICETYPE_2'] = OFFICETYPE_2;
    }
    if (OFFICEADDRESS_5 != null || !forView) {
      map['OFFICEADDRESS_5'] = OFFICEADDRESS_5;
    }
    if (COOFFICEADDRESS != null || !forView) {
      map['COOFFICEADDRESS'] = COOFFICEADDRESS;
    }
    if (OFFICEADDRESS_2 != null || !forView) {
      map['OFFICEADDRESS_2'] = OFFICEADDRESS_2;
    }
    if (OFFICETYPE_5 != null || !forView) {
      map['OFFICETYPE_5'] = OFFICETYPE_5;
    }
    if (COOFFICECODE != null || !forView) {
      map['COOFFICECODE'] = COOFFICECODE;
    }
    if (OFFICEADDRESS_1 != null || !forView) {
      map['OFFICEADDRESS_1'] = OFFICEADDRESS_1;
    }
    if (OFFICETYPE_6 != null || !forView) {
      map['OFFICETYPE_6'] = OFFICETYPE_6;
    }

    return map;
  }

  /// This method returns Json String [OfficeDetail]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [OfficeDetail]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      BOOFFICETYPE,
      dateTime,
      BOOFFICECODE,
      COOFFICETYPE,
      HOOFFICEADDRESS,
      HOOFFICECODE,
      HOOFFICETYPE,
      BOOFFICEADDRESS,
      OFFICECODE_6,
      OFFICECODE_4,
      OFFICECODE_5,
      OFFICECODE_2,
      OFFICECODE_3,
      OFFICECODE_1,
      POCode,
      OFFICETYPE_3,
      OFFICEADDRESS_4,
      OFFICEADDRESS_3,
      OFFICETYPE_4,
      OFFICETYPE_1,
      OFFICEADDRESS_6,
      OFFICETYPE_2,
      OFFICEADDRESS_5,
      COOFFICEADDRESS,
      OFFICEADDRESS_2,
      OFFICETYPE_5,
      COOFFICECODE,
      OFFICEADDRESS_1,
      OFFICETYPE_6
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      SNo,
      BOOFFICETYPE,
      dateTime,
      BOOFFICECODE,
      COOFFICETYPE,
      HOOFFICEADDRESS,
      HOOFFICECODE,
      HOOFFICETYPE,
      BOOFFICEADDRESS,
      OFFICECODE_6,
      OFFICECODE_4,
      OFFICECODE_5,
      OFFICECODE_2,
      OFFICECODE_3,
      OFFICECODE_1,
      POCode,
      OFFICETYPE_3,
      OFFICEADDRESS_4,
      OFFICEADDRESS_3,
      OFFICETYPE_4,
      OFFICETYPE_1,
      OFFICEADDRESS_6,
      OFFICETYPE_2,
      OFFICEADDRESS_5,
      COOFFICEADDRESS,
      OFFICEADDRESS_2,
      OFFICETYPE_5,
      COOFFICECODE,
      OFFICEADDRESS_1,
      OFFICETYPE_6
    ];
  }

  static Future<List<OfficeDetail>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR OfficeDetail.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<OfficeDetail>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <OfficeDetail>[];
    try {
      objList = list
          .map((officedetail) =>
              OfficeDetail.fromMap(officedetail as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR OfficeDetail.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<OfficeDetail>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<OfficeDetail> objList = <OfficeDetail>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = OfficeDetail.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns OfficeDetail by ID if exist, otherwise returns null
  /// Primary Keys: int? SNo
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [OfficeDetail] if exist, otherwise returns null
  Future<OfficeDetail?> getById(int? SNo,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (SNo == null) {
      return null;
    }
    OfficeDetail? obj;
    final data = await _mnOfficeDetail.getById([SNo]);
    if (data.length != 0) {
      obj = OfficeDetail.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (OfficeDetail) object. If the SNo field is null, saves as a new record and returns new SNo, if SNo is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns SNo
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (SNo == null || SNo == 0) {
      SNo = await _mnOfficeDetail.insert(this, ignoreBatch);
    } else {
      await _mnOfficeDetail.update(this);
    }

    return SNo;
  }

  /// Saves the (OfficeDetail) object. If the SNo field is null, saves as a new record and returns new SNo, if SNo is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns SNo
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (SNo == null || SNo == 0) {
      SNo = await _mnOfficeDetail.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // SNo= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnOfficeDetail.updateOrThrow(this);
    }

    return SNo;
  }

  /// saveAs OfficeDetail. Returns a new Primary Key value of OfficeDetail

  /// <returns>Returns a new Primary Key value of OfficeDetail
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    SNo = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<OfficeDetail> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<OfficeDetail> officedetails,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await OfficeDetails().batchStart();
    for (final obj in officedetails) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await OfficeDetails().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < officedetails.length; i++) {
        if (officedetails[i].SNo == null) {
          officedetails[i].SNo = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns SNo
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnOfficeDetail.rawInsert(
          'INSERT OR REPLACE INTO officeDetails (SNo, BOOFFICETYPE, dateTime, BOOFFICECODE, COOFFICETYPE, HOOFFICEADDRESS, HOOFFICECODE, HOOFFICETYPE, BOOFFICEADDRESS, OFFICECODE_6, OFFICECODE_4, OFFICECODE_5, OFFICECODE_2, OFFICECODE_3, OFFICECODE_1, POCode, OFFICETYPE_3, OFFICEADDRESS_4, OFFICEADDRESS_3, OFFICETYPE_4, OFFICETYPE_1, OFFICEADDRESS_6, OFFICETYPE_2, OFFICEADDRESS_5, COOFFICEADDRESS, OFFICEADDRESS_2, OFFICETYPE_5, COOFFICECODE, OFFICEADDRESS_1, OFFICETYPE_6)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            SNo,
            BOOFFICETYPE,
            dateTime,
            BOOFFICECODE,
            COOFFICETYPE,
            HOOFFICEADDRESS,
            HOOFFICECODE,
            HOOFFICETYPE,
            BOOFFICEADDRESS,
            OFFICECODE_6,
            OFFICECODE_4,
            OFFICECODE_5,
            OFFICECODE_2,
            OFFICECODE_3,
            OFFICECODE_1,
            POCode,
            OFFICETYPE_3,
            OFFICEADDRESS_4,
            OFFICEADDRESS_3,
            OFFICETYPE_4,
            OFFICETYPE_1,
            OFFICEADDRESS_6,
            OFFICETYPE_2,
            OFFICEADDRESS_5,
            COOFFICEADDRESS,
            OFFICEADDRESS_2,
            OFFICETYPE_5,
            COOFFICECODE,
            OFFICEADDRESS_1,
            OFFICETYPE_6
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'OfficeDetail SNo=$SNo updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'OfficeDetail SNo=$SNo did not update');
      }
      return SNo;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'OfficeDetail Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns SNo
  @override
  Future<int?> upsert1({bool ignoreBatch = true}) async {
    try {
      final result = await _mnOfficeDetail.rawInsert(
          'INSERT OR IGNORE INTO officeDetails (SNo, BOOFFICETYPE, dateTime, BOOFFICECODE, COOFFICETYPE, HOOFFICEADDRESS, HOOFFICECODE, HOOFFICETYPE, BOOFFICEADDRESS, OFFICECODE_6, OFFICECODE_4, OFFICECODE_5, OFFICECODE_2, OFFICECODE_3, OFFICECODE_1, POCode, OFFICETYPE_3, OFFICEADDRESS_4, OFFICEADDRESS_3, OFFICETYPE_4, OFFICETYPE_1, OFFICEADDRESS_6, OFFICETYPE_2, OFFICEADDRESS_5, COOFFICEADDRESS, OFFICEADDRESS_2, OFFICETYPE_5, COOFFICECODE, OFFICEADDRESS_1, OFFICETYPE_6)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            SNo,
            BOOFFICETYPE,
            dateTime,
            BOOFFICECODE,
            COOFFICETYPE,
            HOOFFICEADDRESS,
            HOOFFICECODE,
            HOOFFICETYPE,
            BOOFFICEADDRESS,
            OFFICECODE_6,
            OFFICECODE_4,
            OFFICECODE_5,
            OFFICECODE_2,
            OFFICECODE_3,
            OFFICECODE_1,
            POCode,
            OFFICETYPE_3,
            OFFICEADDRESS_4,
            OFFICEADDRESS_3,
            OFFICETYPE_4,
            OFFICETYPE_1,
            OFFICEADDRESS_6,
            OFFICETYPE_2,
            OFFICEADDRESS_5,
            COOFFICEADDRESS,
            OFFICEADDRESS_2,
            OFFICETYPE_5,
            COOFFICECODE,
            OFFICEADDRESS_1,
            OFFICETYPE_6
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'OfficeDetail SNo=$SNo updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'OfficeDetail SNo=$SNo did not update');
      }
      return SNo;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'OfficeDetail Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<OfficeDetail>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<OfficeDetail> officedetails,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnOfficeDetail.rawInsertAll(
        'INSERT OR REPLACE INTO officeDetails (SNo, BOOFFICETYPE, dateTime, BOOFFICECODE, COOFFICETYPE, HOOFFICEADDRESS, HOOFFICECODE, HOOFFICETYPE, BOOFFICEADDRESS, OFFICECODE_6, OFFICECODE_4, OFFICECODE_5, OFFICECODE_2, OFFICECODE_3, OFFICECODE_1, POCode, OFFICETYPE_3, OFFICEADDRESS_4, OFFICEADDRESS_3, OFFICETYPE_4, OFFICETYPE_1, OFFICEADDRESS_6, OFFICETYPE_2, OFFICEADDRESS_5, COOFFICEADDRESS, OFFICEADDRESS_2, OFFICETYPE_5, COOFFICECODE, OFFICEADDRESS_1, OFFICETYPE_6)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
        officedetails,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes OfficeDetail

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete OfficeDetail invoked (SNo=$SNo)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnOfficeDetail
          .delete(QueryParams(whereString: 'SNo=?', whereArguments: [SNo]));
    } else {
      return _mnOfficeDetail.updateBatch(
          QueryParams(whereString: 'SNo=?', whereArguments: [SNo]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [OfficeDetail] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  OfficeDetailFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return OfficeDetailFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  OfficeDetailFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return OfficeDetailFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      SNo = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion officedetail

// region OfficeDetailField
class OfficeDetailField extends FilterBase {
  OfficeDetailField(OfficeDetailFilterBuilder officedetailFB)
      : super(officedetailFB);

  @override
  OfficeDetailFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as OfficeDetailFilterBuilder;
  }

  @override
  OfficeDetailFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as OfficeDetailFilterBuilder;
  }

  @override
  OfficeDetailFilterBuilder isNull() {
    return super.isNull() as OfficeDetailFilterBuilder;
  }

  @override
  OfficeDetailFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as OfficeDetailFilterBuilder;
  }

  @override
  OfficeDetailFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as OfficeDetailFilterBuilder;
  }

  @override
  OfficeDetailFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as OfficeDetailFilterBuilder;
  }

  @override
  OfficeDetailFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as OfficeDetailFilterBuilder;
  }

  @override
  OfficeDetailFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as OfficeDetailFilterBuilder;
  }

  @override
  OfficeDetailFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as OfficeDetailFilterBuilder;
  }

  @override
  OfficeDetailFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as OfficeDetailFilterBuilder;
  }

  @override
  OfficeDetailFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as OfficeDetailFilterBuilder;
  }

  @override
  OfficeDetailFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as OfficeDetailFilterBuilder;
  }

  @override
  OfficeDetailField get not {
    return super.not as OfficeDetailField;
  }
}
// endregion OfficeDetailField

// region OfficeDetailFilterBuilder
class OfficeDetailFilterBuilder extends ConjunctionBase {
  OfficeDetailFilterBuilder(OfficeDetail obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnOfficeDetail = obj._mnOfficeDetail;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  OfficeDetailManager? _mnOfficeDetail;

  /// put the sql keyword 'AND'
  @override
  OfficeDetailFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  OfficeDetailFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  OfficeDetailFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  OfficeDetailFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  OfficeDetailFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  OfficeDetailFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  OfficeDetailFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  OfficeDetailFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  OfficeDetailFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  OfficeDetailFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  OfficeDetailFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  OfficeDetailField _setField(
      OfficeDetailField? field, String colName, DbType dbtype) {
    return OfficeDetailField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  OfficeDetailField? _SNo;
  OfficeDetailField get SNo {
    return _SNo = _setField(_SNo, 'SNo', DbType.integer);
  }

  OfficeDetailField? _BOOFFICETYPE;
  OfficeDetailField get BOOFFICETYPE {
    return _BOOFFICETYPE =
        _setField(_BOOFFICETYPE, 'BOOFFICETYPE', DbType.text);
  }

  OfficeDetailField? _dateTime;
  OfficeDetailField get dateTime {
    return _dateTime = _setField(_dateTime, 'dateTime', DbType.text);
  }

  OfficeDetailField? _BOOFFICECODE;
  OfficeDetailField get BOOFFICECODE {
    return _BOOFFICECODE =
        _setField(_BOOFFICECODE, 'BOOFFICECODE', DbType.text);
  }

  OfficeDetailField? _COOFFICETYPE;
  OfficeDetailField get COOFFICETYPE {
    return _COOFFICETYPE =
        _setField(_COOFFICETYPE, 'COOFFICETYPE', DbType.text);
  }

  OfficeDetailField? _HOOFFICEADDRESS;
  OfficeDetailField get HOOFFICEADDRESS {
    return _HOOFFICEADDRESS =
        _setField(_HOOFFICEADDRESS, 'HOOFFICEADDRESS', DbType.text);
  }

  OfficeDetailField? _HOOFFICECODE;
  OfficeDetailField get HOOFFICECODE {
    return _HOOFFICECODE =
        _setField(_HOOFFICECODE, 'HOOFFICECODE', DbType.text);
  }

  OfficeDetailField? _HOOFFICETYPE;
  OfficeDetailField get HOOFFICETYPE {
    return _HOOFFICETYPE =
        _setField(_HOOFFICETYPE, 'HOOFFICETYPE', DbType.text);
  }

  OfficeDetailField? _BOOFFICEADDRESS;
  OfficeDetailField get BOOFFICEADDRESS {
    return _BOOFFICEADDRESS =
        _setField(_BOOFFICEADDRESS, 'BOOFFICEADDRESS', DbType.text);
  }

  OfficeDetailField? _OFFICECODE_6;
  OfficeDetailField get OFFICECODE_6 {
    return _OFFICECODE_6 =
        _setField(_OFFICECODE_6, 'OFFICECODE_6', DbType.text);
  }

  OfficeDetailField? _OFFICECODE_4;
  OfficeDetailField get OFFICECODE_4 {
    return _OFFICECODE_4 =
        _setField(_OFFICECODE_4, 'OFFICECODE_4', DbType.text);
  }

  OfficeDetailField? _OFFICECODE_5;
  OfficeDetailField get OFFICECODE_5 {
    return _OFFICECODE_5 =
        _setField(_OFFICECODE_5, 'OFFICECODE_5', DbType.text);
  }

  OfficeDetailField? _OFFICECODE_2;
  OfficeDetailField get OFFICECODE_2 {
    return _OFFICECODE_2 =
        _setField(_OFFICECODE_2, 'OFFICECODE_2', DbType.text);
  }

  OfficeDetailField? _OFFICECODE_3;
  OfficeDetailField get OFFICECODE_3 {
    return _OFFICECODE_3 =
        _setField(_OFFICECODE_3, 'OFFICECODE_3', DbType.text);
  }

  OfficeDetailField? _OFFICECODE_1;
  OfficeDetailField get OFFICECODE_1 {
    return _OFFICECODE_1 =
        _setField(_OFFICECODE_1, 'OFFICECODE_1', DbType.text);
  }

  OfficeDetailField? _POCode;
  OfficeDetailField get POCode {
    return _POCode = _setField(_POCode, 'POCode', DbType.text);
  }

  OfficeDetailField? _OFFICETYPE_3;
  OfficeDetailField get OFFICETYPE_3 {
    return _OFFICETYPE_3 =
        _setField(_OFFICETYPE_3, 'OFFICETYPE_3', DbType.text);
  }

  OfficeDetailField? _OFFICEADDRESS_4;
  OfficeDetailField get OFFICEADDRESS_4 {
    return _OFFICEADDRESS_4 =
        _setField(_OFFICEADDRESS_4, 'OFFICEADDRESS_4', DbType.text);
  }

  OfficeDetailField? _OFFICEADDRESS_3;
  OfficeDetailField get OFFICEADDRESS_3 {
    return _OFFICEADDRESS_3 =
        _setField(_OFFICEADDRESS_3, 'OFFICEADDRESS_3', DbType.text);
  }

  OfficeDetailField? _OFFICETYPE_4;
  OfficeDetailField get OFFICETYPE_4 {
    return _OFFICETYPE_4 =
        _setField(_OFFICETYPE_4, 'OFFICETYPE_4', DbType.text);
  }

  OfficeDetailField? _OFFICETYPE_1;
  OfficeDetailField get OFFICETYPE_1 {
    return _OFFICETYPE_1 =
        _setField(_OFFICETYPE_1, 'OFFICETYPE_1', DbType.text);
  }

  OfficeDetailField? _OFFICEADDRESS_6;
  OfficeDetailField get OFFICEADDRESS_6 {
    return _OFFICEADDRESS_6 =
        _setField(_OFFICEADDRESS_6, 'OFFICEADDRESS_6', DbType.text);
  }

  OfficeDetailField? _OFFICETYPE_2;
  OfficeDetailField get OFFICETYPE_2 {
    return _OFFICETYPE_2 =
        _setField(_OFFICETYPE_2, 'OFFICETYPE_2', DbType.text);
  }

  OfficeDetailField? _OFFICEADDRESS_5;
  OfficeDetailField get OFFICEADDRESS_5 {
    return _OFFICEADDRESS_5 =
        _setField(_OFFICEADDRESS_5, 'OFFICEADDRESS_5', DbType.text);
  }

  OfficeDetailField? _COOFFICEADDRESS;
  OfficeDetailField get COOFFICEADDRESS {
    return _COOFFICEADDRESS =
        _setField(_COOFFICEADDRESS, 'COOFFICEADDRESS', DbType.text);
  }

  OfficeDetailField? _OFFICEADDRESS_2;
  OfficeDetailField get OFFICEADDRESS_2 {
    return _OFFICEADDRESS_2 =
        _setField(_OFFICEADDRESS_2, 'OFFICEADDRESS_2', DbType.text);
  }

  OfficeDetailField? _OFFICETYPE_5;
  OfficeDetailField get OFFICETYPE_5 {
    return _OFFICETYPE_5 =
        _setField(_OFFICETYPE_5, 'OFFICETYPE_5', DbType.text);
  }

  OfficeDetailField? _COOFFICECODE;
  OfficeDetailField get COOFFICECODE {
    return _COOFFICECODE =
        _setField(_COOFFICECODE, 'COOFFICECODE', DbType.text);
  }

  OfficeDetailField? _OFFICEADDRESS_1;
  OfficeDetailField get OFFICEADDRESS_1 {
    return _OFFICEADDRESS_1 =
        _setField(_OFFICEADDRESS_1, 'OFFICEADDRESS_1', DbType.text);
  }

  OfficeDetailField? _OFFICETYPE_6;
  OfficeDetailField get OFFICETYPE_6 {
    return _OFFICETYPE_6 =
        _setField(_OFFICETYPE_6, 'OFFICETYPE_6', DbType.text);
  }

  /// Deletes List<OfficeDetail> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnOfficeDetail!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnOfficeDetail!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'SNo IN (SELECT SNo from officeDetails ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnOfficeDetail!.updateBatch(qparams, values);
  }

  /// This method always returns [OfficeDetail] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> OfficeDetail?
  @override
  Future<OfficeDetail?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnOfficeDetail!.toList(qparams);
    final data = await objFuture;
    OfficeDetail? obj;
    if (data.isNotEmpty) {
      obj = OfficeDetail.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [OfficeDetail]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> OfficeDetail?
  @override
  Future<OfficeDetail> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        OfficeDetail();
  }

  /// This method returns int. [OfficeDetail]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? officedetailCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final officedetailsFuture = await _mnOfficeDetail!.toList(qparams);
    final int count = officedetailsFuture[0]['CNT'] as int;
    if (officedetailCount != null) {
      officedetailCount(count);
    }
    return count;
  }

  /// This method returns List<OfficeDetail> [OfficeDetail]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<OfficeDetail>
  @override
  Future<List<OfficeDetail>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<OfficeDetail> officedetailsData = await OfficeDetail.fromMapList(
        data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return officedetailsData;
  }

  /// This method returns Json String [OfficeDetail]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [OfficeDetail]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [OfficeDetail]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnOfficeDetail!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [OfficeDetail]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `SNo` FROM officeDetails WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> SNoData = <int>[];
    qparams.selectColumns = ['SNo'];
    final SNoFuture = await _mnOfficeDetail!.toList(qparams);

    final int count = SNoFuture.length;
    for (int i = 0; i < count; i++) {
      SNoData.add(SNoFuture[i]['SNo'] as int);
    }
    return SNoData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [OfficeDetail]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnOfficeDetail!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await OfficeDetail.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnOfficeDetail!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion OfficeDetailFilterBuilder

// region OfficeDetailFields
class OfficeDetailFields {
  static TableField? _fSNo;
  static TableField get SNo {
    return _fSNo = _fSNo ?? SqlSyntax.setField(_fSNo, 'sno', DbType.integer);
  }

  static TableField? _fBOOFFICETYPE;
  static TableField get BOOFFICETYPE {
    return _fBOOFFICETYPE = _fBOOFFICETYPE ??
        SqlSyntax.setField(_fBOOFFICETYPE, 'BOOFFICETYPE', DbType.text);
  }

  static TableField? _fDateTime;
  static TableField get dateTime {
    return _fDateTime =
        _fDateTime ?? SqlSyntax.setField(_fDateTime, 'dateTime', DbType.text);
  }

  static TableField? _fBOOFFICECODE;
  static TableField get BOOFFICECODE {
    return _fBOOFFICECODE = _fBOOFFICECODE ??
        SqlSyntax.setField(_fBOOFFICECODE, 'BOOFFICECODE', DbType.text);
  }

  static TableField? _fCOOFFICETYPE;
  static TableField get COOFFICETYPE {
    return _fCOOFFICETYPE = _fCOOFFICETYPE ??
        SqlSyntax.setField(_fCOOFFICETYPE, 'COOFFICETYPE', DbType.text);
  }

  static TableField? _fHOOFFICEADDRESS;
  static TableField get HOOFFICEADDRESS {
    return _fHOOFFICEADDRESS = _fHOOFFICEADDRESS ??
        SqlSyntax.setField(_fHOOFFICEADDRESS, 'HOOFFICEADDRESS', DbType.text);
  }

  static TableField? _fHOOFFICECODE;
  static TableField get HOOFFICECODE {
    return _fHOOFFICECODE = _fHOOFFICECODE ??
        SqlSyntax.setField(_fHOOFFICECODE, 'HOOFFICECODE', DbType.text);
  }

  static TableField? _fHOOFFICETYPE;
  static TableField get HOOFFICETYPE {
    return _fHOOFFICETYPE = _fHOOFFICETYPE ??
        SqlSyntax.setField(_fHOOFFICETYPE, 'HOOFFICETYPE', DbType.text);
  }

  static TableField? _fBOOFFICEADDRESS;
  static TableField get BOOFFICEADDRESS {
    return _fBOOFFICEADDRESS = _fBOOFFICEADDRESS ??
        SqlSyntax.setField(_fBOOFFICEADDRESS, 'BOOFFICEADDRESS', DbType.text);
  }

  static TableField? _fOFFICECODE_6;
  static TableField get OFFICECODE_6 {
    return _fOFFICECODE_6 = _fOFFICECODE_6 ??
        SqlSyntax.setField(_fOFFICECODE_6, 'OFFICECODE_6', DbType.text);
  }

  static TableField? _fOFFICECODE_4;
  static TableField get OFFICECODE_4 {
    return _fOFFICECODE_4 = _fOFFICECODE_4 ??
        SqlSyntax.setField(_fOFFICECODE_4, 'OFFICECODE_4', DbType.text);
  }

  static TableField? _fOFFICECODE_5;
  static TableField get OFFICECODE_5 {
    return _fOFFICECODE_5 = _fOFFICECODE_5 ??
        SqlSyntax.setField(_fOFFICECODE_5, 'OFFICECODE_5', DbType.text);
  }

  static TableField? _fOFFICECODE_2;
  static TableField get OFFICECODE_2 {
    return _fOFFICECODE_2 = _fOFFICECODE_2 ??
        SqlSyntax.setField(_fOFFICECODE_2, 'OFFICECODE_2', DbType.text);
  }

  static TableField? _fOFFICECODE_3;
  static TableField get OFFICECODE_3 {
    return _fOFFICECODE_3 = _fOFFICECODE_3 ??
        SqlSyntax.setField(_fOFFICECODE_3, 'OFFICECODE_3', DbType.text);
  }

  static TableField? _fOFFICECODE_1;
  static TableField get OFFICECODE_1 {
    return _fOFFICECODE_1 = _fOFFICECODE_1 ??
        SqlSyntax.setField(_fOFFICECODE_1, 'OFFICECODE_1', DbType.text);
  }

  static TableField? _fPOCode;
  static TableField get POCode {
    return _fPOCode =
        _fPOCode ?? SqlSyntax.setField(_fPOCode, 'POCode', DbType.text);
  }

  static TableField? _fOFFICETYPE_3;
  static TableField get OFFICETYPE_3 {
    return _fOFFICETYPE_3 = _fOFFICETYPE_3 ??
        SqlSyntax.setField(_fOFFICETYPE_3, 'OFFICETYPE_3', DbType.text);
  }

  static TableField? _fOFFICEADDRESS_4;
  static TableField get OFFICEADDRESS_4 {
    return _fOFFICEADDRESS_4 = _fOFFICEADDRESS_4 ??
        SqlSyntax.setField(_fOFFICEADDRESS_4, 'OFFICEADDRESS_4', DbType.text);
  }

  static TableField? _fOFFICEADDRESS_3;
  static TableField get OFFICEADDRESS_3 {
    return _fOFFICEADDRESS_3 = _fOFFICEADDRESS_3 ??
        SqlSyntax.setField(_fOFFICEADDRESS_3, 'OFFICEADDRESS_3', DbType.text);
  }

  static TableField? _fOFFICETYPE_4;
  static TableField get OFFICETYPE_4 {
    return _fOFFICETYPE_4 = _fOFFICETYPE_4 ??
        SqlSyntax.setField(_fOFFICETYPE_4, 'OFFICETYPE_4', DbType.text);
  }

  static TableField? _fOFFICETYPE_1;
  static TableField get OFFICETYPE_1 {
    return _fOFFICETYPE_1 = _fOFFICETYPE_1 ??
        SqlSyntax.setField(_fOFFICETYPE_1, 'OFFICETYPE_1', DbType.text);
  }

  static TableField? _fOFFICEADDRESS_6;
  static TableField get OFFICEADDRESS_6 {
    return _fOFFICEADDRESS_6 = _fOFFICEADDRESS_6 ??
        SqlSyntax.setField(_fOFFICEADDRESS_6, 'OFFICEADDRESS_6', DbType.text);
  }

  static TableField? _fOFFICETYPE_2;
  static TableField get OFFICETYPE_2 {
    return _fOFFICETYPE_2 = _fOFFICETYPE_2 ??
        SqlSyntax.setField(_fOFFICETYPE_2, 'OFFICETYPE_2', DbType.text);
  }

  static TableField? _fOFFICEADDRESS_5;
  static TableField get OFFICEADDRESS_5 {
    return _fOFFICEADDRESS_5 = _fOFFICEADDRESS_5 ??
        SqlSyntax.setField(_fOFFICEADDRESS_5, 'OFFICEADDRESS_5', DbType.text);
  }

  static TableField? _fCOOFFICEADDRESS;
  static TableField get COOFFICEADDRESS {
    return _fCOOFFICEADDRESS = _fCOOFFICEADDRESS ??
        SqlSyntax.setField(_fCOOFFICEADDRESS, 'COOFFICEADDRESS', DbType.text);
  }

  static TableField? _fOFFICEADDRESS_2;
  static TableField get OFFICEADDRESS_2 {
    return _fOFFICEADDRESS_2 = _fOFFICEADDRESS_2 ??
        SqlSyntax.setField(_fOFFICEADDRESS_2, 'OFFICEADDRESS_2', DbType.text);
  }

  static TableField? _fOFFICETYPE_5;
  static TableField get OFFICETYPE_5 {
    return _fOFFICETYPE_5 = _fOFFICETYPE_5 ??
        SqlSyntax.setField(_fOFFICETYPE_5, 'OFFICETYPE_5', DbType.text);
  }

  static TableField? _fCOOFFICECODE;
  static TableField get COOFFICECODE {
    return _fCOOFFICECODE = _fCOOFFICECODE ??
        SqlSyntax.setField(_fCOOFFICECODE, 'COOFFICECODE', DbType.text);
  }

  static TableField? _fOFFICEADDRESS_1;
  static TableField get OFFICEADDRESS_1 {
    return _fOFFICEADDRESS_1 = _fOFFICEADDRESS_1 ??
        SqlSyntax.setField(_fOFFICEADDRESS_1, 'OFFICEADDRESS_1', DbType.text);
  }

  static TableField? _fOFFICETYPE_6;
  static TableField get OFFICETYPE_6 {
    return _fOFFICETYPE_6 = _fOFFICETYPE_6 ??
        SqlSyntax.setField(_fOFFICETYPE_6, 'OFFICETYPE_6', DbType.text);
  }
}
// endregion OfficeDetailFields

//region OfficeDetailManager
class OfficeDetailManager extends SqfEntityProvider {
  OfficeDetailManager()
      : super(OfficeDetails(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'officeDetails';
  static const List<String> _primaryKeyList = ['SNo'];
  static const String _whereStr = 'SNo=?';
}

//endregion OfficeDetailManager
class OfficeDetailsSequenceManager extends SqfEntityProvider {
  OfficeDetailsSequenceManager() : super(OfficeDetails());
}
// END OF ENTITIES
